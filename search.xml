<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>questions</title>
    <url>/2015/10/22/questions/</url>
    <content><![CDATA[<h2 id="部门权限控制"><a href="#部门权限控制" class="headerlink" title="部门权限控制"></a>部门权限控制</h2><ul>
<li>认证 权限 由 shiro 控制， 部门范围由具体业务处理</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Android入门 图谱</title>
    <url>/2017/08/22/android/android0_index/</url>
    <content><![CDATA[<h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>Android 相关一览</p>
<ul>
<li>log</li>
</ul>
<p><em>更新历史</em><br>2017-8-22 logcat</p>
<span id="more"></span>


<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p>Android中的日志工具类是Log(android.util.Log),这个类中提供了如下5个方法来供我们打日志。 </p>
<ul>
<li>Log.v() 。用于打印那些最为琐碎的、意义最小的日志信息。对应级别verbose,Android日志里面级别最低的一种。 </li>
<li>Log.d() 。用于打印一些调试信息,这些信息对你调试程序和分析问题应该是有帮助的对应级别debug,比verbose高一级。 </li>
<li>Log.i() 。用于打印一些比较重要的数据,这些数据应该是你非常想看到的、可以帮你析用户行为数据。对应级别info,比debug高一级。 </li>
<li>Log.w() 。用于打印一些警告信息,提示程序在这个地方可能会有潜在的风险,最好去复一下这些出现警告的地方。对应级别warn,比info高一级。 </li>
<li>Log.e() 。用于打印程序中的错误信息,比如程序进入到了catch语句当中。当有错误息打印出来的时候,一般都代表你的程序出现严重问题了,必须尽快修复。对应级error,比warn高一级。</li>
</ul>
<p>logcat 里面可以定制过滤器</p>
<h3 id="定制日志工具"><a href="#定制日志工具" class="headerlink" title="定制日志工具"></a>定制日志工具</h3><p>用过<code>log4j</code>的同学一定知道日志等级，可以在配置文件中配置；郭霖大大的方案是自己定制下log</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public class LogUtil &#123;</span><br><span class="line">    public static final int VERBOSE = 1;</span><br><span class="line">    public static final int DEBUG = 2;</span><br><span class="line">    public static final int INFO = 3;</span><br><span class="line">    public static final int WARN = 4;</span><br><span class="line">    public static final int ERROR = 5;</span><br><span class="line">    public static final int NOTHING = 6;</span><br><span class="line">    public static int level = VERBOSE;</span><br><span class="line">    public static void v(String tag, String msg) &#123;</span><br><span class="line">        if (level &lt;= VERBOSE) &#123;</span><br><span class="line">            Log.v(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void d(String tag, String msg) &#123;</span><br><span class="line">        if (level &lt;= DEBUG) &#123;Log.d(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void i(String tag, String msg) &#123;</span><br><span class="line">        if (level &lt;= INFO) &#123;</span><br><span class="line">            Log.i(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void w(String tag, String msg) &#123;</span><br><span class="line">        if (level &lt;= WARN) &#123;</span><br><span class="line">            Log.w(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void e(String tag, String msg) &#123;</span><br><span class="line">        if (level &lt;= ERROR) &#123;</span><br><span class="line">            Log.e(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们只需要修改level 变量的值,就可以自由地控制日志的打印行为了。比如让level&#x3D;VERBOSE 就可以把所有的日志都打印出来,让level&#x3D;WARN 就可以只打印警告以上级别的志,让level&#x3D;NOTHING 就可以把所有日志都屏蔽掉。</p>
<h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="线性布局"><a href="#线性布局" class="headerlink" title="线性布局"></a>线性布局</h2><h2 id="相对布局"><a href="#相对布局" class="headerlink" title="相对布局"></a>相对布局</h2><h2 id="帧布局"><a href="#帧布局" class="headerlink" title="帧布局"></a>帧布局</h2><h2 id="表格布局"><a href="#表格布局" class="headerlink" title="表格布局"></a>表格布局</h2><h2 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h2><h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><h2 id="内部存储"><a href="#内部存储" class="headerlink" title="内部存储"></a>内部存储</h2><h2 id="SD卡"><a href="#SD卡" class="headerlink" title="SD卡"></a>SD卡</h2><h2 id="SharedPreference"><a href="#SharedPreference" class="headerlink" title="SharedPreference"></a>SharedPreference</h2><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h1 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h1><h2 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h2><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><h2 id="原生-CRUD"><a href="#原生-CRUD" class="headerlink" title="原生 CRUD"></a>原生 CRUD</h2><h2 id="API-CRUD"><a href="#API-CRUD" class="headerlink" title="API CRUD"></a>API CRUD</h2><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h1 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h1><h2 id="Toast"><a href="#Toast" class="headerlink" title="Toast"></a>Toast</h2><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><p>导入局部布局<br>条目点击监听 ： <code>setOnItemClickListener</code></p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul>
<li>convertView</li>
<li>ViewHolder</li>
</ul>
<h2 id="Dialog-对话框"><a href="#Dialog-对话框" class="headerlink" title="Dialog 对话框"></a>Dialog 对话框</h2><h3 id="确定取消Dialog"><a href="#确定取消Dialog" class="headerlink" title="确定取消Dialog"></a>确定取消Dialog</h3><h3 id="单选Dialog"><a href="#单选Dialog" class="headerlink" title="单选Dialog"></a>单选Dialog</h3><h3 id="多选Dialog"><a href="#多选Dialog" class="headerlink" title="多选Dialog"></a>多选Dialog</h3><h1 id="网络访问"><a href="#网络访问" class="headerlink" title="网络访问"></a>网络访问</h1><h2 id="堵塞"><a href="#堵塞" class="headerlink" title="堵塞"></a>堵塞</h2><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><h1 id="四大组件-Activity，Service服务-Content-Provider内容提供者，BroadcastReceiver广播接收器"><a href="#四大组件-Activity，Service服务-Content-Provider内容提供者，BroadcastReceiver广播接收器" class="headerlink" title="四大组件 Activity，Service服务,Content Provider内容提供者，BroadcastReceiver广播接收器"></a>四大组件 Activity，Service服务,Content Provider内容提供者，BroadcastReceiver广播接收器</h1><h1 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h1><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><p>显式效率高</p>
<h3 id="显式跳转"><a href="#显式跳转" class="headerlink" title="显式跳转"></a>显式跳转</h3><h3 id="隐式跳转"><a href="#隐式跳转" class="headerlink" title="隐式跳转"></a>隐式跳转</h3><h2 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h2><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><h3 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h3><ul>
<li><p>子Activity</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Intent data = new Intent();</span><br><span class="line">data.putExtra(&quot;key&quot;, value);</span><br><span class="line">setRestult(resultCode, data) //set result vaule</span><br><span class="line">finish(); //销毁当前Activity, 返回父Activity</span><br></pre></td></tr></table></figure>
</li>
<li><p>父Activity<br>启动 ： <code>StartActivityForResult(Intent, requestCode)</code><br>接收 ： <code>OnActivityResult(int requestCode, int resultCode, Intent data)</code> 打开多个的情况可以采用requestCode和resultCode来区别每个子Activity及其返回数据的目的</p>
</li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h2 id="启动模式"><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h2><h3 id="launchMode"><a href="#launchMode" class="headerlink" title="launchMode"></a>launchMode</h3><ul>
<li>standard</li>
<li>singleTop : 栈顶已经有一个相同类型的Activity实例，Intent不会再创建一个Activity，而是通过onNewIntent()被发送到现有的Activity</li>
<li>singleTask : singleTask模式的Activity只允许在一个APP栈中有一个实例。如果系统中已经有了一个实例，持有这个实例的任务将移动到顶部，（将其上方的所有Activity销毁）同时intent将被通过onNewIntent()发送。如果没有，则会创建一个新的Activity并置放在合适的任务中。</li>
<li>singleInstance : 非常接近于singleTask，系统中只允许一个Activity的实例存在。每个singleInstance会有自己独立的栈。实际开发中只有平台型应用（qq，微信，微博），提供给其他应用使用的情况，才采用。</li>
</ul>
<h2 id="横竖切换"><a href="#横竖切换" class="headerlink" title="横竖切换"></a>横竖切换</h2><ul>
<li><p>默认切换会调用生命周期方法；<br>配置<code>AndroidManifest.xml</code> ， 增加<code>android:configChanges=&quot;orientation|keyboardHidden&quot;</code> 时，切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法</p>
</li>
<li><p>锁定<br>配置<code>AndroidManifest.xml</code> ， 增加<code>android:orientation</code><br>或者 在 <code>OnCreate</code>方法中 增加 <code>setRequestOrientation(Activity.)</code></p>
</li>
</ul>
<h1 id="BroadcastReceiver广播接收器"><a href="#BroadcastReceiver广播接收器" class="headerlink" title="BroadcastReceiver广播接收器"></a>BroadcastReceiver广播接收器</h1><h1 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h1>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android入门 一 ： unit test</title>
    <url>/2016/05/10/android/android1_UnitTest/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>Local Unit Test</li>
<li>Instrumented Unit Test</li>
</ul>
<p>本文主要以idea 说明如何进行 Android Unit Test。<br>分为与Android环境相关的<code>Instrumented Unit Test</code> ， 与Android环境无关的<code>Local Unit Test</code></p>
<span id="more"></span>



<h2 id="Local-Unit-Test"><a href="#Local-Unit-Test" class="headerlink" title="Local Unit Test"></a>Local Unit Test</h2><p><code>Local Unit Test</code> 用来做跟android环境无关的Unit Test。</p>
<h3 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h3><p><code>build.gradle</code> 中增加必要的依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    testCompile &#x27;junit:junit:4.12&#x27;</span><br><span class="line">    androidTestCompile &#x27;junit:junit:4.12&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Test-java-class"><a href="#Test-java-class" class="headerlink" title="Test java class"></a>Test java class</h3><p>以 <code>JUnit 4</code> 为基础的话， 仅需要 用 <code>@Test</code> 注解测试method。<br>android官方例子像这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.junit.Test;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line">import static org.junit.Assert.assertFalse;</span><br><span class="line">import static org.junit.Assert.assertTrue;</span><br><span class="line"></span><br><span class="line">public class EmailValidatorTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void emailValidator_CorrectEmailSimple_ReturnsTrue() &#123;</span><br><span class="line">        assertThat(EmailValidator.isValidEmail(&quot;name@email.com&quot;), is(true));</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>别忘记将 <code>/src/test/java</code> 设置成 <code>Test Source Root</code></p>
<ul>
<li><p>同步<br><code>project</code> 视图下， 右键工程， <code>synchronize $&#123;your project name&#125;</code></p>
</li>
<li><p>配置BuildVariants<br><code>Test Artifact</code> 选择 <code>Unit Tests</code></p>
</li>
<li><p>运行<br>右键测试class， run ！</p>
</li>
</ul>
<p><img src="http://amadis.qiniudn.com/androidJunit1a1.png"></p>
<h2 id="Instrumented-Unit-Test"><a href="#Instrumented-Unit-Test" class="headerlink" title="Instrumented Unit Test"></a>Instrumented Unit Test</h2><p>如果你的测试需要访问 <code>instrumentation information</code> (例如 app’s Context) 或者需要 <code>Android framework component</code> (例如 Parcelable  SharedPreferences)，那么你可以使用 <code>Instrumented Unit Test</code>。<br>目前有2中方式实现： <code>AndroidJUnit4</code> 以及 <code>TestCase</code></p>
<h3 id="AndroidJUnit4"><a href="#AndroidJUnit4" class="headerlink" title="AndroidJUnit4"></a>AndroidJUnit4</h3><p>这是Android官方的例子， 需要注意的是如需要取 <code>context</code> 必须使用 <code>getTargetContext()</code></p>
<blockquote>
<p>InstrumentationRegistry is an exposed registry instance that holds a reference to the instrumentation running in the process and it’s arguments and allows injection of the following instances:</p>
</blockquote>
<blockquote>
<ul>
<li>InstrumentationRegistry.getInstrumentation(), returns the Instrumentation currently running.</li>
<li>InstrumentationRegistry.getContext(), returns the Context of this Instrumentation’s package.</li>
<li>InstrumentationRegistry.getTargetContext(), returns the application Context of the target application.</li>
<li>InstrumentationRegistry.getArguments(), returns a copy of arguments Bundle that was passed to this Instrumentation. This is useful when you want to access the command line arguments passed to Instrumentation for your test.</li>
</ul>
</blockquote>
<h4 id="配置依赖-1"><a href="#配置依赖-1" class="headerlink" title="配置依赖"></a>配置依赖</h4><ul>
<li>在顶层<code>build.gradle</code> 中增加必要的依赖</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    androidTestCompile &#x27;com.android.support:support-annotations:23.0.1&#x27;</span><br><span class="line">    androidTestCompile &#x27;com.android.support.test:runner:0.4.1&#x27;</span><br><span class="line">    androidTestCompile &#x27;com.android.support.test:rules:0.4.1&#x27;</span><br><span class="line">    // Optional -- Hamcrest library</span><br><span class="line">    androidTestCompile &#x27;org.hamcrest:hamcrest-library:1.3&#x27;</span><br><span class="line">    // Optional -- UI testing with Espresso</span><br><span class="line">    androidTestCompile &#x27;com.android.support.test.espresso:espresso-core:2.2.1&#x27;</span><br><span class="line">    // Optional -- UI testing with UI Automator</span><br><span class="line">    androidTestCompile &#x27;com.android.support.test.uiautomator:uiautomator-v18:2.1.1&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在模块<code>build.gradle</code> 中配置 <code>instrumentation runner</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Test-java-class-1"><a href="#Test-java-class-1" class="headerlink" title="Test java class"></a>Test java class</h4><p><code>instrumentation Test</code> 应该使用 Junit4 的方式编写， 代码默认路径为 <code>src/androidTest/java</code>。<br>Android 的官方例子如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import android.os.Parcel;</span><br><span class="line">import android.support.test.runner.AndroidJUnit4;</span><br><span class="line">import android.util.Pair;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import java.util.List;</span><br><span class="line">import static org.hamcrest.Matchers.is;</span><br><span class="line">import static org.junit.Assert.assertThat;</span><br><span class="line"></span><br><span class="line">@RunWith(AndroidJUnit4.class)</span><br><span class="line">@SmallTest</span><br><span class="line">public class LogHistoryAndroidUnitTest &#123;</span><br><span class="line"></span><br><span class="line">    public static final String TEST_STRING = &quot;This is a string&quot;;</span><br><span class="line">    public static final long TEST_LONG = 12345678L;</span><br><span class="line">    private LogHistory mLogHistory;</span><br><span class="line"></span><br><span class="line">    //前处理</span><br><span class="line">    @Before</span><br><span class="line">    public void createLogHistory() &#123;</span><br><span class="line">        mLogHistory = new LogHistory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void logHistory_ParcelableWriteRead() &#123;</span><br><span class="line">        // Set up the Parcelable object to send and receive.</span><br><span class="line">        mLogHistory.addEntry(TEST_STRING, TEST_LONG);</span><br><span class="line"></span><br><span class="line">        // Write the data.</span><br><span class="line">        Parcel parcel = Parcel.obtain();</span><br><span class="line">        mLogHistory.writeToParcel(parcel, mLogHistory.describeContents());</span><br><span class="line"></span><br><span class="line">        // After you&#x27;re done with writing, you need to reset the parcel for reading.</span><br><span class="line">        parcel.setDataPosition(0);</span><br><span class="line"></span><br><span class="line">        // Read the data.</span><br><span class="line">        LogHistory createdFromParcel = LogHistory.CREATOR.createFromParcel(parcel);</span><br><span class="line">        List&lt;Pair&lt;String, Long&gt;&gt; createdFromParcelData = createdFromParcel.getData();</span><br><span class="line"></span><br><span class="line">        // Verify that the received data is correct.</span><br><span class="line">        assertThat(createdFromParcelData.size(), is(1));</span><br><span class="line">        assertThat(createdFromParcelData.get(0).first, is(TEST_STRING));</span><br><span class="line">        assertThat(createdFromParcelData.get(0).second, is(TEST_LONG));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //后处理</span><br><span class="line">    @After</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="TestCase"><a href="#TestCase" class="headerlink" title="TestCase"></a>TestCase</h3><p>继承 <code>android.test</code> 包下面一系列 <code>xxxxTestCase</code>。<br>IDEA 自动生存的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.sam.myapplication;</span><br><span class="line"></span><br><span class="line">import android.app.Application;</span><br><span class="line">import android.test.ApplicationTestCase;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;a href=&quot;http://d.android.com/tools/testing/testing_android.html&quot;&gt;Testing Fundamentals&lt;/a&gt;</span><br><span class="line"> */</span><br><span class="line">public class ApplicationTest extends ApplicationTestCase&lt;Application&gt; &#123;</span><br><span class="line">    public ApplicationTest() &#123;</span><br><span class="line">        super(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //前处理</span><br><span class="line">    @Override</span><br><span class="line">    protected void setUp() throws Exception &#123;</span><br><span class="line">        super.setUp();</span><br><span class="line">        </span><br><span class="line">        // 增加你自己的前处理</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        System.out.println(&quot;ok              ok&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //后处理</span><br><span class="line">        @Override</span><br><span class="line">    protected void tearDown() throws Exception &#123;</span><br><span class="line">        super.tearDown();</span><br><span class="line">        </span><br><span class="line">        //增加你自己的后处理</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h3><p>别忘记将 <code>src/androidTest/java</code> 设置成 <code>Test Source Root</code></p>
<ul>
<li><p>同步<br><code>project</code> 视图下， 右键工程， <code>synchronize $&#123;your project name&#125;</code></p>
</li>
<li><p>配置BuildVariants<br><code>Test Artifact</code> 选择 <code>Android instrumentation Tests</code></p>
</li>
<li><p>运行<br>右键测试class，  <code>Android Test</code> 方式运行！ 在 <code>Local Unit Test</code> 的 下一格，带Android机器人图标的。<br>run ！</p>
</li>
</ul>
<p><img src="http://amadis.qiniudn.com/androidJunit1a2.png"></p>
<h2 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h2><p><a href="http://developer.android.com/training/testing/index.html">Best Practices for Testing</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>junit</tag>
      </tags>
  </entry>
  <entry>
    <title>Android UI</title>
    <url>/2017/08/24/android/android2_UI/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>Material Design</li>
</ul>
<p><em>更新历史</em></p>
<span id="more"></span>


<h2 id="传统布局"><a href="#传统布局" class="headerlink" title="传统布局"></a>传统布局</h2><h3 id="线性布局"><a href="#线性布局" class="headerlink" title="线性布局"></a>线性布局</h3><p><code>LinearLayout</code>。</p>
<h4 id="material-design"><a href="#material-design" class="headerlink" title="material design"></a><em>material design</em></h4><ul>
<li><code>AppBarLayout</code> 实际上是一个垂直方向的LinearLayout， AppBarLayout接收到滚动事件的时候,它内部的子控件可以指定通过app:layout_scrollFlags 属性去影响这些事件的<br>如 scroll|enterAlways|snap 。其中,scroll 表示当向上滚动的时候,Toolbar会跟着一起向上滚动并实现隐藏;enterAlways 表示当向下滚动的时候,Toolbar会跟着一起向下滚动并重新显示。snap 表示当Toolbar还没有完全隐藏或显示的时候,会根据当前滚动的距离,自动选择是隐藏还是显示。</li>
</ul>
<h3 id="相对布局"><a href="#相对布局" class="headerlink" title="相对布局"></a>相对布局</h3><h3 id="帧布局"><a href="#帧布局" class="headerlink" title="帧布局"></a>帧布局</h3><p><code>FrameLayout</code>， 默认所有控件在不进行明确定位的情况下,都会摆放在布局的左上角。</p>
<h4 id="material-design-1"><a href="#material-design-1" class="headerlink" title="material design"></a><em>material design</em></h4><ul>
<li><code>CoordinatorLayout</code> 是一个增强型FrameLayout, 可以监听其所有子控件的各种事件,然后自动帮助我们做出最为合的响应。</li>
<li><code>CardView</code> 也是一个FrameLayout, 只是额外提供了圆角和阴影等效果, 看上去会有立体的感觉。</li>
</ul>
<h3 id="表格布局"><a href="#表格布局" class="headerlink" title="表格布局"></a>表格布局</h3><h3 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h3><h2 id="Material-Design"><a href="#Material-Design" class="headerlink" title="Material Design"></a>Material Design</h2><p>材料主题<br><img src="/images/android_ThemeColors.png"></p>
<h3 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h3><p>Toolbar 继承了ActionBar的所有功能,而且灵活性很高,可以配合其控件来完成一些Material Design的效果<br><img src="/images/android_Toolbar.png"></p>
<ul>
<li><p>隐藏ActionBar<br><code>res/values/styles.xml</code> 中，修改 AppTheme的parent主题， 通常有Theme.AppCompat.NoActionBar 和Theme.AppCompat.Light.NoActionBar这两种主题可选</p>
</li>
<li><p>增加 Toolbar<br>在布局文件中增加 Toolbar</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">&quot;@+id/toolbar&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:background</span>=<span class="string">&quot;?attr/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:theme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">app:popupTheme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span> /&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>在 activity增加 ActionBar 支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onCreateOptionsMenu(menu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Toolbar</span> <span class="variable">toolbar</span> <span class="operator">=</span> (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">        toolbar.setTitle(<span class="string">&quot;Fruits&quot;</span>); <span class="comment">//Toolbar 显示内容</span></span><br><span class="line">        setSupportActionBar(toolbar);</span><br><span class="line">        </span><br><span class="line">        <span class="type">ActionBar</span> <span class="variable">actionBar</span> <span class="operator">=</span> getSupportActionBar();</span><br><span class="line">        <span class="keyword">if</span> (actionBar != <span class="literal">null</span>) &#123;</span><br><span class="line">            actionBar.setDisplayHomeAsUpEnabled(<span class="literal">true</span>);</span><br><span class="line">            actionBar.setHomeAsUpIndicator(R.drawable.ic_menu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加菜单<br>右击res目录→New→Directory,创建一个menu文件夹。然后右击menu文件→New→Menu resource file,创建一个toolbar.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/backup&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_backup&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;Backup&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">&quot;always&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/delete&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_delete&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;Delete&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">&quot;ifRoom&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/settings&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_settings&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;Settings&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">&quot;never&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>  修改activity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> &#123;</span><br><span class="line">        getMenuInflater().inflate(R.menu.toolbar, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.backup:</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;You clicked Backup&quot;</span>,</span><br><span class="line">                        Toast.LENGTH_SHORT).</span><br><span class="line">                        show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.delete:</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;You clicked Delete&quot;</span>,</span><br><span class="line">                        Toast.LENGTH_SHORT).</span><br><span class="line">                        show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.settings:</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;You clicked Settings&quot;</span>,</span><br><span class="line">                        Toast.LENGTH_SHORT).</span><br><span class="line">                        show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>设置导航按钮<br>activity 的 onCreate 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ActionBar</span> <span class="variable">actionBar</span> <span class="operator">=</span> getSupportActionBar();</span><br><span class="line"><span class="keyword">if</span> (actionBar != <span class="literal">null</span>) &#123;</span><br><span class="line">    actionBar.setDisplayHomeAsUpEnabled(<span class="literal">true</span>); <span class="comment">//导航按钮显示</span></span><br><span class="line">    actionBar.setHomeAsUpIndicator(R.drawable.ic_menu); <span class="comment">// 导航按钮 图标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="滑动菜单"><a href="#滑动菜单" class="headerlink" title="滑动菜单"></a>滑动菜单</h3><p>滑动菜单就是将一些菜单选项隐藏起来,而不是放置在主屏幕上,然后可以通过滑动的方将菜单显示出来。<br>Google 提供 DrawerLayout， NavigationView 帮助我们简单就可实现滑动菜单的功能<br><img src="/images/android_moveMenu.png"></p>
<h4 id="DrawerLayout"><a href="#DrawerLayout" class="headerlink" title="DrawerLayout"></a>DrawerLayout</h4><p>它是一个布局,在布局中允许放入两个直接子控件,第一个子控件是主屏幕中显示的内容,第二个子控件是滑动菜单中显示的内容。</p>
<p>布局文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">&quot;@+id/drawer_layout&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/toolbar&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;?attr/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:popupTheme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">&quot;start&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;This is menu&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#FFF&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>DrawerLayout中放置了两个直接子控件,第一个子控件是FrameLayout,用于作为主屏幕显示的内容,当然里面还有我们刚刚定义的Toolbar。第二个子控件这里使用了一个TextView,于作为滑动菜单中显示的内容,其实使用什么都可以,DrawerLayout并没有限制只能使用固定控件。<br>第二个子控件有一点需要注意,layout_gravity 这个属性是必须指定的,因为我们要告诉DrawerLayout滑动菜单是在屏幕的左边还是右边,指定left表示滑动菜单在左边,指定right表示滑动菜单在右边。这里我指定了start,表示会根据系统语言进行判断,如果系统语言从左往右的,比如英语、汉语,滑动菜单就在左边,如果系统语言是从右往左的,比如阿拉伯语滑动菜单就在右边。 </p>
<h4 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h4><p>NavigationView是Design Support库中提供的一个控件,可以将滑动菜单页面的实现变得非常简单。</p>
<ul>
<li><p>menu<br>menu是用来在NavigationView中显示具体的菜单项的,右击menu文件夹→New→Menu resource file，创建一个nav_menu.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">&quot;single&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_call&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/nav_call&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">&quot;Call&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_friends&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/nav_friends&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">&quot;Friends&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_location&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/nav_location&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">&quot;Location&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_mail&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/nav_mail&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">&quot;Mail&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_task&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/nav_task&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">&quot;Tasks&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>group表示一个组，checkableBehavior 指定为single 表示组中的所有菜单项只能单选</p>
</li>
<li><p>headerLayout<br>用来在NavigationView中显示头部布局的,可以随意定制布局.<br>右击layout文件夹→New→Layout resource file，创建一个nav_header.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;180dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;?attr/colorPrimary&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">de.hdodenhof.circleimageview.CircleImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/icon_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;70dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;70dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/nav_icon&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/mail&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;tonygreendev@gmail.com&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#FFF&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;14sp&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/username&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_above</span>=<span class="string">&quot;@id/mail&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Tony Green&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#FFF&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;14sp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>NavigationView<br>修改布局文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawer_layout&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/toolbar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;?attr/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:popupTheme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;start&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:menu</span>=<span class="string">&quot;@menu/nav_menu&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:headerLayout</span>=<span class="string">&quot;@layout/nav_header &quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>activity<br>修改activity， 增加点击事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DrawerLayout mDrawerLayout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Toolbar</span> <span class="variable">toolbar</span> <span class="operator">=</span> (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">        setSupportActionBar(toolbar);</span><br><span class="line">        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</span><br><span class="line">        </span><br><span class="line">        <span class="type">ActionBar</span> <span class="variable">actionBar</span> <span class="operator">=</span> getSupportActionBar();</span><br><span class="line">        <span class="keyword">if</span> (actionBar != <span class="literal">null</span>) &#123;</span><br><span class="line">            actionBar.setDisplayHomeAsUpEnabled(<span class="literal">true</span>);</span><br><span class="line">            actionBar.setHomeAsUpIndicator(R.drawable.ic_menu);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">NavigationView</span>  <span class="variable">navView</span> <span class="operator">=</span> (NavigationView) findViewById(R.id.nav_view);</span><br><span class="line">        navView.setCheckedItem(R.id.nav_call); <span class="comment">//默认选中</span></span><br><span class="line"></span><br><span class="line">        navView.setNavigationItemSelectedListener(<span class="keyword">new</span> <span class="title class_">NavigationView</span>.OnNavigation</span><br><span class="line">            <span class="title function_">ItemSelectedListener</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onNavigationItemSelected</span><span class="params">(MenuItem item)</span> &#123;</span><br><span class="line">                mDrawerLayout.closeDrawers(); <span class="comment">//关闭</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="悬浮按钮和可交互提示"><a href="#悬浮按钮和可交互提示" class="headerlink" title="悬浮按钮和可交互提示"></a>悬浮按钮和可交互提示</h3><h4 id="悬浮按钮-FloatingActionButton"><a href="#悬浮按钮-FloatingActionButton" class="headerlink" title="悬浮按钮 FloatingActionButton"></a>悬浮按钮 FloatingActionButton</h4><p>实现悬浮按钮的效果<br><img src="/images/android_fab.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/fab&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom|end&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">&quot;16dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:src</span>=<span class="string">&quot;@drawable/ic_done&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>app:elevation 属性来给FloatingActionButton指定一个高度值，高度值越大，投影范围也越大，但是投影效果越淡，高度值越小，投影范围也越小，但是投影效果越浓。<br>用默认值就可以</p>
<h4 id="可交互提示-Snackbar"><a href="#可交互提示-Snackbar" class="headerlink" title="可交互提示 Snackbar"></a>可交互提示 Snackbar</h4><p><img src="/images/android_snackbar.png"></p>
<p>可交互的Toast， 使用场景不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DrawerLayout mDrawerLayout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">FloatingActionButton</span> <span class="variable">fab</span> <span class="operator">=</span> (FloatingActionButton) findViewById(R.id.fab);</span><br><span class="line">        fab.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                Snackbar.make(view, <span class="string">&quot;Data deleted&quot;</span>, Snackbar.LENGTH_SHORT)</span><br><span class="line">                        .setAction(<span class="string">&quot;Undo&quot;</span>, <span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                                Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;Data restored&quot;</span>,</span><br><span class="line">                                    Toast.LENGTH_SHORT).show();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                        .show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Snackbar可能将我们的悬浮按钮给遮挡住, 可以使用CoordinatorLayout包裹fab</p>
<h4 id="CoordinatorLayout"><a href="#CoordinatorLayout" class="headerlink" title="CoordinatorLayout"></a>CoordinatorLayout</h4><p>加强版的 FrameLayout ， 可以监听其所有子控件的各种事件，然后自动帮助我们做出最为合理的响应。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawer_layout&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/toolbar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;?attr/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:popupTheme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/fab&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom|end&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_margin</span>=<span class="string">&quot;16dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">&quot;@drawable/ic_done&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h3 id="卡片式布局"><a href="#卡片式布局" class="headerlink" title="卡片式布局"></a>卡片式布局</h3><p>列表 内卡片式 布局 ， 涉及以下控件：</p>
<ul>
<li>CoordinatorLayout : 加强版的FrameLayout, 可以监听其所有子控件的各种事件，然后自动帮助我们做出最为合理的响应。</li>
<li>AppBarLayout : 垂直方向的LinearLayout， 子控件可以指定通过app:layout_scrollFlags 属性去影响AppBarLayout接受到的滚动事件</li>
<li>RecyclerView : 列表</li>
<li>CardView : FrameLayout, 额外提供了圆角和阴影等效果, 看上去会有立体的感觉</li>
</ul>
<div style="float:left;border:solid 1px 000;margin:2px;">
<img src="/images/android_cardview1.png" alt=""> 
</div>
<div style="float:left;border:solid 1px 000;margin:2px;">
 <img src="/images/android_cardview2.png" alt="">
</div>
<div style="clear:both;"></div>
<br>


<h4 id="主布局"><a href="#主布局" class="headerlink" title="主布局"></a>主布局</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawer_layout&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/toolbar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;?attr/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:popupTheme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">&quot;scroll|enterAlways|snap&quot;</span>/&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/recycler_view&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_behavior</span>=<span class="string">&quot;@string/appbar_scrolling_view_behavior&quot;</span> /&gt;</span></span><br><span class="line">            ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Toolbar 放置在了AppBarLayout里面,然后在RecyclerView中使用app:layout_behavior 属性指定一个布局行为。其中appbar_scrolling_view_behavior 这个字符串也是由Design Support库提供的。 </li>
<li>在Toolbar中添加了一个app:layout_scrollFlags 属性,并将这个属性的值指定成scroll|enterAlways|snap 。其中,scroll 表示当RecyclerView向上滚动的时候,Toolbar会跟着一起向上滚动并实现隐藏;enterAlways 表示当RecyclerView向下滚动的时候,Toolbar会跟着一起向下滚动并重新显示。snap 表示当Toolbar还没有完全隐藏或显示的时候,会根据当前滚动的距离,自动选择是隐藏还是显示。</li>
</ul>
<h4 id="RecyclerView的子项"><a href="#RecyclerView的子项" class="headerlink" title="RecyclerView的子项"></a>RecyclerView的子项</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:cardCornerRadius</span>=<span class="string">&quot;4dp&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:scaleType</span>=<span class="string">&quot;centerCrop&quot;</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_name&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_margin</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;16sp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>CardView来作为子项的最外层布局,从而使得RecyclerView中的每个元素都是在卡片当中的。CardView由于是一个FrameLayout,因此它没有什么方便的定位方式,这里我们只好CardView中再嵌套一个LinearLayout,然后在LinearLayout中放置具体的内容。</li>
<li>过app:cardCornerRadius 属性指定卡片圆角的弧度,数值越大,圆角的弧度也越大。另外还可以通过app:elevation 属性指定卡片的高度</li>
</ul>
<h3 id="下拉刷新-SwipeRefreshLayout"><a href="#下拉刷新-SwipeRefreshLayout" class="headerlink" title="下拉刷新 SwipeRefreshLayout"></a>下拉刷新 SwipeRefreshLayout</h3><p>把想要实现下拉刷新功能的控件放置到SwipeRefreshLayout中,就可以迅速让这个控件支持下拉刷新。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawer_layout&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.v4.widget.SwipeRefreshLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/swipe_refresh&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_behavior</span>=<span class="string">&quot;@string/appbar_scrolling_view_behavior&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/recycler_view&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="可折叠式标题栏-CollapsingToolbarLayout"><a href="#可折叠式标题栏-CollapsingToolbarLayout" class="headerlink" title="可折叠式标题栏  CollapsingToolbarLayout"></a>可折叠式标题栏  CollapsingToolbarLayout</h3><p>CollapsingToolbarLayout是一个作用于Toolbar基础之上的布局,可以让Toolbar的效果变得更加丰富,不仅仅是展一个标题栏,而是能够实现非常华丽的效果。 不能独立存在的,只能作AppBarLayout的直接子布局。而AppBarLayout又必须是CoordinatorLayout的子布局.<br><img src="/images/android_Ctb1.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/appBar&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;250dp&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/collapsing_toolbar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:contentScrim</span>=<span class="string">&quot;?attr/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">&quot;scroll|exitUntilCollapsed&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">	        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">	            <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image_view&quot;</span><span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">	            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">	            <span class="attr">android:scaleType</span>=<span class="string">&quot;centerCrop&quot;</span></span></span><br><span class="line"><span class="tag">	            <span class="attr">app:layout_collapseMode</span>=<span class="string">&quot;parallax&quot;</span> /&gt;</span></span><br><span class="line">	        </span><br><span class="line">	        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">	            <span class="attr">android:id</span>=<span class="string">&quot;@+id/toolbar&quot;</span></span></span><br><span class="line"><span class="tag">	            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">	            <span class="attr">android:layout_height</span>=<span class="string">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class="line"><span class="tag">	            <span class="attr">app:layout_collapseMode</span>=<span class="string">&quot;pin&quot;</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_behavior</span>=<span class="string">&quot;@string/appbar_scrolling_view_behavior&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;35dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:cardCornerRadius</span>=<span class="string">&quot;4dp&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_content_text&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_margin</span>=<span class="string">&quot;10dp&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">&quot;16dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/ic_comment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_anchor</span>=<span class="string">&quot;@id/appBar&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_anchorGravity</span>=<span class="string">&quot;bottom|end&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<ul>
<li>app:contentScrim 属性<br>用于指定CollapsingToolbarLayout在趋于折叠状态以及折叠之后的背景色,CollapsingToolbarLayout在折叠之后就是一个普通的Toolbar,那么背景色肯定应该是colorPrimary了。</li>
<li>app:layout_scrollFlags 属性<br>scroll表示CollapsingToolbarLayout会随着水果内容详情的滚动一起滚动,exitUntilCollapsed 表示CollapsingToolbarLayout随着滚动完成折叠之后就保留在界面上,不再移出屏幕。</li>
<li>app:layout_collapseMode<br>它用于指定当控件在CollapsingToolbarLayout折叠过程中的折叠模式,其中Toolbar指定成pin,表示在折叠过程中位置始终保持不变,ImageView指定成parallax,表示会在折叠的过程中产生一定的错位偏移,这种模式的视觉效果会非常好。 </li>
<li>NestedScrollView<br>和AppBarLayout是平级, app:layout_behavior 属性指定了一个布局行为</li>
<li>FloatingActionButton<br>app:layout_anchor 属性指定了一个锚点,我们将锚点设置为AppBarLayout,这样悬浮按钮就会出现在水果标题栏的区域内,接着又使app:layout_anchorGravity 属性将悬浮按钮定位在标题栏区域的右下角。</li>
</ul>
<h3 id="充分利用系统状态栏空间"><a href="#充分利用系统状态栏空间" class="headerlink" title="充分利用系统状态栏空间"></a>充分利用系统状态栏空间</h3><ul>
<li>背景图和状态栏融合到一起， 借助android:fitsSystemWindows&#x3D;true。</li>
<li>嵌套结构的布局中,所有父布局都设上这个属性才可以;</li>
<li>程序的主题将状态栏颜色指定成透明色。android:statusBarColor 属性的值指定成@android:color&#x2F;transparent;</li>
<li>AndroidManifest.xml中使用修改后的主题</li>
</ul>
<p><img src="/images/android_Ctb2.png"><br>title: Android入门 图谱</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Android</tag>
        <tag>UI</tag>
        <tag>Material Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Android broadcast</title>
    <url>/2016/05/17/android/broadcast/</url>
    <content><![CDATA[<p>#广播</p>
<ul>
<li>广播的概念<ul>
<li>现实：电台通过发送广播发布消息，买个收音机，就能收听</li>
<li>Android：系统在产生某个事件时发送广播，应用程序使用广播接收者接收这个广播，就知道系统产生了什么事件。<br>Android系统在运行的过程中，会产生很多事件，比如开机、电量改变、收发短信、拨打电话、屏幕解锁</li>
</ul>
</li>
</ul>
<span id="more"></span>

<hr>
<p>#IP拨号器</p>
<blockquote>
<p>原理：接收拨打电话的广播，修改广播内携带的电话号码</p>
</blockquote>
<ul>
<li><p>定义广播接收者接收打电话广播</p>
<p>  public class CallReceiver extends BroadcastReceiver {</p>
<pre><code>  //当广播接收者接收到广播时，此方法会调用
  @Override
  public void onReceive(Context context, Intent intent) &#123;
      //拿到用户拨打的号码
      String number = getResultData();
      //修改广播内的号码
      setResultData(&quot;17951&quot; + number);
  &#125;
</code></pre>
<p>  }</p>
</li>
<li><p>在清单文件中定义该广播接收者接收的广播类型</p>
<pre><code>  &lt;receiver android:name=&quot;com.itheima.ipdialer.CallReceiver&quot;&gt;
      &lt;intent-filter &gt;
          &lt;action android:name=&quot;android.intent.action.NEW_OUTGOING_CALL&quot;/&gt;
      &lt;/intent-filter&gt;
  &lt;/receiver&gt;
</code></pre>
</li>
<li><p>接收打电话广播需要权限</p>
<pre><code>  &lt;uses-permission android:name=&quot;android.permission.PROCESS_OUTGOING_CALLS&quot;/&gt;
</code></pre>
</li>
<li><p>即使广播接收者的进程没有启动，当系统发送的广播可以被该接收者接收时，系统会自动启动该接收者所在的进程</p>
</li>
<li><p>桌面隐藏<br>删除 <code>AndroidManifest.xml</code> 中</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</span><br><span class="line">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure>
<p>利用上一特点，进程自动启动</p>
<hr>
<p>#短信拦截器</p>
<blockquote>
<p>系统收到短信时会产生一条广播，广播中包含了短信的号码和内容</p>
</blockquote>
<ul>
<li><p>定义广播接收者接收短信广播</p>
<pre><code>  public void onReceive(Context context, Intent intent) &#123;
  //拿到广播里携带的短信内容
  Bundle bundle = intent.getExtras();
  Object[] objects = (Object[]) bundle.get(&quot;pdus&quot;);
  for(Object ob : objects )&#123;
      //通过object对象创建一个短信对象
      SmsMessage sms = SmsMessage.createFromPdu((byte[])ob);
      System.out.println(sms.getMessageBody());
      System.out.println(sms.getOriginatingAddress());
      
      //阻止其他接收者接收这条广播
      abortBroadCast();
  &#125;
</code></pre>
<p>  }</p>
</li>
<li><p>系统创建广播时，把短信存放到一个数组，然后把数据以pdus为key存入bundle，再把bundle存入intent</p>
</li>
<li><p>清单文件中配置广播接收者接收的广播类型，注意要设置优先级属性，要保证优先级高于短信应用，才可以实现拦截</p>
<pre><code>  &lt;receiver android:name=&quot;com.itheima.smslistener.SmsReceiver&quot;&gt;
      &lt;intent-filter android:priority=&quot;1000&quot;&gt;
          &lt;action android:name=&quot;android.provider.Telephony.SMS_RECEIVED&quot;/&gt;
      &lt;/intent-filter&gt;
  &lt;/receiver&gt;
</code></pre>
</li>
<li><p>添加权限</p>
<pre><code>  &lt;uses-permission android:name=&quot;android.permission.RECEIVE_SMS&quot;/&gt;

  
</code></pre>
</li>
<li><p>4.0以后广播接收者安装以后必须手动启动一次，否则不生效</p>
</li>
<li><p>4.0以后广播接收者如果被手动关闭，就不会再启动了</p>
</li>
</ul>
<hr>
<p>#监听SD卡状态</p>
<ul>
<li><p>清单文件中定义广播接收者接收的类型，监听SD卡常见的三种状态，所以广播接收者需要接收三种广播</p>
<pre><code>   &lt;receiver android:name=&quot;com.itheima.sdcradlistener.SDCardReceiver&quot;&gt;
      &lt;intent-filter &gt;
          &lt;action android:name=&quot;android.intent.action.MEDIA_MOUNTED&quot;/&gt;
          &lt;action android:name=&quot;android.intent.action.MEDIA_UNMOUNTED&quot;/&gt;
          &lt;action android:name=&quot;android.intent.action.MEDIA_REMOVED&quot;/&gt;
          &lt;data android:scheme=&quot;file&quot;/&gt;
      &lt;/intent-filter&gt;
  &lt;/receiver&gt;
</code></pre>
</li>
<li><p>广播接收者的定义</p>
<pre><code>  public class SDCardReceiver extends BroadcastReceiver &#123;
      @Override
      public void onReceive(Context context, Intent intent) &#123;
          // 区分接收到的是哪个广播
          String action = intent.getAction();
              
          if(action.equals(&quot;android.intent.action.MEDIA_MOUNTED&quot;))&#123;
              System.out.println(&quot;sd卡就绪&quot;);
          &#125;
          else if(action.equals(&quot;android.intent.action.MEDIA_UNMOUNTED&quot;))&#123;
              System.out.println(&quot;sd卡被移除&quot;);
          &#125;
          else if(action.equals(&quot;android.intent.action.MEDIA_REMOVED&quot;))&#123;
              System.out.println(&quot;sd卡被拔出&quot;);
          &#125;
      &#125;
  &#125;
</code></pre>
</li>
</ul>
<hr>
<p>#勒索软件</p>
<ul>
<li><p>接收开机广播，在广播接收者中启动勒索的Activity</p>
</li>
<li><p>清单文件中配置接收<code>开机成功</code>广播</p>
<pre><code>  &lt;receiver android:name=&quot;com.itheima.lesuo.BootReceiver&quot;&gt;
      &lt;intent-filter &gt;
          &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot;/&gt;
      &lt;/intent-filter&gt;
  &lt;/receiver&gt;
</code></pre>
</li>
<li><p>权限</p>
<pre><code>  &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;/&gt;
</code></pre>
</li>
<li><p>定义广播接收者</p>
<pre><code>  @Override
  public void onReceive(Context context, Intent intent) &#123;
      //开机的时候就启动勒索软件
      Intent it = new Intent(context, MainActivity.class);		
      context.startActivity(it);
  &#125;
</code></pre>
</li>
<li><p>以上代码还不能启动MainActivity，因为广播接收者的启动，并不会创建任务栈，那么没有任务栈，就无法启动activity</p>
</li>
<li><p>手动设置创建新任务栈的flag</p>
<pre><code>  it.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
</code></pre>
</li>
</ul>
<hr>
<p>#监听应用的安装、卸载、更新</p>
<blockquote>
<p>原理：应用在安装卸载更新时，系统会发送广播，广播里会携带应用的包名</p>
</blockquote>
<ul>
<li><p>清单文件定义广播接收者接收的类型，因为要监听应用的三个动作，所以需要接收三种广播</p>
<pre><code>  &lt;receiver android:name=&quot;com.itheima.app.AppReceiver&quot;&gt;
      &lt;intent-filter &gt;
          &lt;action android:name=&quot;android.intent.action.PACKAGE_ADDED&quot;/&gt;
          &lt;action android:name=&quot;android.intent.action.PACKAGE_REPLACED&quot;/&gt;
          &lt;action android:name=&quot;android.intent.action.PACKAGE_REMOVED&quot;/&gt;
          &lt;data android:scheme=&quot;package&quot;/&gt;
      &lt;/intent-filter&gt;
  &lt;/receiver&gt;
</code></pre>
</li>
<li><p>广播接收者的定义</p>
<pre><code>  public void onReceive(Context context, Intent intent) &#123;
      //区分接收到的是哪种广播
      String action = intent.getAction();
      //获取广播中包含的应用包名
      Uri uri = intent.getData();
      if(action.equals(&quot;android.intent.action.PACKAGE_ADDED&quot;))&#123;
          System.out.println(uri + &quot;被安装了&quot;);
      &#125;
      else if(action.equals(&quot;android.intent.action.PACKAGE_REPLACED&quot;))&#123;
          System.out.println(uri + &quot;被更新了&quot;);
      &#125;
      else if(action.equals(&quot;android.intent.action.PACKAGE_REMOVED&quot;))&#123;
          System.out.println(uri + &quot;被卸载了&quot;);
      &#125;
  &#125;
</code></pre>
</li>
</ul>
<hr>
<p>#广播的两种类型</p>
<ul>
<li>无序广播：所有跟广播的intent匹配的广播接收者都可以收到该广播，并且是没有先后顺序（同时收到）</li>
<li>有序广播：所有跟广播的intent匹配的广播接收者都可以收到该广播，但是会按照广播接收者的优先级来决定接收的先后顺序<ul>
<li>优先级的定义：-1000~1000</li>
<li>最终接收者：所有广播接收者都接收到广播之后，它才接收，并且一定会接收</li>
<li>abortBroadCast：阻止其他接收者接收这条广播，类似拦截，只有有序广播可以被拦截</li>
</ul>
</li>
</ul>
<h2 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h2><p>broadordercast()</p>
<hr>
<p>#Service</p>
<ul>
<li>就是默默运行在后台的组件，可以理解为是没有前台的activity，适合用来运行不需要前台界面的代码</li>
<li>服务可以被手动关闭，不会重启，但是如果被自动关闭，内存充足就会重启</li>
<li>startService启动服务的生命周期<ul>
<li>onCreate-onStartCommand-onDestroy</li>
</ul>
</li>
<li>重复的调用startService会导致onStartCommand被重复调用</li>
</ul>
<hr>
<h1 id="进程优先级"><a href="#进程优先级" class="headerlink" title="进程优先级"></a>进程优先级</h1><ol>
<li>前台进程：拥有前台activity（onResume方法被调用）</li>
<li>可见进程：拥有可见activity（onPause方法被调用）</li>
<li>服务进程：不到万不得已不会被回收，而且即便被回收，内存充足时也会被重启</li>
<li>后台进程：拥有后台activity（activity的onStop方法被调用了），很容易被回收</li>
<li>空进程：没有运行任何activity，很容易被回收</li>
</ol>
<hr>
<p>#电话窃听器</p>
<ul>
<li><p>电话状态：空闲、响铃、接听</p>
</li>
<li><p>获取电话管理器，设置侦听</p>
<pre><code>  TelephonyManager tm = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);
  tm.listen(new MyPhoneStateListener(), PhoneStateListener.LISTEN_CALL_STATE);
</code></pre>
</li>
<li><p>侦听对象的实现</p>
<pre><code>  class MyPhoneStateListener extends PhoneStateListener&#123;

      //当电话状态改变时，此方法调用
      @Override
      public void onCallStateChanged(int state, String incomingNumber) &#123;
          // TODO Auto-generated method stub
          super.onCallStateChanged(state, incomingNumber);
          switch (state) &#123;
          case TelephonyManager.CALL_STATE_IDLE://空闲
              if(recorder != null)&#123;
                  recorder.stop();
                  recorder.release();
              &#125;
              break;
          case TelephonyManager.CALL_STATE_OFFHOOK://摘机
              if(recorder != null)&#123;
                  recorder.start();
              &#125;
              break;
          case TelephonyManager.CALL_STATE_RINGING://响铃
              recorder = new MediaRecorder();
              //设置声音来源
              recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
              //设置音频文件格式
              recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
              recorder.setOutputFile(&quot;sdcard/haha.3gp&quot;);
              //设置音频文件编码
              recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
              try &#123;
                  recorder.prepare();
              &#125; catch (IllegalStateException e) &#123;
                  // TODO Auto-generated catch block
                  e.printStackTrace();
              &#125; catch (IOException e) &#123;
                  // TODO Auto-generated catch block
                  e.printStackTrace();
              &#125;
              break;
          &#125;
      &#125;
  &#125;
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>broadcast</tag>
      </tags>
  </entry>
  <entry>
    <title>canal 同步 mysql 到 oracle</title>
    <url>/2022/07/15/canal/canal/</url>
    <content><![CDATA[<p>主要内容</p>
<p>canal [kə’næl]，译意为水道&#x2F;管道&#x2F;沟渠，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费.</p>
<p>版本：<br><code>canal</code> 1.1.6<br><code>MySQL</code> 8.0 +<br><code>oracle</code> </p>
<p><em>更新历史</em><br>无</p>
<hr>
<span id="more"></span>

<p>canal 同步 mysql 到 oracle<br>主要步骤</p>
<ul>
<li>mysql 配置 binlog</li>
<li>canal.deployer</li>
<li>canal.adapter</li>
</ul>
<h2 id="mysql-配置-binlog"><a href="#mysql-配置-binlog" class="headerlink" title="mysql 配置 binlog"></a>mysql 配置 binlog</h2><ul>
<li><p>开启 Binlog 写入功能，配置 binlog-format 为 ROW 模式，my.cnf 中配置如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin <span class="comment"># 开启 binlog</span></span><br><span class="line">binlog-format=ROW <span class="comment"># 选择 ROW 模式</span></span><br><span class="line">server_id=1 <span class="comment"># 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复</span></span><br></pre></td></tr></table></figure>
<p>执行成功可登陆MySQL中查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%log_format%&#x27;;</span><br><span class="line">show variables like &#x27;%log_bin%&#x27;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>授权 canal 链接 MySQL 账号具有作为 MySQL slave 的权限, 如果已有账户可直接 grant</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CREATE USER canal IDENTIFIED BY <span class="string">&#x27;canal&#x27;</span>;  </span><br><span class="line">GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="string">&#x27;canal&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">-- GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;canal&#x27;</span>@<span class="string">&#x27;%&#x27;</span> ;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="canal-deployer"><a href="#canal-deployer" class="headerlink" title="canal.deployer"></a>canal.deployer</h2><p>将 canal.deployer的压缩包安装到 <code>/data/canal/canal.deployer/</code> 目录下，<br>主要配置 <code>conf/canal.properties</code><br><code>conf/example/instance.properties</code></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li><p><code>conf/canal.properties</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># ----------- canal服务id，目前没有实际意义</span></span><br><span class="line">canal.id = 11   </span><br><span class="line"><span class="comment">#canal服务socket监听端口，代码中连接canal-server时，使用此段口连接</span></span><br><span class="line">canal.port = 11111</span><br><span class="line">canal.metrics.pull.port = 11112</span><br><span class="line"><span class="comment"># ----------- zookeeper服务地址端口</span></span><br><span class="line">canal.zkServers =192.168.153.6:12181 </span><br><span class="line"><span class="comment">#表示实例的配置文件instance.properties地址， adapter里一致</span></span><br><span class="line">canal.destinations = example</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>conf/example/instance.properties</code><br>xx都需要根据实际替换</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  ----------- 监听的数据库地址  修改成自己的</span></span><br><span class="line">canal.instance.master.address=xx.xx.xx.xx:3306</span><br><span class="line">canal.instance.master.journal.name=</span><br><span class="line">canal.instance.master.position=</span><br><span class="line">canal.instance.master.timestamp=</span><br><span class="line">canal.instance.master.gtid=</span><br><span class="line"></span><br><span class="line"><span class="comment"># rds oss binlog</span></span><br><span class="line">canal.instance.rds.accesskey=</span><br><span class="line">canal.instance.rds.secretkey=</span><br><span class="line">canal.instance.rds.instanceId=</span><br><span class="line"></span><br><span class="line"><span class="comment"># table meta tsdb info</span></span><br><span class="line">canal.instance.tsdb.enable=<span class="literal">true</span></span><br><span class="line"><span class="comment">#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb</span></span><br><span class="line"><span class="comment">#canal.instance.tsdb.dbUsername=canal</span></span><br><span class="line"><span class="comment">#canal.instance.tsdb.dbPassword=canal</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#canal.instance.standby.address =</span></span><br><span class="line"><span class="comment">#canal.instance.standby.journal.name =</span></span><br><span class="line"><span class="comment">#canal.instance.standby.position =</span></span><br><span class="line"><span class="comment">#canal.instance.standby.timestamp =</span></span><br><span class="line"><span class="comment">#canal.instance.standby.gtid=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># username/password</span></span><br><span class="line"><span class="comment">#  ----------- 监听的数据库账号密码 第一步 mysql中增加的 MySQL slave 权限的账户</span></span><br><span class="line">canal.instance.dbUsername=canalxx</span><br><span class="line">canal.instance.dbPassword=canalxxxxxx</span><br><span class="line">canal.instance.connectionCharset = UTF-8</span><br><span class="line"><span class="comment"># enable druid Decrypt database password</span></span><br><span class="line">canal.instance.enableDruid=<span class="literal">false</span></span><br><span class="line"><span class="comment">#canal.instance.pwdPublicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALK4BUxdDltRRE5/zXpVEVPUgunvscYFtEip3pmLlhrWpacX7y7GCMo2/JM6LeHmiiNdH1FWgGCpUfircSwlWKUCAwEAAQ==</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># table regex</span></span><br><span class="line"><span class="comment">#canal.instance.filter.regex=.*\\..*   1.1.6 直接用这个配置会出现异常： Table &#x27;xxxxx.BASE TABLE&#x27; doesn&#x27;t exist, sqlState=42S02 ------------------ 可 改成 canal.instance.filter.regex=.\..</span></span><br><span class="line"><span class="comment"># 1) ----------- 配置监听的数据库 数据表  监听几个 配置几个 </span></span><br><span class="line"><span class="comment"># canal.instance.filter.regex=xx.t_test1xx,xx2.te</span></span><br><span class="line"><span class="comment"># 2) -----------或者可以加上自己指定的数据库, dbname 替换成实际数据库</span></span><br><span class="line">canal.instance.filter.regex=dbname\\..*</span><br><span class="line"></span><br><span class="line"><span class="comment"># table black regex</span></span><br><span class="line">canal.instance.filter.black.regex=mysql\\.slave_.*</span><br><span class="line"></span><br><span class="line"><span class="comment"># mq config</span></span><br><span class="line"><span class="comment"># 配置消息主题</span></span><br><span class="line">canal.mq.topic=example</span><br></pre></td></tr></table></figure>
</li>
<li><p>清理<br>修改配置后， 注意清除 <code>/conf/example</code>目录下 <code>meta.bat</code></p>
</li>
</ul>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动 <code>sh bin/startup.sh</code><br>关闭 <code>sh bin/stop.sh</code><br>重启 <code>sh bin/restartup.sh</code></p>
<p>启动成功后，类似如下日志<br><code>logs/canal/canal.log</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[main] INFO  com.alibaba.otter.canal.deployer.CanalStarter - <span class="comment">## start the canal server.</span></span><br><span class="line">[main] INFO  com.alibaba.otter.canal.deployer.CanalController - <span class="comment">## start the canal server[192.168.153.4(192.168.153.4):11111]</span></span><br><span class="line">[main] INFO  com.alibaba.otter.canal.deployer.CanalStarter - <span class="comment">## the canal server is running now ......</span></span><br></pre></td></tr></table></figure>


<p><code>logs/example/example.log</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[main] INFO  c.a.otter.canal.instance.spring.CanalInstanceWithSpring - start CannalInstance <span class="keyword">for</span> 1-example</span><br><span class="line">[main] WARN  c.a.o.canal.parse.inbound.mysql.dbsync.LogEventConvert - --&gt; init table filter : ^rdp.rcp_collect_result_data$|^rdp.rcp_collect_data$</span><br><span class="line">[main] WARN  c.a.o.canal.parse.inbound.mysql.dbsync.LogEventConvert - --&gt; init table black filter : ^mysql\.slave_.*$</span><br><span class="line">[main] INFO  c.a.otter.canal.instance.core.AbstractCanalInstance - start successful....</span><br><span class="line">[destination = example , address = /xx.xx.xx.xx:3306 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - ---&gt; begin to find start position, it will be long time <span class="keyword">for</span> reset or first position</span><br><span class="line">[destination = example , address = /xx.xx.xx.xx:3306 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - prepare to find start position just show master status</span><br><span class="line">[destination = example , address = /xx.xx.xx.xx:3306 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - ---&gt; find start position successfully, EntryPosition[included=<span class="literal">false</span>,journalName=binlog.001094,position=13581,serverId=800,gtid=,timestamp=1658301624000] cost : 3789ms , the next step is binlog dump</span><br></pre></td></tr></table></figure>



<h2 id="canal-adapter"><a href="#canal-adapter" class="headerlink" title="canal.adapter"></a>canal.adapter</h2><p>将 canal.adapter 的压缩包安装到 <code>/data/canal/canal.adapter/</code> 目录下，<br>主要配置 <code>conf/application.yml</code><br><code>conf/rdb</code> 添加对应的数据表配置</p>
<p>如果不使用远程配置， 把 <code>conf/bootstrap.yml</code> 全体注掉</p>
<h3 id="适配器配置"><a href="#适配器配置" class="headerlink" title="适配器配置"></a>适配器配置</h3><p>总配置文件 <code>conf/application.yml</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --- 服务器端口 ， 不要和其它服务冲突</span></span><br><span class="line">server:</span><br><span class="line">  port: 88081</span><br><span class="line"></span><br><span class="line">canal.conf:</span><br><span class="line">  mode: tcp <span class="comment">#tcp kafka rocketMQ rabbitMQ</span></span><br><span class="line">  flatMessage: <span class="literal">true</span>      <span class="comment"># 扁平message开关, 是否以json字符串形式投递数据, 仅在kafka/rocketMQ模式下有效</span></span><br><span class="line">  zookeeperHosts:        <span class="comment"># 对应集群模式下的zk地址, 如果配置了canalServerHost, 则以canalServerHost为准</span></span><br><span class="line">  syncBatchSize: 1000    <span class="comment"># 每次同步的批数量</span></span><br><span class="line">  retries: -1            <span class="comment"># 重试次数, -1为无限重试</span></span><br><span class="line">  <span class="built_in">timeout</span>:               <span class="comment"># 同步超时时间, 单位毫秒</span></span><br><span class="line">  accessKey:</span><br><span class="line">  secretKey:</span><br><span class="line">  consumerProperties:</span><br><span class="line">    <span class="comment"># canal tcp consumer</span></span><br><span class="line">    canal.tcp.server.host: 127.0.0.1:11111            <span class="comment"># -------- 对应单机模式下的canal server的ip:port</span></span><br><span class="line">    canal.tcp.zookeeper.hosts:192.168.153.6:12181     <span class="comment"># -------- 对应集群模式下的zk地址, 如果配置了canalServerHost, 则以canalServerHost为准</span></span><br><span class="line">    canal.tcp.batch.size: 500</span><br><span class="line">    canal.tcp.username:</span><br><span class="line">    canal.tcp.password:</span><br><span class="line">    <span class="comment"># kafka consumer</span></span><br><span class="line">    kafka.bootstrap.servers: 127.0.0.1:9092</span><br><span class="line">    kafka.enable.auto.commit: <span class="literal">false</span></span><br><span class="line">    kafka.auto.commit.interval.ms: 1000</span><br><span class="line">    kafka.auto.offset.reset: latest</span><br><span class="line">    kafka.request.timeout.ms: 40000</span><br><span class="line">    kafka.session.timeout.ms: 30000</span><br><span class="line">    kafka.isolation.level: read_committed</span><br><span class="line">    kafka.max.poll.records: 1000</span><br><span class="line">    <span class="comment"># rocketMQ consumer</span></span><br><span class="line">    rocketmq.namespace:</span><br><span class="line">    rocketmq.namesrv.addr: 127.0.0.1:9876</span><br><span class="line">    rocketmq.batch.size: 1000</span><br><span class="line">    rocketmq.enable.message.trace: <span class="literal">false</span></span><br><span class="line">    rocketmq.customized.trace.topic:</span><br><span class="line">    rocketmq.access.channel:</span><br><span class="line">    rocketmq.subscribe.filter:</span><br><span class="line">    <span class="comment"># rabbitMQ consumer</span></span><br><span class="line">    rabbitmq.host:</span><br><span class="line">    rabbitmq.virtual.host:</span><br><span class="line">    rabbitmq.username:</span><br><span class="line">    rabbitmq.password:</span><br><span class="line">    rabbitmq.resource.ownerId:</span><br><span class="line"></span><br><span class="line">  srcDataSources:  <span class="comment"># 源数据库</span></span><br><span class="line">    defaultDS:     <span class="comment"># 自定义名称， 必须和 out adapter 里 dataSourceKey 一致</span></span><br><span class="line">      url: jdbc:mysql://192.168.xx.xx:3306/touch-test?useUnicode=<span class="literal">true</span> <span class="comment"># jdbc url </span></span><br><span class="line">      username: rootxx                                                 <span class="comment"># jdbc 账号</span></span><br><span class="line">      password: 123xx                                                  <span class="comment"># jdbc 密码</span></span><br><span class="line">                                       </span><br><span class="line">  canalAdapters:                            <span class="comment"># 适配器列表</span></span><br><span class="line">  - instance: example                       <span class="comment"># canal 实例名或者 MQ topic 名</span></span><br><span class="line">    <span class="built_in">groups</span>:                                 <span class="comment"># 分组列表</span></span><br><span class="line">    - groupId: g1                           <span class="comment"># 分组id, 如果是MQ模式将用到该值</span></span><br><span class="line">      outerAdapters:                        <span class="comment"># 分组内适配器列表</span></span><br><span class="line">      - name: logger                        <span class="comment"># 日志打印适配器</span></span><br><span class="line">      - name: rdb                           <span class="comment"># conf/rdb 目录下 outerAdapterKey 对应</span></span><br><span class="line">        key: oracle1</span><br><span class="line">        properties:</span><br><span class="line">          jdbc.driverClassName: oracle.jdbc.OracleDriver</span><br><span class="line">          jdbc.url: jdbc:oracle:thin:@192.168.5.xx:1521:orcl1</span><br><span class="line">          jdbc.username: xxx</span><br><span class="line">          jdbc.password: 123456xx</span><br><span class="line">      - name: rdb</span><br><span class="line">        key: oracle2</span><br><span class="line">        properties:</span><br><span class="line">          jdbc.driverClassName: oracle.jdbc.OracleDriver</span><br><span class="line">          jdbc.url: jdbc:oracle:thin:@192.168.5.xxx:1521:orcl1</span><br><span class="line">          jdbc.username: xxxx</span><br><span class="line">          jdbc.password: 123xx456  </span><br></pre></td></tr></table></figure>

<h3 id="适配器列表"><a href="#适配器列表" class="headerlink" title="适配器列表"></a>适配器列表</h3><h4 id="logger适配器"><a href="#logger适配器" class="headerlink" title="logger适配器"></a>logger适配器</h4><p>最简单的处理, 将受到的变更事件通过日志打印的方式进行输出, 如配置所示, 只需要定义name: logger即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">outerAdapters:                        </span><br><span class="line">- name: logger </span><br></pre></td></tr></table></figure>

<h4 id="rdb-输出-关系型数据库"><a href="#rdb-输出-关系型数据库" class="headerlink" title="rdb 输出 关系型数据库"></a>rdb 输出 关系型数据库</h4><p>目前内置支持的数据库列表:<br>MySQL<br>Oracle<br>PostgresSQL<br>SQLServer</p>
<p>理论上jdbc的数据库都可以。</p>
<h5 id="RDB表映射文件"><a href="#RDB表映射文件" class="headerlink" title="RDB表映射文件"></a>RDB表映射文件</h5><p><code>conf/rdb</code>目录下， 对应上面的 key： oracle1， oracle2</p>
<ul>
<li><p><code>test_oracle1</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dataSourceKey: defaultDS  <span class="comment"># 源数据源的key, 对应上面配置的srcDataSources中的值</span></span><br><span class="line">destination: example      <span class="comment"># cannal的instance或者MQ的topic</span></span><br><span class="line">groupId: g1               <span class="comment"># 对应MQ模式下的groupId, 只会同步对应groupId的数据</span></span><br><span class="line">outerAdapterKey: oracle1  <span class="comment"># adapter key, 对应上面配置outAdapters中的key</span></span><br><span class="line">concurrent: <span class="literal">true</span>          <span class="comment"># 是否按主键hash并行同步, 并行同步的表必须保证主键不会更改及主键不能为其他同步表的外键!!</span></span><br><span class="line">dbMapping:                </span><br><span class="line">  database: touch-test    <span class="comment"># 源数据源的database/shcema</span></span><br><span class="line">  table: t_auth_perm_m    <span class="comment"># 源数据源表名</span></span><br><span class="line">  targetTable: covid.t_auth_perm_m <span class="comment"># 目标数据源的库名.表名</span></span><br><span class="line">  targetPk:               <span class="comment"># 主键映射</span></span><br><span class="line">    xx_id: xx_id          <span class="comment"># 如果是复合主键可以换行映射多个</span></span><br><span class="line"><span class="comment">#  mapAll: true           # 是否整表映射, 要求源表和目标表字段名一模一样 (如果targetColumns也配置了映射,则以targetColumns配置为准)</span></span><br><span class="line">  targetColumns:          <span class="comment"># 字段映射, 格式: 目标表字段: 源表字段, 如果字段名一样源表字段名可不填</span></span><br><span class="line">    <span class="built_in">id</span>:</span><br><span class="line">    perm_description:</span><br><span class="line">    perm_name:</span><br><span class="line"><span class="comment">#  etlCondition: &quot;where c_time&gt;=&#123;&#125;&quot;</span></span><br><span class="line">  commitBatch: 3000 <span class="comment"># 批量提交的大小</span></span><br><span class="line"><span class="comment">## Mirror schema synchronize config</span></span><br><span class="line"><span class="comment">#dataSourceKey: defaultDS</span></span><br><span class="line"><span class="comment">#destination: example</span></span><br><span class="line"><span class="comment">#groupId: g1</span></span><br><span class="line"><span class="comment">#outerAdapterKey: mysql1</span></span><br><span class="line"><span class="comment">#concurrent: true</span></span><br><span class="line"><span class="comment">#dbMapping:</span></span><br><span class="line"><span class="comment">#  mirrorDb: true</span></span><br><span class="line"><span class="comment">#  database: mytest</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>test_oracle2</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dataSourceKey: defaultDS</span><br><span class="line">destination: example</span><br><span class="line">groupId: g1</span><br><span class="line">outerAdapterKey: oracle2</span><br><span class="line">concurrent: <span class="literal">true</span></span><br><span class="line">dbMapping:</span><br><span class="line">  database: touch-test</span><br><span class="line">  table: t_auth_role_m</span><br><span class="line">  targetTable: covid.t_auth_role_m</span><br><span class="line">  targetPk:</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">id</span></span><br><span class="line"><span class="comment">#  mapAll: true</span></span><br><span class="line">  targetColumns:</span><br><span class="line">    <span class="built_in">id</span>:</span><br><span class="line">    role_description:</span><br><span class="line">    role_name:</span><br><span class="line">    role_type:</span><br><span class="line"><span class="comment">#  etlCondition: &quot;where c_time&gt;=&#123;&#125;&quot;</span></span><br><span class="line">  commitBatch: 3000 <span class="comment"># 批量提交的大小</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>canal</category>
      </categories>
      <tags>
        <tag>canal</tag>
        <tag>mysql</tag>
        <tag>oracle</tag>
        <tag>多数据源</tag>
      </tags>
  </entry>
  <entry>
    <title>Opencv3.2 python2.7 的CentOS7安装</title>
    <url>/2017/06/01/computerVision/opencv-python/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>系统环境</li>
<li>软件源</li>
<li>软件环境</li>
<li>源码安装</li>
</ul>
<p>Opencv3.2 python2.7 的CentOS7 完整安装过程。 yum安装的opencv 是2.4 版本；为使用最新功能，下面介绍 源码安装 Opencv3。</p>
<p>……</p>
<span id="more"></span>

<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">╭─root@localhost ~  </span><br><span class="line">╰─<span class="comment"># uname -a                                                                1 ↵</span></span><br><span class="line">Linux localhost.localdomain 3.10.0-514.21.1.el7.x86_64 <span class="comment">#1 SMP Thu May 25 17:04:51 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">╭─root@localhost ~  </span><br><span class="line">╰─<span class="comment"># cat /etc/redhat-release </span></span><br><span class="line">CentOS Linux release 7.3.1611 (Core) </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="软件源"><a href="#软件源" class="headerlink" title="软件源"></a>软件源</h2><ul>
<li><a href="">epel</a><br>epel 源， 阿里的镜像</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="http://li.nux.ro/repos.html">Nux Dextop</a><br>vlc 播放器 和 视频解码器 等</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release &amp;&amp; rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm</span><br></pre></td></tr></table></figure>

<h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><p>编译opencv需要的软件包</p>
<ul>
<li>GCC 4.4.x or later</li>
<li>CMake 2.8.7 or higher</li>
<li>Git</li>
<li>GTK+2.x or higher</li>
<li>pkg-config</li>
<li>Python 2.6 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy)</li>
<li>ffmpeg and development packages</li>
<li>[optional] libtbb2 libtbb-dev</li>
<li>[optional] libdc1394 2.x</li>
<li>[optional] libdc1394-devel libv4l-devel gstreamer-plugins-base-devel</li>
<li>[optional] CUDA Toolkit 6.5 or higher</li>
</ul>
<h3 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure>

<h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum groupinstall <span class="string">&#x27;Development Tools&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install cmake cmake-gui git pkgconfig autoconf automake  freetype-devel gcc gcc-c++  libtool make mercurial nasm pkgconfig zlib-devel</span><br></pre></td></tr></table></figure>

<h3 id="视频和图像格式"><a href="#视频和图像格式" class="headerlink" title="视频和图像格式"></a>视频和图像格式</h3><p>#图像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install libpng-devel libjpeg-turbo-devel jasper-devel openexr-devel libtiff-devel libwebp-devel </span><br></pre></td></tr></table></figure>

<p>#视频</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install libdc1394-devel libv4l-devel gstreamer-plugins-base-devel ffmpeg ffmpeg-devel</span><br></pre></td></tr></table></figure>

<h3 id="GUI特征"><a href="#GUI特征" class="headerlink" title="GUI特征"></a>GUI特征</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install gtk2-devel</span><br></pre></td></tr></table></figure>

<h3 id="Threading-Building-Blocks-TBB"><a href="#Threading-Building-Blocks-TBB" class="headerlink" title="Threading Building Blocks (TBB)"></a>Threading Building Blocks (TBB)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install tbb-devel eigen3-devel</span><br></pre></td></tr></table></figure>

<h3 id="cuda安装"><a href="#cuda安装" class="headerlink" title="cuda安装"></a>cuda安装</h3><p>&#x2F;&#x2F;TODO</p>
<h3 id="vlc"><a href="#vlc" class="headerlink" title="vlc"></a>vlc</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install vlc</span><br></pre></td></tr></table></figure>


<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>centos 7 默认安装的是 python 2.7</p>
<h4 id="pip-python-package-manager"><a href="#pip-python-package-manager" class="headerlink" title="pip (python package manager)"></a>pip (python package manager)</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&quot;https://bootstrap.pypa.io/get-pip.py&quot;</span> -o <span class="string">&quot;get-pip.py&quot;</span></span><br><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure>

<p>或者yum安装，然后升级</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y python-pip</span><br><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h4 id="python-2-7-development-tools"><a href="#python-2-7-development-tools" class="headerlink" title="python 2.7 development tools"></a>python 2.7 development tools</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install python-devel</span><br></pre></td></tr></table></figure>

<h4 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br><span class="line"></span><br><span class="line">pip install matplotlib </span><br><span class="line">yum install tkinter</span><br><span class="line">pip install scipy</span><br></pre></td></tr></table></figure>

<p><code>matplotlib</code> <code>scipy</code> 是非必须的，但使用opencv python 肯定用的着，所以建议一起安装好。 <code>tkinter</code> 是 <code>matplotlib</code> 的依赖</p>
<h2 id="Opencv3-2-源码安装"><a href="#Opencv3-2-源码安装" class="headerlink" title="Opencv3.2 源码安装"></a>Opencv3.2 源码安装</h2><p>工作目录为 <code>～</code>， 按照你的喜爱调整，记得下面的目录都要调整</p>
<h3 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h3><ul>
<li>opencv</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv.git</span><br><span class="line"><span class="built_in">cd</span> opencv</span><br><span class="line">git checkout 3.2.0</span><br></pre></td></tr></table></figure>

<ul>
<li>opencv_contrib<br>从 opencv 3.0 开始， opencv_contrib 单独发布， 这里有很多有意思的功能</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv_contrib.git</span><br><span class="line"><span class="built_in">cd</span> opencv_contrib</span><br><span class="line">git checkout 3.2.0</span><br></pre></td></tr></table></figure>

<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><h4 id="编译目录"><a href="#编译目录" class="headerlink" title="编译目录"></a>编译目录</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/opencv</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br></pre></td></tr></table></figure>

<h4 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">    -D CMAKE_INSTALL_PREFIX=/usr/local \</span><br><span class="line">    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \</span><br><span class="line">    -D INSTALL_C_EXAMPLES=OFF \</span><br><span class="line">    -D INSTALL_PYTHON_EXAMPLES=ON \</span><br><span class="line">    -D BUILD_EXAMPLES=ON \</span><br><span class="line">    -D BUILD_OPENCV_PYTHON2=ON ..</span><br></pre></td></tr></table></figure>

<p>特保注意：</p>
<ul>
<li><p>ippicv<br>cmake 会停留在 如下类似位置：</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-- checking <span class="keyword">for</span> module <span class="string">&#x27;libgphoto2&#x27;</span></span><br><span class="line">--   package <span class="string">&#x27;libgphoto2&#x27;</span> not found</span><br><span class="line">-- ICV: Downloading ippicv_linux_2017xxxx.tgz...</span><br></pre></td></tr></table></figure>

<p>  cmake 需要下载 <code>ippicv</code>， 会持续一段时间，耐心等待下。<br>  如果超时或者你想手动下载， 参照你 <code>build</code> 目录下 <code>CMakeDownloadLog.txt</code> 文件</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">cat</span> CMakeDownloadLog.txt </span><br><span class="line">use_cache <span class="string">&quot;/home/alalek/projects/opencv/dev/.cache&quot;</span></span><br><span class="line">do_unpack <span class="string">&quot;ippicv_2017u2_lnx_intel64_20170418.tgz&quot;</span> <span class="string">&quot;87cbdeb627415d8e4bc811156289fa3a&quot;</span> <span class="string">&quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/a62e20676a60ee0ad6581e217fe7e4bada3b95db/ippicv/ippicv_2017u2_lnx_intel64_20170418.tgz&quot;</span> <span class="string">&quot;/home/alalek/projects/opencv/build/opencv/3rdparty/ippicv&quot;</span></span><br><span class="line"><span class="comment">#cmake_download &quot;/home/alalek/projects/opencv/dev/.cache/ippicv/87cbdeb627415d8e4bc811156289fa3a-ippicv_2017u2_lnx_intel64_20170418.tgz&quot; &quot;https://raw.githubusercontent.com/opencv/opencv_3rdparty/a62e20676a60ee0ad6581e217fe7e4bada3b95db/ippicv/ippicv_2017u2_lnx_intel64_20170418.tgz&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>python<br>检查 python相关环境是否一致， 类似如下</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">--   Python 2:</span><br><span class="line">--     Interpreter:                 /usr/bin/python2.7 (ver 2.7.5)</span><br><span class="line">--     Libraries:                   /lib64/libpython2.7.so (ver 2.7.5)</span><br><span class="line">--     numpy:                       /usr/lib64/python2.7/site-packages/numpy/core/include (ver 1.12.1)</span><br><span class="line">--     packages path:               lib/python2.7/site-packages</span><br></pre></td></tr></table></figure>

<p>  可以通过 图像工具 <code>cmake-gui</code> 来调整</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="make"><a href="#make" class="headerlink" title="make"></a>make</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">make -j4 <span class="comment"># 4是你的电脑cpu线程</span></span><br></pre></td></tr></table></figure>
<p>查看输出日志</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Linking CXX shared module ../../lib/cv2.so</span><br><span class="line">。。。</span><br><span class="line">Built target opencv_python2</span><br></pre></td></tr></table></figure>
<p>基本代表 opencv python <code>make</code> 成功， 如果没有， 使用 <code>cmake-gui ..</code> 重新 <code>make</code> 一次</p>
<h4 id="make-install"><a href="#make-install" class="headerlink" title="make install"></a>make install</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">make install</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure>

<p>检查 <code>/usr/local/lib/python2.7/site-packages</code> 目录下 是否已经成功安装 <code>cv2.so</code></p>
<h4 id="链接给python"><a href="#链接给python" class="headerlink" title="链接给python"></a>链接给python</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib64/python2.7/site-packages </span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/lib/python2.7/site-packages/cv2.so cv2.so</span><br></pre></td></tr></table></figure>

<h3 id="测试opencv-python"><a href="#测试opencv-python" class="headerlink" title="测试opencv-python"></a>测试opencv-python</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">&gt;&gt;&gt;import cv2</span><br><span class="line">&gt;&gt;&gt;cv2.__version__</span><br><span class="line">3.2.0<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<p>congratulation！！！</p>
]]></content>
      <categories>
        <category>机器视觉</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>centos</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>DDD</title>
    <url>/2020/09/21/ddd/ddd/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>DDD基础理论</li>
<li>代码结构</li>
</ul>
<hr>
<span id="more"></span>


<h2 id="DDD基础理论"><a href="#DDD基础理论" class="headerlink" title="DDD基础理论"></a>DDD基础理论</h2><p>领域驱动设计</p>
<p>参考书籍：</p>
<p><code>领域驱动设计精粹</code></p>
<p><code>领域驱动设计与模式实战</code></p>
<h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ul>
<li>SRP(Single responsibility principle)：单一职责原则，一个module只有一个原因修改</li>
<li>OCP(Open&#x2F;closed principle)：开放-关闭原则，开放扩展，关闭修改</li>
<li>LSP(Liskov substitution principle)：里氏替换原则，子类型必须能够替换它们的基类型</li>
<li>ISP(Interface segregation principle)：接口隔离原则，你所依赖的必须是真正使用到的</li>
<li>DIP(Dependency inversion principle)：依赖导致原则，依赖接口而不是实现（高层不需要知道底层的实现）</li>
</ul>
<h2 id="模型演化"><a href="#模型演化" class="headerlink" title="模型演化"></a>模型演化</h2><ul>
<li>分层架构<br>系统按不同职责组织成有序层次，由于这种划分往往比较容易界定，也算是最常见和最受欢迎的一种架构，有一个说法是：“如果你不知道要用什么架构，那就用它。</li>
</ul>
<p>MVC</p>
<p>缺点：</p>
<pre><code>+ 底层是基础设施层， 领域层依赖于基础设施层
</code></pre>
<ul>
<li>依赖倒置</li>
</ul>
<p>依赖倒置的原则（DIP）由Robert C. Martin ：</p>
<pre><code>高层模块不应该依赖于底层模块，两者都应该依赖于抽象
抽象不应该依赖于实现细节，实现细节应该依赖于接口
</code></pre>
<p><img src="/images/ddd/di.jpeg"></p>
<p>事实上已经没有分层概念了。无论高层还是底层，实际只依赖于抽象，整个分层好像被推平了。</p>
<ul>
<li>六边形架构&#x2F;整洁架构</li>
</ul>
<p><img src="/images/ddd/6bian.jpeg" alt="六边形架构/整洁架构"></p>
<p>也是一种分层架构，只不过不是上下或左右，而是变成了内部和外部。<br>从外环到内环，软件的层级逐渐升高。<br>外环（low level）依赖内环（high level）。</p>
<h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p><img src="/images/ddd/cengci.png" alt="代码"></p>
<p><a href="http://git.xianzhongwang.cn:7001/quyu/homedoctor/homedoctor-ddd">代码实例</a> </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">DDD</span><br><span class="line">├── adapter</span><br><span class="line">│     └── 输出适配器</span><br><span class="line">├── api</span><br><span class="line">│     └── 输入适配器</span><br><span class="line">├── application</span><br><span class="line">│     └── 应用层</span><br><span class="line">├── domain 领域层</span><br><span class="line">│     ├── model</span><br><span class="line">│     │     └── 领域模型层</span><br><span class="line">│     └── service</span><br><span class="line">│         └── 领域服务层</span><br></pre></td></tr></table></figure>

<h3 id="adapter-输出适配器"><a href="#adapter-输出适配器" class="headerlink" title="adapter 输出适配器"></a>adapter 输出适配器</h3><p>系统内部，具体技术实现；<br>仓库，文档，缓存，消息机制，领域事件发布&#x2F;监听；</p>
<p>一般如下类型：</p>
<ul>
<li>persist</li>
<li>message</li>
<li>eventListener</li>
</ul>
<h3 id="api-输入适配器"><a href="#api-输入适配器" class="headerlink" title="api 输入适配器"></a>api 输入适配器</h3><ul>
<li>对外接口，传统 <code>controller</code> <code>API</code> 层, 程序入口，客户端调用；</li>
</ul>
<p>一般如下类型：</p>
<ul>
<li>controller</li>
</ul>
<h3 id="application-应用层"><a href="#application-应用层" class="headerlink" title="application 应用层"></a>application 应用层</h3><p>应用服务，传统 <code>service</code> 层, 一般跟场景（用例）有关。</p>
<p>一般如下类型：</p>
<ul>
<li>handler&#x2F;service  </li>
<li>command 场景 POJO</li>
</ul>
<p>一个场景（用例），对应一个command，对应一个handler</p>
<h3 id="domain-领域层"><a href="#domain-领域层" class="headerlink" title="domain 领域层"></a>domain 领域层</h3><p>一般如下类型：</p>
<ul>
<li>model 领域模型</li>
<li>service 领域服务</li>
<li>factory&#x2F;builder 工厂<br>复杂对象构建， 比如 主键ID使用snow或美团leaf</li>
</ul>
<h4 id="model-领域模型层"><a href="#model-领域模型层" class="headerlink" title="model 领域模型层"></a>model 领域模型层</h4><p>一般如下类型：</p>
<ul>
<li>entity</li>
<li>repository</li>
<li>event</li>
<li>值对象</li>
</ul>
<h4 id="service-领域服务层"><a href="#service-领域服务层" class="headerlink" title="service 领域服务层"></a>service 领域服务层</h4><ul>
<li>协调多个聚合，并且是领域逻辑,不放在应用服务层， 放在领域服务层</li>
<li>算法，策略，保持实体和值对象的单一原则，可以提炼出来变成领域服务</li>
<li>访问数据库等外部资源</li>
</ul>
<h2 id="方寸之间"><a href="#方寸之间" class="headerlink" title="方寸之间"></a>方寸之间</h2><h3 id="领域服务"><a href="#领域服务" class="headerlink" title="领域服务"></a>领域服务</h3><ul>
<li><p>当领域遜辑放某-一个聚合里不合适，需要协调多个聚合，但由于是领域逻辑，放在应用服务里不合适的时候，可以放到领域服务里;</p>
</li>
<li><p>需要访问数据库等外部资源的业务逻辑，不建议聚合里，可以放到领域服务里</p>
</li>
<li><p>有些算法、策略代码，为了保持实体和值对象的职责单- - ，可以提炼出来变成领域服务( 领域服务类的命名不-定都要以Service结尾)</p>
</li>
<li><p>不涉及事务处理</p>
</li>
</ul>
<h3 id="富领域模型双刃剑"><a href="#富领域模型双刃剑" class="headerlink" title="富领域模型双刃剑"></a>富领域模型双刃剑</h3><ul>
<li>好处</li>
</ul>
<p>分开对待本质复杂度和偶然复杂度，核心业务逻辑被封装在领域对象里，内聚，容易保持一致性， 且容易维护和扩展。</p>
<p>此外，容易测试，且代码和测试都可以作为文档。</p>
<ul>
<li>坏处</li>
</ul>
<p>对象引用多， 内存占用大， 影响吞吐量</p>
<h3 id="通过聚合在贫富间取得平衡"><a href="#通过聚合在贫富间取得平衡" class="headerlink" title="通过聚合在贫富间取得平衡"></a>通过聚合在贫富间取得平衡</h3><p>聚合是一组相关领域模型的集合,是用来封装业务的不变性。同时强迫大家尽可能的简化领域模型之间的关联关系。在贫富之间寻找平衡。</p>
<p>聚合的主要原则包括:</p>
<ul>
<li><p>聚合是-致性边界，聚合根负责执行业务规则，改变边界内的任一对象的状态都不能违反整个聚合的所有业务规则;</p>
</li>
<li><p>聚合根有全局标识，聚合边界内的其他实体只有局部标识，聚合边界外的对象，只能持有聚合根的<code>标识</code>，<code>不能引用聚合根对象</code>，也不能持有聚合内部对象或标识</p>
</li>
<li><p>聚合具有整体的生命周期，删除聚合根，聚合内的所有对象都需要删除 </p>
</li>
<li><p>只有聚合根能从持久化系统内查询得到，边界内的对象只能从聚合根导航访问</p>
</li>
</ul>
<h3 id="聚合根和数据一致性"><a href="#聚合根和数据一致性" class="headerlink" title="聚合根和数据一致性"></a>聚合根和数据一致性</h3><p>应用服务作为事务一致性边界，一个事务里不能涉及到两个聚合的修改，跨聚合的数据应该使用最终一致。</p>
<p>但最终一致性成本很高。</p>
<p>实例代码中，基于内存实现同步的领域事件发布和订阅。这样，实际上两个聚合根的更改基于同一个本地数据库事务。</p>
<p>但由于使用了事件驱动，在代码层面，两个聚合根的更新是解耦的，在需要最终一致性的时候容易重构。</p>
]]></content>
      <categories>
        <category>ddd</category>
      </categories>
      <tags>
        <tag>ddd</tag>
      </tags>
  </entry>
  <entry>
    <title>十年回头望</title>
    <url>/2016/06/14/devEnv/10years/</url>
    <content><![CDATA[<p>十年之前，刚刚毕业；十年之后，回头看看；低头思考，抬头前行。</p>
<span id="more"></span>

<p>以下是个人对开发框架整体的思考和一些优秀实践，简单整理，陆续补充，详细的看是否有时间完善。</p>
<h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><h3 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h3><p>中小型系统架构网络拓扑<br><a class="fancybox" title="" href="http://amadis.qiniudn.com/structure.jpg" rel="article0"><br><img  width="700px"  alt="" src="http://amadis.qiniudn.com/structure.jpg"><br></a></p>
<h3 id="基础框架"><a href="#基础框架" class="headerlink" title="基础框架"></a>基础框架</h3><p>以Spring的一系列框架为基础（如 Spring MVC， SpringData），配合自己开发的开发脚手架。<br>表现层：Css3， JavaScript6，JQuery ， Jsp2<br>控制层：spring mvc<br>服务层：spring core<br>持久层：spring data JPA<br>安全层：shiro<br>批处理：quartz<br>单元测试： Junit + H2数据库<br>数据库：Mysql + Redis</p>
<h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p>
<a class="fancybox" title="开发流程" href="http://amadis.qiniudn.com/process.png" rel="article0">
<img alt="开发流程" width="400px" height="600px" src="http://amadis.qiniudn.com/process.png">
</a>
<span class="caption">开发流程</span>
</p>


<h2 id="第三方管理系统"><a href="#第三方管理系统" class="headerlink" title="第三方管理系统"></a>第三方管理系统</h2><h3 id="git-gitlab-源码管理"><a href="#git-gitlab-源码管理" class="headerlink" title="git gitlab 源码管理"></a>git gitlab 源码管理</h3><ul>
<li><p>git<br>分布式源码管理，gitFlow是其一大特色。<br>相关链接</p>
<ul>
<li><a href="/tags/git/">git</a></li>
</ul>
</li>
<li><p>gitlab<br>一个开源的版本管理系统,实现一个自托管的Git项目仓库,可通过Web界面进行访问公开的或者私人项目。基本拥有GitHub类似的功能。<br>建议采用ssh协议</p>
<ul>
<li>方便 ： 不用每次输入密码</li>
<li>安全</li>
<li>减少传送数据，节约流量<br><a href="/tags/gitlab/">gitlab</a></li>
</ul>
</li>
<li><p>gitFlow<br>gitFlow模型：一个组织软件开发活动的版本迭代模型，定义围绕项目发布的严格分支模型，提供了一个健壮的用于管理大型项目的框架。<br>5大分支<br><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html">git-flow 备忘清单</a></p>
</li>
<li><p>jgitflow-maven-plugin</p>
<p><a href="http://jgitflow.bitbucket.org/">jgitflow</a></p>
</li>
</ul>
<h3 id="maven-项目管理"><a href="#maven-项目管理" class="headerlink" title="maven 项目管理"></a>maven 项目管理</h3><ul>
<li><p>管理系统依赖<br>统一依赖的来源和版本，保持开发环境一致，避免莫名错误</p>
</li>
<li><p>管理项目生命周期<br>构建，编译，测试，发布，更新版本。。。。</p>
</li>
</ul>
<p><a href="/tags/maven/">maven</a></p>
<h3 id="nexus-本地资源库"><a href="#nexus-本地资源库" class="headerlink" title="nexus 本地资源库"></a>nexus 本地资源库</h3><p>使用 Sonatype Nexus Repository Manager OSS版本；<br>nexus可以帮助你与其他开发人员和最终用户共享组件。它大大简化了内部存储库的维护和访问外部存储库，可以从单一地点完全控制访问和部署每个组件。<br>主要配合maven 和 gradle 工作。</p>
<ul>
<li><a href="/tags/nexus/">相关链接</a></li>
</ul>
<h3 id="jira-任务与缺陷管理"><a href="#jira-任务与缺陷管理" class="headerlink" title="jira 任务与缺陷管理"></a>jira 任务与缺陷管理</h3><p>多人协助也好， 一个人玩也行；<br>自己给自己安排任务，自己安排时间，完了自己查看统计数据，挺好。</p>
<h3 id="code-review"><a href="#code-review" class="headerlink" title="code review"></a>code review</h3><p>crucible系统<br>窃以为： code review是成本最低且有效提高代码质量的手段，特别是几个技术高深的人员一起review</p>
<h3 id="jenkins-持续集成"><a href="#jenkins-持续集成" class="headerlink" title="jenkins 持续集成"></a>jenkins 持续集成</h3><ul>
<li><p>测试<br>测试人员随时或的最新版本，构建测试版本，且不打扰开发人员；</p>
</li>
<li><p>发布<br>配合<code>maven</code>的多环境参数配置，图形化一键发布，方便高效</p>
</li>
<li><p>相关链接<br><a href="/tags/jenkins/">jenkins</a></p>
</li>
</ul>
<h2 id="开发辅助系统"><a href="#开发辅助系统" class="headerlink" title="开发辅助系统"></a>开发辅助系统</h2><p>自己开发，开发测试人员内部使用， 持续改进ing</p>
<h3 id="开发沙箱"><a href="#开发沙箱" class="headerlink" title="开发沙箱"></a>开发沙箱</h3><ul>
<li>接口文档在线化</li>
<li>开发环境&#x2F;测试环境&#x2F;生产环境的切换</li>
<li>保留接口请求和服务器返回内容的现场数据</li>
<li>模拟接口仿真服务，方便客户端开发和测试</li>
<li>接口版本化管理（待改进）</li>
</ul>
<h3 id="2维码管理系统"><a href="#2维码管理系统" class="headerlink" title="2维码管理系统"></a>2维码管理系统</h3><p>个性化定制2维码，并跟踪该2维码后续行为数据。比如给某推广人员定制一个专属2维码，并收集和分析该2维码的后续行为数据。</p>
<h3 id="数据收集分析系统"><a href="#数据收集分析系统" class="headerlink" title="数据收集分析系统"></a>数据收集分析系统</h3><p>收集用户行为数据，根据运营需求分析；<br>友盟等提供的功能直接用友盟；<br>这里可以做一些对友盟等第三方数据平台的补充。</p>
<h3 id="安装包管理系统"><a href="#安装包管理系统" class="headerlink" title="安装包管理系统"></a>安装包管理系统</h3><p>统一管理APP安装包， 提供图像界面给测试人员和运营人员操作，记录保存每个版本。<br>配合CI使用。<br>iOS 生产环境未实现。。。。。</p>
<h3 id="源码规范检查工具"><a href="#源码规范检查工具" class="headerlink" title="源码规范检查工具"></a>源码规范检查工具</h3><ul>
<li>检查多余图片资源、语言包</li>
<li>检查项目中命名、编码规范</li>
</ul>
<h3 id="意见反馈管理系统"><a href="#意见反馈管理系统" class="headerlink" title="意见反馈管理系统"></a>意见反馈管理系统</h3><p>联合运营人员或者客服人员，聆听用户反馈，改进产品。</p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>生产最近使用较多的是 mysql及其分支；junit中多用H2</p>
<h3 id="Multi-Source-Replication"><a href="#Multi-Source-Replication" class="headerlink" title="Multi-Source Replication"></a>Multi-Source Replication</h3><h3 id="热备"><a href="#热备" class="headerlink" title="热备"></a>热备</h3><h3 id="冷备"><a href="#冷备" class="headerlink" title="冷备"></a>冷备</h3><h2 id="开发脚手架"><a href="#开发脚手架" class="headerlink" title="开发脚手架"></a>开发脚手架</h2><p>注重代码积累，将常用代码模块化，需要时可插拔，提高开发效率和代码质量。<br>从技术层面来说，产品化需要做到可配置、可定制、可灵活组装、可快速开发.</p>
<ul>
<li>认证授权模块</li>
<li>消息短信模块</li>
<li>用户基础模块</li>
<li>第三方支付模块</li>
<li>静态资源模块</li>
<li>加解密模块</li>
</ul>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>十年回头望</tag>
      </tags>
  </entry>
  <entry>
    <title>idea 和 eclipse 快捷键</title>
    <url>/2019/09/23/devEnv/ide/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>idea</p>
<p><em>更新历史</em><br>2019-09-23 增加 idea 远程 debug</p>
<span id="more"></span>

<hr>
<p>eclipse 和 idea 常用快捷键 对比 (转载)</p>
<table>
<thead>
<tr>
<th>Eclipse</th>
<th align="center">IntelliJ IDEA</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td>F4</td>
<td align="center">ctrl+h</td>
<td align="left">show the type hierarchy</td>
</tr>
<tr>
<td>ctrl+alt+g</td>
<td align="center">ctrl+alt+F7</td>
<td align="left">find usages</td>
</tr>
<tr>
<td>ctrl+shift+u</td>
<td align="center">ctrl+f7</td>
<td align="left">finds the usages in the same file</td>
</tr>
<tr>
<td>alt+shift+r</td>
<td align="center">shift+F6</td>
<td align="left">rename</td>
</tr>
<tr>
<td>ctrl+shift+r</td>
<td align="center">ctrl+shift+N</td>
<td align="left">find file &#x2F; open resource</td>
</tr>
<tr>
<td>ctrl+shift+x, j</td>
<td align="center">ctrl+shift+F10</td>
<td align="left">run (java program)</td>
</tr>
<tr>
<td>ctrl+shift+o</td>
<td align="center">ctrl+alt+o</td>
<td align="left">organize imports</td>
</tr>
<tr>
<td>ctrl+o</td>
<td align="center">ctrl+F12</td>
<td align="left">show current file structure &#x2F; outline</td>
</tr>
<tr>
<td>ctrl+shift+m</td>
<td align="center">ctrl+alt+V</td>
<td align="left">create local variable refactoring</td>
</tr>
<tr>
<td>syso ctrl+space</td>
<td align="center">sout ctrl+j</td>
<td align="left">System.out.println(“”)</td>
</tr>
<tr>
<td>alt + up&#x2F;down</td>
<td align="center">ctrl + shift + up&#x2F;down</td>
<td align="left">move lines</td>
</tr>
<tr>
<td>ctrl + d</td>
<td align="center">ctrl + y</td>
<td align="left">delete current line</td>
</tr>
<tr>
<td>???</td>
<td align="center">alt + h</td>
<td align="left">show subversion history</td>
</tr>
<tr>
<td>ctrl + h</td>
<td align="center">ctrl + shift + f</td>
<td align="left">search (find in path)</td>
</tr>
<tr>
<td>“semi” set in window-&gt; preferences</td>
<td align="center">ctrl + shift + enter</td>
<td align="left">if I want to add the semi-colon at the end of a statement</td>
</tr>
<tr>
<td>ctrl + 1 or ctrl + shift + l</td>
<td align="center">ctrl + alt + v</td>
<td align="left">introduce local variable</td>
</tr>
<tr>
<td>alt + shift + s</td>
<td align="center">alt + insert</td>
<td align="left">generate getters &#x2F; setters</td>
</tr>
<tr>
<td>ctrl + shift + f</td>
<td align="center">ctrl + alt + l</td>
<td align="left">format code</td>
</tr>
<tr>
<td>ctrl + y</td>
<td align="center">ctrl + shift + z</td>
<td align="left">redo</td>
</tr>
<tr>
<td>ctrl + shift + c</td>
<td align="center">ctrl + &#x2F;</td>
<td align="left">comment out lines</td>
</tr>
<tr>
<td>ctrl + alt + h</td>
<td align="center">ctrl + alt + h (same!)</td>
<td align="left">show call hierarchy</td>
</tr>
<tr>
<td>none ?</td>
<td align="center">ctrl + alt + f7</td>
<td align="left">to jump to one of the callers of a method</td>
</tr>
<tr>
<td>ctrl + shift + i</td>
<td align="center">alt + f8</td>
<td align="left">evaluate expression (in debugger)</td>
</tr>
<tr>
<td>F3</td>
<td align="center">ctrl + b</td>
<td align="left">go to declaration (e.g. go to method)</td>
</tr>
<tr>
<td>ctrl + l</td>
<td align="center">ctrl + g</td>
<td align="left">go to line</td>
</tr>
<tr>
<td>alt + &#x2F;</td>
<td align="center">ctrl + space</td>
<td align="left">eclipse:Content Assist ; idea:completion 跟输入法冲突，自己改</td>
</tr>
<tr>
<td>？？？</td>
<td align="center">ctrl + shift + a</td>
<td align="left">查找所有Intellij的命令</td>
</tr>
<tr>
<td>？？？</td>
<td align="center">ctrl + shift + alt + t</td>
<td align="left">重构所有</td>
</tr>
</tbody></table>
<p>Shortcut Translator插件， 安装后，按Ctrl+Shift+K调出快捷键翻译对话框，选定你惯用的IDE keymap和需要学习的keymap，按下惯用keymap的快捷键，即可看到学习keymap上的对应快捷键。</p>
<h2 id="IDEA-初始化"><a href="#IDEA-初始化" class="headerlink" title="IDEA 初始化"></a>IDEA 初始化</h2><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul>
<li>JReble</li>
<li>IdeaVim<br>默认开启&#x2F;关闭快捷是 Ctrl+Alt+v， 有冲突，可以改成Shift+Alt+v</li>
</ul>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul>
<li>修改 completion ： shift + space</li>
<li>增加 close all 和 close other</li>
<li>修改自动完成大小写敏感<br>setting–&gt;Editor–&gt;General–&gt;Code completion : Case sensitive completion 修改为 none</li>
</ul>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>新建好server， before launch ： Maven Goal -》 clean package</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul>
<li><p>Live templates<br>增加 java method comment<br>jmc ： &#x2F;**</p>
</li>
<li><p>File and Code templates<br>Includs 可以修改成如下内容：</p>
<pre><code>/**
* Created with $&#123;PRODUCT_NAME&#125;.
* User: $&#123;USER&#125;
* Date: $&#123;DATE&#125;
* Time: $&#123;TIME&#125;
* description: 
*/
</code></pre>
</li>
</ul>
<h3 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h3><ul>
<li><p>编辑 .properties 文件<br>settting –》  File Encodings –》 Transparent native-to-ascii conversion 打勾</p>
</li>
<li><p>限制一行代码的宽度<br>File-&gt;settings-&gt;Code Style-&gt;General中，修改“Right margin (columns)”的值即可改变代码行宽度的限制。<br>自动将代码换行:<br>第一种，在上述的“Right margin (columns)”的下方，有“Wrap when typing reaches right margin”选项，选中它，是什么效果呢？如下图所示，随着输入的字符的增加，当代码宽度到达界线时，IDEA会自动将代码换行。<br>第二种，在File-&gt;settings-&gt;Code Style-&gt;Java中，选中“Wrapping and Braces”选项卡，在“Keep when reformatting”中有一个“Ensure rigth margin is not exceeded”，选中</p>
</li>
<li><p>quick doc<br>eclipse 光标放类或方法上， 默认有javaDoc 等 doc 显示；<br>idea 默认没有， 可以用 <code>CTRL + Q</code> 手动显示，或者 <code>setting -&gt; editor -&gt; general</code> 页面， other 部分， 将 <code>show quick documentation</code> 打上勾</p>
</li>
</ul>
<h2 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h2><h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><ul>
<li>点击主窗口菜单 Run &#x2F; Edit Configurations，打开“Run&#x2F;Debug Configurations”窗口；</li>
<li>点击工具栏上的“+”按钮，下拉菜单中选择“Remote”；</li>
<li>设置 Host 为远程服务器的域名或IP，Port为端口；</li>
<li>复制命令行参数，<br><code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8006 </code></li>
</ul>
<p><img src="/images/ideaRemote1.png"></p>
<h3 id="远程服务器"><a href="#远程服务器" class="headerlink" title="远程服务器"></a>远程服务器</h3><ul>
<li><p>SpringBoot</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8006 -jar test-center.jar</span><br></pre></td></tr></table></figure>

</li>
<li><p>Tomcat<br>修改启动脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8006&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>本地和远程代码一致</li>
<li>远程端口开放</li>
</ul>
]]></content>
      <categories>
        <category>developEnv</category>
      </categories>
      <tags>
        <tag>idea eclipse 快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 入门 （未完）</title>
    <url>/2017/10/10/docker/docker/</url>
    <content><![CDATA[<p>docker 入门 （未完）</p>
<p><em>更新历史</em><br>无</p>
<span id="more"></span>

<hr>
<h1 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h1><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>不要使用 dockercommit 定制镜像,定制行为应该使用 Dockerfile 来完成。<br>Dockerfile中每一个指令都会建立一层</p>
<ul>
<li><p>run<br>使用 <code>&amp;&amp;</code> 将各个所需命令串联起来</p>
</li>
<li><p>镜像构建上下文(Context)<br><code>docker build [选项] &lt;上下文路径/URL/-&gt;</code><br><code> docker build -t nginx:v3 .</code><br>最后有一个<code>.</code>。 <code>.</code>表示当前目录, 是在指定上下文路径。 即 docker 所能操作的根目录， 超出其路径， docker 是不能操作的<br><code>docker build</code>  命令得知这个路径后,会将路径下的所有内容打包,然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后,展开就会获得构建镜像所需的一切文件。<br>初学的错误是将<code>Dockerfile</code>放到硬盘根目录, 把上下文设置成硬盘根目录， 结果发现<code>docker build</code>执行后,在发送一个几十GB的东西。<br>一般来说,应该会将<code>Dockerfile</code>置于一个空目录下,或者项目根目录下。如果该目录下没有所需文件,那么应该把所需文件复制一份过来。<br>如果目录下有些东西确实不希望构建时传给 Docker 引擎,那么可以用<code>.gitignore</code>一样的语法写一个<code>.dockerignore</code>,该文件是用于剔除不需要作为上下文传递给Docker 引擎的。<br>那么为什么会有人误以为<code>.</code>是指定<code>Dockerfile</code>所在目录呢?这是因为在默认情况下,如果不额外指定<code>Dockerfile</code>的话,会将上下文目录下的名为 Dockerfile  的文件作为 Dockerfile。</p>
</li>
</ul>
<h3 id="COPY复制文件"><a href="#COPY复制文件" class="headerlink" title="COPY复制文件"></a>COPY复制文件</h3><h3 id="ADD更高级的复制文件"><a href="#ADD更高级的复制文件" class="headerlink" title="ADD更高级的复制文件"></a>ADD更高级的复制文件</h3><h3 id="CMD容器启动命令"><a href="#CMD容器启动命令" class="headerlink" title="CMD容器启动命令"></a>CMD容器启动命令</h3><h3 id="ENTRYPOINT入口点"><a href="#ENTRYPOINT入口点" class="headerlink" title="ENTRYPOINT入口点"></a>ENTRYPOINT入口点</h3><h3 id="ENV设置环境变量"><a href="#ENV设置环境变量" class="headerlink" title="ENV设置环境变量"></a>ENV设置环境变量</h3><h3 id="ARG构建参数"><a href="#ARG构建参数" class="headerlink" title="ARG构建参数"></a>ARG构建参数</h3><h3 id="VOLUME定义匿名卷"><a href="#VOLUME定义匿名卷" class="headerlink" title="VOLUME定义匿名卷"></a>VOLUME定义匿名卷</h3><h3 id="EXPOSE声明端口"><a href="#EXPOSE声明端口" class="headerlink" title="EXPOSE声明端口"></a>EXPOSE声明端口</h3><h3 id="WORKDIR指定工作目录"><a href="#WORKDIR指定工作目录" class="headerlink" title="WORKDIR指定工作目录"></a>WORKDIR指定工作目录</h3><h3 id="WORKDIR指定工作目录-1"><a href="#WORKDIR指定工作目录-1" class="headerlink" title="WORKDIR指定工作目录"></a>WORKDIR指定工作目录</h3><h3 id="USER指定当前用户"><a href="#USER指定当前用户" class="headerlink" title="USER指定当前用户"></a>USER指定当前用户</h3><h3 id="HEALTHCHECK健康检查"><a href="#HEALTHCHECK健康检查" class="headerlink" title="HEALTHCHECK健康检查"></a>HEALTHCHECK健康检查</h3><h3 id="ONBUILD为他人做嫁衣裳"><a href="#ONBUILD为他人做嫁衣裳" class="headerlink" title="ONBUILD为他人做嫁衣裳"></a>ONBUILD为他人做嫁衣裳</h3><h2 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h2><p><code>dockerrmi[选项]&lt;镜像1&gt;[&lt;镜像2&gt;...]</code><br>其中, &lt;镜像&gt;可以是  镜像短ID、  镜像长ID、  镜像名或者  镜像摘要。<br>可以使用 <code>dockerimages-q</code>来配合使用<code>dockerrmi</code>,这样可以成批的删除希望删除的镜像。</p>
<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="新建并启动"><a href="#新建并启动" class="headerlink" title="新建并启动"></a>新建并启动</h2><p><code>docker	run</code><br><code>	sudo	docker	run	-t	-i	ubuntu:14.04	/bin/bash</code></p>
<p>检查本地是否存在指定的镜像,不存在就从公有仓库下载启动<br>利用镜像创建并启动一个容器<br>分配一个文件系统,并在只读的镜像层外面挂载一层可读写层<br>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去<br>从地址池配置一个	ip	地址给容器<br>执行用户指定的应用程序<br>执行完毕后容器被终止</p>
<h2 id="启动已终止容器"><a href="#启动已终止容器" class="headerlink" title="启动已终止容器"></a>启动已终止容器</h2><p><code>docker	start</code></p>
<h2 id="后台-background-运行"><a href="#后台-background-运行" class="headerlink" title="后台(background)运行"></a>后台(background)运行</h2><p><code>sudo	docker	run	-d	ubuntu:14.04	/bin/sh	-c	&quot;while	true;	do	echo	hello	world;	sleep	1;	done</code><br>容器会在后台运行并不会把输出的结果(STDOUT)打印到宿主机上面(输出结果可以用docker	logs	查看)。<br><code>sudo	docker	logs	[container	ID	or	NAMES]</code></p>
<h2 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h2><p><code>	docker	stop	 </code></p>
<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><ul>
<li><code>nsenter</code>	命令</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">PID=$(docker	inspect	--format	<span class="string">&quot;&#123;&#123;	.State.Pid	&#125;&#125;&quot;</span>	&lt;container&gt;)</span><br><span class="line">nsenter	--target	<span class="variable">$PID</span>	--mount	--uts	--ipc	--net	--pid</span><br><span class="line">nsenter	--target	<span class="variable">$pid</span>	--mount	--uts	--ipc	--net	--pid		--	/usr/bin/env	\	--ignore-environment	HOME=/root	/bin/bash	--login</span><br></pre></td></tr></table></figure>

<ul>
<li><code>.bashrc_docker</code><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget	-P	~	https://github.com/yeasy/docker_practice/raw/master/_local/.bashrc_docker;</span><br><span class="line"><span class="built_in">echo</span>	<span class="string">&quot;[	-f	~/.bashrc_docker	]	&amp;&amp;	.	~/.bashrc_docker&quot;</span>	&gt;&gt;	~/.bashrc;	<span class="built_in">source</span>	~/.bashrc</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这个文件中定义了很多方便使用	Docker	的命令,例如	 	docker-pid		可以获取某<br>个容器的	PID;而	 	docker-enter		可以进入容器或直接在容器内执行命令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span>	$(docker-pid	&lt;container&gt;)</span><br><span class="line">docker-enter	&lt;container&gt;	<span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h2 id="导出和导入容器-dockerexport"><a href="#导出和导入容器-dockerexport" class="headerlink" title="导出和导入容器 docker	export"></a>导出和导入容器 <code>docker	export</code></h2><h3 id="导出-dockerexport"><a href="#导出-dockerexport" class="headerlink" title="导出 docker	export"></a>导出 <code>docker	export</code></h3><h3 id="导入-dockerimport"><a href="#导入-dockerimport" class="headerlink" title="导入 docker	import"></a>导入 <code>docker	import</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat	ubuntu.tar	|	sudo	docker	import	-	test/ubuntu:v1.0</span><br><span class="line">sudo	docker	import	http://example.com/exampleimage.tgz	example/imagerepo</span><br></pre></td></tr></table></figure>

<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p><code>sudo	docker	rm		trusting_newton</code><br>如果要删除一个运行中的容器,可以添加	 	-f		参数</p>
<h3 id="清理所有处于终止状态的容器"><a href="#清理所有处于终止状态的容器" class="headerlink" title="清理所有处于终止状态的容器"></a>清理所有处于终止状态的容器</h3><p><code>docker	rm	$(docker	ps	-a	-q)</code>可以全部清理掉, 包括还在运行中的容器.</p>
<h1 id="Docker数据管理"><a href="#Docker数据管理" class="headerlink" title="Docker	数据管理"></a>Docker	数据管理</h1><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ClientAbortException</title>
    <url>/2016/02/15/exception/ClientAbortException/</url>
    <content><![CDATA[<p>Spring MVC 4.2.1.RELEASE ， 容器 tomcat 8.21， nginx ： 客户端在服务端响应前就关闭（socket），比如下载文件一半关闭浏览器，<br>服务端会有如下异常， 该异常服务器从业务上不需要处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.apache.catalina.connector.ClientAbortException: java.io.IOException: 断开的管道</span><br><span class="line"> at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:393) ~[catalina.jar:8.0.18]</span><br><span class="line"> at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:426) ~[tomcat-util.jar:8.0.18]</span><br><span class="line"> at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:342) ~[catalina.jar:8.0.18]</span><br><span class="line"> at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:317) ~[catalina.jar:8.0.18]</span><br><span class="line"> at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:110) ~[catalina.jar:8.0.18]</span><br><span class="line"> ......</span><br><span class="line"> at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516) [catalina.jar:8.0.18]</span><br><span class="line"> at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086) [tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659) [tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) [tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558) [tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515) [tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_31]</span><br><span class="line"> at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_31]</span><br><span class="line"> at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-util.jar:8.0.18]</span><br><span class="line"> at java.lang.Thread.run(Thread.java:745) [na:1.8.0_31]</span><br><span class="line">Caused by: java.io.IOException: 断开的管道</span><br><span class="line"> at sun.nio.ch.FileDispatcherImpl.write0(Native Method) ~[na:1.8.0_31]</span><br><span class="line"> at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47) ~[na:1.8.0_31]</span><br><span class="line"> at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93) ~[na:1.8.0_31]</span><br><span class="line"> at sun.nio.ch.IOUtil.write(IOUtil.java:65) ~[na:1.8.0_31]</span><br><span class="line"> at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:470) ~[na:1.8.0_31]</span><br><span class="line"> at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:127) ~[tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101) ~[tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:173) ~[tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:139) ~[tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at org.apache.coyote.http11.InternalNioOutputBuffer.addToBB(InternalNioOutputBuffer.java:197) ~[tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at org.apache.coyote.http11.InternalNioOutputBuffer.access$000(InternalNioOutputBuffer.java:41) ~[tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at org.apache.coyote.http11.InternalNioOutputBuffer$SocketOutputBuffer.doWrite(InternalNioOutputBuffer.java:320) ~[tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at org.apache.coyote.http11.filters.IdentityOutputFilter.doWrite(IdentityOutputFilter.java:93) ~[tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at org.apache.coyote.http11.AbstractOutputBuffer.doWrite(AbstractOutputBuffer.java:256) ~[tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at org.apache.coyote.Response.doWrite(Response.java:503) ~[tomcat-coyote.jar:8.0.18]</span><br><span class="line"> at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:388) ~[catalina.jar:8.0.18]</span><br><span class="line"> ... 76 common frames omitted</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>exception</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>spring</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat-jdbc hibernate 版本冲突</title>
    <url>/2015/10/29/exception/tomcat-jdbc-hibernate/</url>
    <content><![CDATA[<p>搭建了一套 Spring 核心的 web 服务基础框架。<br>涉及 Spring 4.2.1.RELEASE ， Spring MVC 4.2.1.RELEASE ，Spring Data JPA 1.9.0.RELEASE， Hibernate 5.0.2.Final， 数据库连接池 tomcat-jdbc 8.27， 容器 tomcat 8.21。</p>
<p>坑人的异常：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.apache.tomcat.jdbc.pool.ConnectionPool abandon</span><br><span class="line">    WARNING: Connection has been abandoned PooledConnection[com.mysql.jdbc.JDBC4Connection@1ad2916]:java.lang.Exception</span><br><span class="line">        at org.apache.tomcat.jdbc.pool.ConnectionPool.getThreadDump(ConnectionPool.java:967)</span><br><span class="line">        at org.apache.tomcat.jdbc.pool.ConnectionPool.borrowConnection(ConnectionPool.java:721)</span><br><span class="line">        at org.apache.tomcat.jdbc.pool.ConnectionPool.borrowConnection(ConnectionPool.java:579)</span><br><span class="line">        at org.apache.tomcat.jdbc.pool.ConnectionPool.getConnection(ConnectionPool.java:174)</span><br><span class="line">        at org.apache.tomcat.jdbc.pool.DataSourceProxy.getConnection(DataSourceProxy.java:111)</span><br><span class="line">        at com.getsom.getConnection(DAO.java:1444)</span><br><span class="line">        at com.getsom.PreparedConnection.(PreparedConnection.java:48)</span><br><span class="line">        at com.getsom.Alarms.run(Alarms.java:492)</span><br></pre></td></tr></table></figure>

<p>奇怪的异常， 折腾半天，把 tomcat-jdbc 的配置属性玩了个遍，没辙， 想起以前版本没问题， Hibernate 5.0.2.Final 降级成 Hibernate 4.3.11.Final;<br>然后就好了！！！！！！<br>似乎是 对 Hibernate 5 的支持还不够广泛。</p>
<p>ps 推荐一个 <a href="http://wiki.jikexueyuan.com/project/tomcat/">tomcat 8 中文文档</a>, 翻译的还可以。</p>
]]></content>
      <categories>
        <category>exception</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>hibernate</tag>
        <tag>tomcat-jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>cloudera</title>
    <url>/2020/04/29/hadoop/cdh/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>CM 安装</li>
<li>CDH 安装</li>
</ul>
<p>CDH  Cloudera’s Distribution, including Apache Hadoop。 Cloudera 公司出品。<br>拥有集群自动化安装、中心化管理、集群监控、报警功能的一个工具（软件），使得集群的安装可以从几天的时间缩短为几个小时，运维人数也会从数十人降低到几个人，极大的提高了集群管理的效率。</p>
<hr>
<span id="more"></span>

<h2 id="提前工作"><a href="#提前工作" class="headerlink" title="提前工作"></a>提前工作</h2><h3 id="关闭防火墙，SeLinux"><a href="#关闭防火墙，SeLinux" class="headerlink" title="关闭防火墙，SeLinux"></a>关闭防火墙，SeLinux</h3><h3 id="校准时间"><a href="#校准时间" class="headerlink" title="校准时间"></a>校准时间</h3><p>使用NTP服务 同步时间相关服务器时间<br><a href="https://blog.csdn.net/zonghua521/article/details/78239212">ntpd, ntpdate</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*/20  * * * * /usr/sbin/ntpdate pool.ntp.org&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/crontab &gt; /dev/null</span><br></pre></td></tr></table></figure>

<h3 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h3><p>根据不同机器角色设置 hostname， 如下 master</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname master</span><br></pre></td></tr></table></figure>

<h3 id="hostname-解析"><a href="#hostname-解析" class="headerlink" title="hostname 解析"></a>hostname 解析</h3><p>master slave 都配置好,要和 hostname 匹配， 如下例子：</p>
<p><code>vim /etc/hosts</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">192.168.8.23 master-23</span><br><span class="line">192.168.8.24 slave-24</span><br><span class="line">192.168.8.25 slave-25</span><br></pre></td></tr></table></figure>

<h3 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h3><ul>
<li>所有虚机分发 cloudera cm 和 cdh</li>
<li>所有虚机优化 swappiness 和 透明大页面，本文下部有</li>
<li>master 安装 cm全部， slave 安装 jdk，cm daemons， cm agent</li>
<li>所有虚拟机安装zsh（可选）</li>
</ul>
<h3 id="公钥登录"><a href="#公钥登录" class="headerlink" title="公钥登录"></a>公钥登录</h3><p>公钥要分发到所有slave机器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@your_email.com&quot;</span> -b 4096</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub username@hostname</span><br></pre></td></tr></table></figure>


<h2 id="cloudera-manager"><a href="#cloudera-manager" class="headerlink" title="cloudera-manager"></a>cloudera-manager</h2><p>使用当前最新版本 <code>6.3.1</code>， 只需要在master上安装。网络原因，可使用 清华的代理 <code>https://cloudera.proxy.ustclug.org/cm6/6.3.1/redhat7/yum/RPMS/x86_64/</code> 。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="手工rpm方式-推荐"><a href="#手工rpm方式-推荐" class="headerlink" title="手工rpm方式 (推荐)"></a>手工rpm方式 (推荐)</h4><ul>
<li><p>下载如下的包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cloudera-manager-agent-6.3.1-1466458.el7.x86_64.rpm</span><br><span class="line">cloudera-manager-daemons-6.3.1-1466458.el7.x86_64.rpm</span><br><span class="line">cloudera-manager-server-6.3.1-1466458.el7.x86_64.rpm</span><br><span class="line">cloudera-manager-server-db-2-6.3.1-1466458.el7.x86_64.rpm</span><br><span class="line">oracle-j2sdk1.8-1.8.0+update181-1.x86_64.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装<br>到下载目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y ./*.rpm</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="yum方式-看网络"><a href="#yum方式-看网络" class="headerlink" title="yum方式 (看网络)"></a>yum方式 (看网络)</h4><p><a href="https://cloudera.proxy.ustclug.org/cm6/6.3.1/redhat7/yum/cloudera-manager.repo">yum文件</a></p>
<h4 id="cloudera-manager-installer-bin-安装-看网络"><a href="#cloudera-manager-installer-bin-安装-看网络" class="headerlink" title="cloudera-manager-installer.bin 安装  (看网络)"></a>cloudera-manager-installer.bin 安装  (看网络)</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ wget https://cloudera.proxy.ustclug.org/cm6/6.3.1/cloudera-manager-installer.bin</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">chmod</span> u+x cloudera-manager-installer.bin</span><br><span class="line"></span><br><span class="line">$ sudo ./cloudera-manager-installer.bin</span><br></pre></td></tr></table></figure>


<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><h4 id="安装完成目录"><a href="#安装完成目录" class="headerlink" title="安装完成目录"></a>安装完成目录</h4><ul>
<li><p>cdh<br><code>/opt/cloudera/</code></p>
</li>
<li><p>jdk<br><code>/usr/java/</code></p>
</li>
<li><p>cloudera<br><code>/var/lib/cloudera-scm-*</code></p>
</li>
</ul>
<h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><p>cm 安装成功后,重启系统, 大约 1min,<br>服务为 <code>cloudera-scm-agent.service</code> 和 <code>cloudera-scm-server.service</code><br>localhost:7180 可访问, 初始账户 admin， 密码 admin</p>
<h3 id="cm-daemons，-cm-agent"><a href="#cm-daemons，-cm-agent" class="headerlink" title="cm daemons， cm agent"></a>cm daemons， cm agent</h3><p>slave 都安装好 jdk，cm daemons， cm agent，<br>可以避免 下载速度慢<br>将 master上的<br>    cloudera-manager-agent-6.3.1-1466458.el7.x86_64.rpm<br>    cloudera-manager-daemons-6.3.1-1466458.el7.x86_64.rpm<br>    oracle-j2sdk1.8-1.8.0+update181-1.x86_64.rpm<br>copy 到 slave上，像master 一样安装。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y cloudera-manager-daemons-6.3.1-1466458.el7.x86_64.rpm cloudera-manager-agent-6.3.1-1466458.el7.x86_64.rpm oracle-j2sdk1.8-1.8.0+update181-1.x86_64.rpm</span><br></pre></td></tr></table></figure>


<p>注意：<br>cloudera-scm 必须拥有 &#x2F;opt&#x2F;cloudera 路径的所有权。 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R cloudera-scm:cloudera-scm /opt/cloudera</span><br></pre></td></tr></table></figure>

<p>安装完成重启系统。</p>
<h2 id="CDH-6-3-2"><a href="#CDH-6-3-2" class="headerlink" title="CDH 6.3.2"></a>CDH 6.3.2</h2><p>parcels(离线) 方式， 注意一定要检测到 所需的cdh<br>仅需要在master安装</p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>默认是内存数据库，如果上生产，建议还是关系数据库。<br><a href="https://docs.cloudera.com/documentation/enterprise/6/latest/topics/cm_ig_installing_configuring_dbs.html">官方文档</a></p>
<h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a><a href="https://docs.cloudera.com/documentation/enterprise/6/latest/topics/cm_ig_mysql.html#cmig_topic_5_5_3">Mysql</a></h4><h5 id="java-驱动"><a href="#java-驱动" class="headerlink" title="java 驱动"></a>java 驱动</h5><p>可去清华镜像下载</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf mysql-connector-java-5.1.46.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/share/java/</span><br><span class="line"><span class="built_in">cd</span> mysql-connector-java-5.1.46</span><br><span class="line"><span class="built_in">cp</span> mysql-connector-java-5.1.46-bin.jar /usr/share/java/mysql-connector-java.jar</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h5 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/opt/cloudera/cm/schema/scm_prepare_database.sh -h 192.168.11.229 mysql  --scm-host 192.168.11.220 -u root -P 3306 -p  scm scm</span><br></pre></td></tr></table></figure>

<p>如果 是本机数据库， -h 和 –扫描-host 去掉<br>依次输入 root 和 scm 密码</p>
<p>如果存在，删除embedded PostgreSQL properties</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> /etc/cloudera-scm-server/db.mgmt.properties</span><br></pre></td></tr></table></figure>


<h3 id="手工下载-CDH"><a href="#手工下载-CDH" class="headerlink" title="手工下载 CDH"></a>手工下载 CDH</h3><p>官网<br><a href="https://cloudera.proxy.ustclug.org/cdh6">https://cloudera.proxy.ustclug.org/cdh6</a></p>
<p>国内镜像<br><a href="https://cloudera.proxy.ustclug.org/cdh6/6.3.2/parcels/">https://cloudera.proxy.ustclug.org/cdh6/6.3.2/parcels/</a></p>
<p>对应操作系统下载文件</p>
<pre><code>manifest.json
CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel
CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel.sha1
CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel.sha256
</code></pre>
<p>仅需上传到 master的目录<code>/opt/cloudera/parcel-repo</code>下, <code>CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel.sha1</code> copy 一份成为 <code>CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel.sha1</code></p>
<p>注意：<br>cloudera-scm 必须拥有 &#x2F;opt&#x2F;cloudera 路径的所有权，否则 cloudera manage 会无法识别 CDH。</p>
<p>一旦出现，如下操作。 如再不能识别，重启master操作系统。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R cloudera-scm:cloudera-scm /opt/cloudera</span><br><span class="line">systemctl stop cloudera-scm-agent.service</span><br><span class="line">systemctl restart cloudera-scm-server.service</span><br><span class="line"><span class="comment"># wait 30s ?</span></span><br><span class="line">systemctl restart cloudera-scm-agent.service</span><br></pre></td></tr></table></figure>

<p>如果仍然无法识别， </p>
<h3 id="CM-图形安装"><a href="#CM-图形安装" class="headerlink" title="CM 图形安装"></a>CM 图形安装</h3><p>cloudera express</p>
<p><img src="/images/hadoop/cm1.png"><br><img src="/images/hadoop/cm2.png"><br><img src="/images/hadoop/cm3.png"><br><img src="/images/hadoop/cm4.png"><br><img src="/images/hadoop/cm5.png"><br><img src="/images/hadoop/cm6.png"><br><img src="/images/hadoop/cm7.png"><br><img src="/images/hadoop/cm8.png"><br><img src="/images/hadoop/cm9.png"><br><img src="/images/hadoop/cm10.png"><br><img src="/images/hadoop/cm11.png"><br>需要解决详细报告内的问题。</p>
<ul>
<li><p>swappiness</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">vm.swappiness=10</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

</li>
<li><p>透明大页面压缩</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"></span><br><span class="line">vim /etc/rc.local</span><br><span class="line"># add </span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/images/hadoop/cm12.png"></p>
<p>如果 slave 安装异常，<br>解决方法：</p>
<ul>
<li>检查 &#x2F;etc&#x2F;hosts</li>
<li>重启agent<br><code>systemctl restart cloudera-scm-agent</code></li>
</ul>
<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Configurator not found</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">slave1: Host with invalid Cloudera Manager GUID is detected</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置 cm_guid</span></span><br><span class="line"><span class="built_in">rm</span> /var/lib/cloudera-scm-agent/cm_guid</span><br><span class="line">systemctl restart cloudera-scm-agent.service</span><br></pre></td></tr></table></figure>


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000020188183?utm_source=tag-newest">CDH离线搭建</a></p>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>bigData</tag>
        <tag>hadoop</tag>
        <tag>cloudera</tag>
        <tag>CDH</tag>
      </tags>
  </entry>
  <entry>
    <title>flink 集群架构原理</title>
    <url>/2021/10/18/hadoop/flink1/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>flink 集群架构原理</li>
<li>flink 集群架构原理</li>
</ul>
<hr>
<span id="more"></span>

<h2 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h2><p><img src="/images/hadoop/flink/flink1.png"></p>
<ul>
<li>JobManager<br>管理节点，每个集群至少一个，管理整个集群计算资源，Job 管理与调度执行，以及 Checkpoint 协调。</li>
<li>TaskManager<br>每个集群有多个TM，负责计算资源提供。</li>
<li>Client<br>本地执行应用main()方法解析JobGraph 对象，并最终将JobGraph 提交到 JobManager 运行，同时监控Job 执行的状态。</li>
</ul>
<h3 id="JobManager"><a href="#JobManager" class="headerlink" title="JobManager"></a>JobManager</h3><h3 id="TaskManager"><a href="#TaskManager" class="headerlink" title="TaskManager"></a>TaskManager</h3><h2 id="集群部署模式"><a href="#集群部署模式" class="headerlink" title="集群部署模式"></a>集群部署模式</h2>]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>bigData</tag>
        <tag>hadoop</tag>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoopHBase</title>
    <url>/2017/03/01/hadoop/hadoopHBase/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>概念</li>
<li>API 和 命令</li>
<li>整合 MapReduce</li>
</ul>
<p>HBase – Hadoop Database的简称，Google BigTable的另一种开源实现方式，就为了解决用大量廉价的机器高速存取海量数据、实现数据分布式存储提供可靠的方案。从功能上来讲，是一个种K&#x2F;V类型的 NOSQL 数据库。</p>
<p>适用于实时相应的场景。</p>
<p>……</p>
<span id="more"></span>

]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>bigData</tag>
        <tag>hadoop</tag>
        <tag>hbase</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop HA集群搭建</title>
    <url>/2021/09/18/hadoop/hadoop/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>hadoop HA集群搭建</li>
<li>前期准备</li>
<li>zookeeper</li>
<li>hadoop</li>
</ul>
<hr>
<span id="more"></span>

<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="软硬件规划"><a href="#软硬件规划" class="headerlink" title="软硬件规划"></a>软硬件规划</h3><ul>
<li><p>硬件<br><img src="/images/hadoop/hadoop/hadoop1.png"><br>所有服务器统一 4核CPU 16G内存</p>
</li>
<li><p>软件<br>CentOS 7.9<br>OpenJDK 11<br>hadoop 3.3.1</p>
</li>
<li><p>目录结构<br>安装目录和数据目录分离，软件都安装在’&#x2F;home&#x2F;hadoop’，数据都存储在’&#x2F;data&#x2F;hadoop’,系统安装时建议’&#x2F;data’单独分区。</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hadoop软件安装目录</span></span><br><span class="line">/home/hadoop/</span><br><span class="line">    ├── hadoop-3.3.1</span><br><span class="line">    ├── <span class="built_in">source</span></span><br><span class="line">    └── apache-zookeeper-3.7.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据目录</span></span><br><span class="line">/data</span><br><span class="line">    └── hadoop</span><br><span class="line">        ├── dfs</span><br><span class="line">        │   ├── data</span><br><span class="line">        │   └── name</span><br><span class="line">        ├── hdfs</span><br><span class="line">        ├── <span class="built_in">history</span></span><br><span class="line">        │   ├── <span class="keyword">done</span></span><br><span class="line">        │   └── done_intermediate</span><br><span class="line">        ├── tmp</span><br><span class="line">        ├── var</span><br><span class="line">        ├── yarn</span><br><span class="line">        │   └── nm</span><br><span class="line">        └── zk</span><br><span class="line">            ├── data</span><br><span class="line">            ├── journaldata</span><br><span class="line">            └── logs</span><br></pre></td></tr></table></figure>


<h3 id="查看系统"><a href="#查看系统" class="headerlink" title="查看系统"></a>查看系统</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /etc/redhat-release</span><br></pre></td></tr></table></figure>


<h3 id="yum源"><a href="#yum源" class="headerlink" title="yum源"></a>yum源</h3><p>使用阿里云的yum源<br><font size="" color="red">所有服务器都需操作</font></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">sed -i -e <span class="string">&#x27;/mirrors.cloud.aliyuncs.com/d&#x27;</span> -e <span class="string">&#x27;/mirrors.aliyuncs.com/d&#x27;</span> /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line"></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p><font size="" color="red">所有服务器都需操作</font></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># delete 默认 JDK</span></span><br><span class="line">yum -y remove java</span><br><span class="line"></span><br><span class="line"><span class="comment"># install OpenJDK 11</span></span><br><span class="line">yum install -y java-11-openjdk-devel.x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换 java版本</span></span><br><span class="line">alternatives --config java</span><br><span class="line">共有 2 个提供“java”的程序。</span><br><span class="line"></span><br><span class="line">  选项    命令</span><br><span class="line">-----------------------------------------------</span><br><span class="line">*+ 1           java-1.8.0-openjdk.x86_64 (/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-1.el7.x86_64/jre/bin/java)</span><br><span class="line">   2           java-11-openjdk.x86_64 (/usr/lib/jvm/java-11-openjdk-11.0.12.0.7-0.el7_9.x86_64/bin/java)</span><br><span class="line"></span><br><span class="line">按 Enter 保留当前选项[+]，或者键入选项编号：2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认版本</span></span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -la /usr/bin/java</span><br><span class="line">/usr/bin/java -&gt; /etc/alternatives/java</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -la /etc/alternatives/java</span><br><span class="line">/etc/alternatives/java -&gt; /usr/lib/jvm/java-11-openjdk-11.0.12.0.7-0.el7_9.x86_64/bin/java</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="建立目录"><a href="#建立目录" class="headerlink" title="建立目录"></a>建立目录</h3><p><font size="" color="red">所有服务器都需操作</font></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/hadoop/zk/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/hadoop/zk/journaldata</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/hadoop/zk/logs</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/hadoop/dfs/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/hadoop/dfs/name</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/hadoop/history/done</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/hadoop/history/done_intermediate</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/hadoop/yarn/nm</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/hadoop/yarn/staging</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/hadoop/tmp</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/hadoop/var</span><br></pre></td></tr></table></figure>

<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>按实际情况 <font size="" color="red">所有服务器都需操作</font><br><code>vim /etc/profile</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hadoop env -----------</span></span><br><span class="line"><span class="built_in">export</span> ZK_HOME=/home/hadoop/apache-zookeeper-3.7.0</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/home/hadoop/hadoop-3.3.1</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.12.0.7-0.el7_9.x86_64/</span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br><span class="line"><span class="comment"># export HIVE_HOME=/home/hadoop/hive-3.1.2</span></span><br><span class="line"><span class="comment"># export SPARK_HOME=/home/hadoop/spark-3.1.2-bin-hadoop3.2</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib:$(<span class="variable">$HADOOP_HOME</span>/bin/hadoop classpath):<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="comment"># export PATH=$PATH:$ZK_HOME/bin:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin/:$SPARK_HOME/bin:$SPARK_HOME/sbin:$HIVE_HOME/bin</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ZK_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin/</span><br></pre></td></tr></table></figure>
<p>立即生效<code>source /etc/profile</code></p>
<h3 id="设置主机名称"><a href="#设置主机名称" class="headerlink" title="设置主机名称"></a>设置主机名称</h3><p><font size="" color="red">所有服务器都需操作</font></p>
<ul>
<li><p>hostname<br>按规划设置hostname， 重启后生效</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>hostname与ip映射<br>可修改本机<code>/etc/hosts/</code>或在本地dns服务器上设置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hadoop</span></span><br><span class="line">192.168.5.20 hadoop-master-a</span><br><span class="line">192.168.2.26 hadoop-master-b</span><br><span class="line">192.168.5.21 hadoop-data-1</span><br><span class="line">192.168.5.22 hadoop-data-2</span><br><span class="line">192.168.5.23 hadoop-data-3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># zookeeper</span></span><br><span class="line">192.168.5.21 zk01</span><br><span class="line">192.168.5.22 zk02</span><br><span class="line">192.168.5.23 zk03</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="建立hadoop用户"><a href="#建立hadoop用户" class="headerlink" title="建立hadoop用户"></a>建立hadoop用户</h3><p><font size="" color="red">所有服务器都需操作</font></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">useradd hadoop</span><br><span class="line">passwd hadoop</span><br><span class="line"><span class="built_in">chmod</span> u+w /etc/sudoers</span><br><span class="line">vim /etc/sudoers <span class="comment">#在root ALL=(ALL)ALL下添加 hadoop ALL=(ALL) ALL</span></span><br><span class="line"><span class="built_in">chmod</span> u-w /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="built_in">chown</span> -R hadoop:hadoop /data/hadoop/</span><br></pre></td></tr></table></figure>


<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p><font size="" color="red">所有服务器都需操作</font><br>测试环境简单操作关闭防火墙， 正式环境看情况</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>

<h3 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h3><p><font size="" color="red">以下操作都是在hadoop账户进行</font></p>
<ul>
<li>在hadoop-master-a<br>上操作<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 1) 生成公私钥</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/hadoop/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/hadoop/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/hadoop/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 2）将在/home/hadoop/.ssh目录下生成公钥id_rsa.pub和私钥id_rsa将生成的秘钥，写入authorized_keys上面</span></span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line"><span class="built_in">chmod</span> 0600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li>
<li>其他4台机器上运行<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 1) 生成公私钥</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id -i hadoop-master-a <span class="comment">#可以看到hadoop-master-a上authorized_keys的变化</span></span><br></pre></td></tr></table></figure></li>
<li>同步hadoop-master-a的authorized_keys给其他机器<br><font size="" color="red">一定在hadoop-master-a用hadoop用户操作</font><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scp /home/hadoop/.ssh/authorized_keys hadoop-master-b:/home/hadoop/.ssh/</span><br><span class="line">scp /home/hadoop/.ssh/authorized_keys hadoop-data-1:/home/hadoop/.ssh/</span><br><span class="line">scp /home/hadoop/.ssh/authorized_keys hadoop-data-2:/home/hadoop/.ssh/</span><br><span class="line">scp /home/hadoop/.ssh/authorized_keys hadoop-data-3:/home/hadoop/.ssh/</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>按规划，在hadoop-data-1 上 下载 zookeeper ，<a href="https://zookeeper.apache.org/">官网</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>解压<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar xvf apache-zookeeper-3.7.0-bin.tar.gz</span><br><span class="line"><span class="built_in">mv</span> apache-zookeeper-3.7.0-bin apache-zookeeper-3.7.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果如下 ==&gt;</span></span><br><span class="line">/home/hadoop</span><br><span class="line">    ├── hadoop-3.3.1</span><br><span class="line">    ├── <span class="built_in">source</span></span><br><span class="line">    ├── spark-3.1.2-bin-hadoop3.2</span><br><span class="line">    └── apache-zookeeper-3.7.0</span><br></pre></td></tr></table></figure></li>
<li>目录<br>建立zookeeper的数据、日志目录<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/data</span><br><span class="line">└── hadoop</span><br><span class="line">    ├── dfs</span><br><span class="line">    │   ├── data</span><br><span class="line">    │   └── name</span><br><span class="line">    ├── hdfs</span><br><span class="line">    ├── <span class="built_in">history</span></span><br><span class="line">    │   ├── <span class="keyword">done</span></span><br><span class="line">    │   └── done_intermediate</span><br><span class="line">    ├── tmp</span><br><span class="line">    ├── var</span><br><span class="line">    ├── yarn</span><br><span class="line">    │   └── nm</span><br><span class="line">    └── zk</span><br><span class="line">        ├── data</span><br><span class="line">        ├── journaldata</span><br><span class="line">        └── logs</span><br></pre></td></tr></table></figure></li>
<li>配置<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/hadoop/apache-zookeeper-3.7.0/conf/</span><br><span class="line">$ <span class="built_in">cp</span> zoo_sample.cfg zoo.cfg</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">configuration.xsl  log4j.properties  zoo.cfg  zoo_sample.cfg</span><br><span class="line"></span><br><span class="line">$ vim zoo.cfg</span><br><span class="line"><span class="comment"># 编辑zoo.cfg内容如下</span></span><br><span class="line">dataDir=/data/hadoop/zk/data/</span><br><span class="line">dataLogDir=/data/hadoop/zk/logs</span><br><span class="line">server.1=zk01:2888:3888</span><br><span class="line">server.2=zk02:2888:3888</span><br><span class="line">server.3=zk03:2888:3888</span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line">clientPort=2181</span><br><span class="line">quorumListenOnAllIPs=<span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>分发配置<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scp -r /home/hadoop/apache-zookeeper-3.7.0 hadoop-data-2:/home/hadoop/</span><br><span class="line">scp -r /home/hadoop/apache-zookeeper-3.7.0 hadoop-data-3:/home/hadoop/</span><br><span class="line"></span><br><span class="line"><span class="comment">#分别在hadoop-data-1, hadoop-data-2, hadoop-data-3上面配置myid文件</span></span><br><span class="line">[hadoop@hadoop-data-1 hadoop]$ <span class="built_in">echo</span> 1 &gt; /data/hadoop/zk/data/myid</span><br><span class="line">[hadoop@hadoop-data-2 hadoop]$ <span class="built_in">echo</span> 2 &gt; /data/hadoop/zk/data/myid</span><br><span class="line">[hadoop@hadoop-data-3 hadoop]$ <span class="built_in">echo</span> 3 &gt; /data/hadoop/zk/data/myid</span><br></pre></td></tr></table></figure></li>
<li>启动<br>分别在hadoop-data-1, hadoop-data-2, hadoop-data-3 启动zookeeper<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop-data-1 hadoop]$ /home/hadoop/apache-zookeeper-3.7.0/bin/zkServer.sh start</span><br><span class="line">[hadoop@hadoop-data-2 hadoop]$ /home/hadoop/apache-zookeeper-3.7.0/bin/zkServer.sh start</span><br><span class="line">[hadoop@hadoop-data-3 hadoop]$ /home/hadoop/apache-zookeeper-3.7.0/bin/zkServer.sh start</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>登录主机<code>hadoop-master-a</code>， 配置文件主要在 <code>/home/hadoop/hadoop-3.3.1/etc/hadoop</code> 目录里</p>
<h4 id="环境变量-hadoop-env-sh"><a href="#环境变量-hadoop-env-sh" class="headerlink" title="环境变量 hadoop-env.sh"></a>环境变量 <code>hadoop-env.sh</code></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.12.0.7-0.el7_9.x86_64/</span><br></pre></td></tr></table></figure>
<h4 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--指定hdfs的nameservice为chinauh，需要和core-site.xml中的保持一致 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>chinauh<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- chinauh下面有两个NameNode，分别是 nn1 ，nn2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.chinauh<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn1的RPC通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.chinauh.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master-a:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn1的http通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.chinauh.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master-a:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn2的RPC通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.chinauh.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master-b:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn2的http通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.chinauh.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master-b:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 指定NameNode的元数据在JournalNode上的存放位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://zk01:8485;zk02:8485;zk03:8485/chinauh<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hadoop/zk/journaldata<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启NameNode失败自动切换 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置失败自动切换实现方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.chinauh<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置隔离机制方法，多个机制用换行分割，即每个机制暂用一行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                    sshfence</span><br><span class="line">                    shell(/bin/true)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用sshfence隔离机制时需要ssh免登陆 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置sshfence隔离机制超时时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.connect-timeout<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DataNode进程死亡或者网络故障造成DataNode无法与NameNode通信，NameNode不会</span></span><br><span class="line"><span class="comment">             立即把该节点判定为死亡，要经过一段超时时间。HDFS默认的超时时间是10分钟+30秒，如果定</span></span><br><span class="line"><span class="comment">    义超时时间为timeout，则其计算公式为：</span></span><br><span class="line"><span class="comment">    timeout = 2 * heartbeat.recheck.interval + 10 * dfs.heartbeat.interval --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>heartbeat.recheck.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 单位：毫秒 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.heartbeat.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 单位：秒 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在日常维护hadoop集群过程中会发现这样一种现象：某个节点由于网络故障或者</span></span><br><span class="line"><span class="comment">             DataNode进程死亡，被NameNode判定为死亡，HDFS马上自动开始数据块的容错拷贝，</span></span><br><span class="line"><span class="comment">    当该节点重新加入到集群中，由于该节点的数据并没有损坏，导致集群中某些block的</span></span><br><span class="line"><span class="comment">    备份数超过了设定数值。默认情况下要经过1个小时的时间才会对这些冗余block进行清理。</span></span><br><span class="line"><span class="comment">    而这个时长与数据块报告时间有关。DataNode会定期将该节点上的所有block信息报告给</span></span><br><span class="line"><span class="comment">    NameNode，默认间隔1小时。下面的参数可以修改报告时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.blockreport.intervalMsec<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>Determines block reporting interval in milliseconds.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定磁盘预留多少空间，防止磁盘被撑满用完，单位为bytes --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.du.reserved<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>10240000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-data-1:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hadoop/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Path on the local filesystem where theNameNode stores the namespace and transactions logs</span><br><span class="line">            persistently.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hadoop/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma separated list of paths on the localfilesystem of a DataNode where it should store its</span><br><span class="line">            blocks.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>need not permissions<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--NameNode有一个工作线程池用来处理客户端的远程过程调用及集群守护进程的调用。处理程序数量越多意味着要更大的池来处理来自不同DataNode的并发心跳以及客户端并发的元数据操作。对于大集群或者有大量客户端的集群来说，通常需要增大参数dfs.namenode.handler.count的默认值10。设置该值的一般原则是将其设置为集群大小的自然对数乘以20，即20logN，N为集群大小。</span></span><br><span class="line"><span class="comment">如果该值设的太小，明显的状况就是DataNode在连接NameNode的时候总是超时或者连接被拒绝，但NameNode的远程过程调用队列很大时，远程过程调用延时就会加大。症状之间是相互影响的，很难说修改dfs.namenode.handler.count就能解决问题，但是在查找故障时，检查一下该值的设置是必要的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.handler.count<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>35<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The number of server threads for the datanode.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--读超时时间：dfs.client.socket-timeout。默认值1分钟。</span></span><br><span class="line"><span class="comment">    写超时时间：dfs.datanode.socket.write.timeout。默认8分钟。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.socket-timeout<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>600000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里设置Hadoop允许打开最大文件数，默认4096，不设置的话会提示xcievers exceeded错误--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.max.transfer.threads<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>409600<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!---块大小--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.blocksize<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>134217728<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>node2文件系统HDFS块大小为128M<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://chinauh<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>io.file.buffer.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>131072<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>该属性值单位为KB，131072KB即为默认的 64M<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定zookeeper地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>zk01:2181,zk02:2181,zk03:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启RM高可用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定RM的cluster id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yrc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.recovery.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.store.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.automatic-failover.zk-base-path<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/yarn-leader-election<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.client.failover-proxy-provider<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.client.ConfiguredRMFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定RM的名字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>rm1,rm2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分别指定RM的地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master-b<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master-a<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定zk集群地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>zk01:2181,zk02:2181,zk03:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///data/hadoop/yarn/nm<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the applications manager interface in the RM.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname.rm1&#125;:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the applications manager interface in the RM.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname.rm2&#125;:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the scheduler interface.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname.rm1&#125;:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the scheduler interface.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname.rm2&#125;:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The http address of the RM1 web application.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname.rm1&#125;:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The http address of the RM2 web application.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname.rm2&#125;:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The https adddress of the RM web application.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.https.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname.rm1&#125;:8090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The https adddress of the RM web application.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.https.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname.rm2&#125;:8090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname.rm1&#125;:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname.rm2&#125;:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the RM admin interface.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname.rm1&#125;:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the RM admin interface.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname.rm2&#125;:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>12288<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">discription</span>&gt;</span>每个节点可用内存,单位MB,默认8182MB<span class="tag">&lt;/<span class="name">discription</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.minmum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">discription</span>&gt;</span>每个节点可用内存,单位MB,默认8182MB<span class="tag">&lt;/<span class="name">discription</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-pmem-ratio<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>12288<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>使用命令：[hadoop@hadoop-master-a ~]$ hadoop classpath 获取到<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.application.classpath<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            /home/hadoop/hadoop-3.3.1/etc/hadoop:/home/hadoop/hadoop-3.3.1/share/hadoop/common/lib/*:/home/hadoop/hadoop-3.3.1/share/hadoop/common/*:/home/hadoop/hadoop-3.3.1/share/hadoop/hdfs:/home/hadoop/hadoop-3.3.1/share/hadoop/hdfs/lib/*:/home/hadoop/hadoop-3.3.1/share/hadoop/hdfs/*:/home/hadoop/hadoop-3.3.1/share/hadoop/mapreduce/*:/home/hadoop/hadoop-3.3.1/share/hadoop/yarn:/home/hadoop/hadoop-3.3.1/share/hadoop/yarn/lib/*:/home/hadoop/hadoop-3.3.1/share/hadoop/yarn/*</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意 <code>yarn.nodemanager.resource.memory-mb</code>， <code>yarn.scheduler.minimum-allocation-mb</code>， <code>yarn.scheduler.maximum-allocation-mb</code> 根据服务器内存调整。</p>
<h4 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">       Licensed under the Apache License, Version 2.0 (the <span class="string">&quot;License&quot;</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- Put site-specific property overrides <span class="keyword">in</span> this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hadoop-data-1:10020&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;MR JobHistory Server管理的日志的存放位置&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hadoop-data-1:19888&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;查看历史服务器已经运行完的Mapreduce作业记录的web地址，需要启动该服务才行&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.app.mapreduce.am.staging-dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/data/hadoop/yarn/staging&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.jobhistory.done-dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;<span class="variable">$&#123;yarn.app.mapreduce.am.staging-dir&#125;</span>/done&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;MR JobHistory Server管理的日志的存放位置,默认:/mr-history/done&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.jobhistory.intermediate-done-dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;<span class="variable">$&#123;yarn.app.mapreduce.am.staging-dir&#125;</span>/done_intermediate&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;MapReduce作业产生的日志存放位置，默认值:/mr-history/tmp&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapred.local.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/data/hadoop/var&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="workers"><a href="#workers" class="headerlink" title="workers"></a>workers</h4><p>在hadoop-master-a节点的workers文件内把localhost删除，加入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop-data-1</span><br><span class="line">hadoop-data-2</span><br><span class="line">hadoop-data-3</span><br></pre></td></tr></table></figure>
<h4 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h4><p>将&#x2F;home&#x2F;hadoop&#x2F;hadoop-3.3.1拷贝到集群其他机器上面</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ scp -r /home/hadoop/hadoop-3.3.1 hadoop-master-b:/home/hadoop/</span><br><span class="line">$ scp -r /home/hadoop/hadoop-3.3.1 hadoop-data-1:/home/hadoop/</span><br><span class="line">$ scp -r /home/hadoop/hadoop-3.3.1 hadoop-data-2:/home/hadoop/</span><br><span class="line">$ scp -r /home/hadoop/hadoop-3.3.1 hadoop-data-3:/home/hadoop/</span><br></pre></td></tr></table></figure>




<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="zookeeper上-格式化hadoop-ha目录"><a href="#zookeeper上-格式化hadoop-ha目录" class="headerlink" title="zookeeper上 格式化hadoop-ha目录"></a>zookeeper上 格式化hadoop-ha目录</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在hadoop-master-a 上 格式化</span></span><br><span class="line">[hadoop@hadoop-master-a hadoop]$ hdfs zkfc -formatZK</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>类似这样成功<br><img src="/images/hadoop/hadoop/hadoop2.png"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#验证：检查zookeeper上是否已经有Hadoop HA目录，在任意一台zk节点上面</span></span><br><span class="line"><span class="variable">$ZK_HOME</span>/bin/zkCli.sh -server zk01:2181</span><br><span class="line"><span class="comment">#在打开的zk终端shell中，输入</span></span><br><span class="line">[zk: zk01:2181(CONNECTED) 2] <span class="built_in">ls</span> /</span><br><span class="line">[hadoop-ha, zookeeper]</span><br><span class="line">[zk: zk01:2181(CONNECTED) 3] <span class="built_in">ls</span> /hadoop-ha </span><br><span class="line">[chinauh]</span><br></pre></td></tr></table></figure>

<h4 id="journalnode"><a href="#journalnode" class="headerlink" title="journalnode"></a>journalnode</h4><p>启动namenode日志同步服务journalnode，所有ZooKeeper节点均启动，<br>journal 会监听 8485 端口， <code>namenode -format</code> 会连接此服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop-data-1 ~]$ <span class="variable">$HADOOP_HOME</span>/bin/hdfs --daemon start journalnode</span><br><span class="line">WARNING: /home/hadoop/hadoop-3.3.1/logs does not exist. Creating.</span><br><span class="line"></span><br><span class="line">[hadoop@hadoop-data-1 ~]$ jps</span><br><span class="line">27429 Jps</span><br><span class="line">8233 QuorumPeerMain</span><br><span class="line">27372 JournalNode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他zk节点</span></span><br><span class="line">[hadoop@hadoop-data-2 root]$ <span class="variable">$HADOOP_HOME</span>/bin/hdfs --daemon start journalnode</span><br><span class="line">[hadoop@hadoop-data-3 root]$ <span class="variable">$HADOOP_HOME</span>/bin/hdfs --daemon start journalnode</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="启动hadoop"><a href="#启动hadoop" class="headerlink" title="启动hadoop"></a>启动hadoop</h4><ul>
<li>主namenode节点<br>在主namenode节点<code>hadoop-master-a</code>格式化NAMENODE，并启动namenode<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop-master-a ~]$ <span class="variable">$HADOOP_HOME</span>/bin/hdfs namenode -format</span><br><span class="line">[hadoop@hadoop-master-a ~]$ <span class="variable">$HADOOP_HOME</span>/bin/hdfs --daemon start namenode</span><br><span class="line">[hadoop@hadoop-master-a ~]$ jps</span><br><span class="line">29461 NameNode</span><br><span class="line">29541 Jps</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>备namenode<br>在备namenode节点同步元数据，并启动namenode 服务，此前一定要先启动主namenode<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop-master-b ~]$ <span class="variable">$HADOOP_HOME</span>/bin/hdfs namenode -bootstrapStandby</span><br></pre></td></tr></table></figure>
<img src="/images/hadoop/hadoop/hadoop3.png"><br>启动<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop-master-b ~]$ <span class="variable">$HADOOP_HOME</span>/bin/hdfs --daemon start namenode</span><br><span class="line">[hadoop@hadoop-master-b ~]$ jps</span><br><span class="line">24882 NameNode</span><br><span class="line">24966 Jps</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="ZKFC"><a href="#ZKFC" class="headerlink" title="ZKFC"></a>ZKFC</h4><p>在所有namenode节点上，启动DFSZKFailoverController<br>主namenode</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop-master-a ~]$ <span class="variable">$HADOOP_HOME</span>/bin/hdfs --daemon start zkfc</span><br><span class="line"></span><br><span class="line">[hadoop@hadoop-master-a ~]$ jps</span><br><span class="line">1045 Jps</span><br><span class="line">984 DFSZKFailoverController</span><br><span class="line">462 NameNode</span><br></pre></td></tr></table></figure>
<p>备namenode</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop-master-b ~]$ <span class="variable">$HADOOP_HOME</span>/bin/hdfs --daemon start zkfc</span><br><span class="line">[hadoop@hadoop-master-b ~]$ jps</span><br><span class="line">24882 NameNode</span><br><span class="line">25171 DFSZKFailoverController</span><br><span class="line">25212 Jps</span><br></pre></td></tr></table></figure>

<h4 id="datanode服务"><a href="#datanode服务" class="headerlink" title="datanode服务"></a>datanode服务</h4><p>在集群任意节点，启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop-master-a ~]$ <span class="variable">$HADOOP_HOME</span>/bin/hdfs --workers --daemon start datanode   <span class="comment">#启动所有的datanode节点</span></span><br><span class="line"><span class="comment">#  $HADOOP_HOME/bin/hdfs --daemon start datanode启动单个datanode</span></span><br></pre></td></tr></table></figure>

<p>在datanode验证</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop-data-3 etc]$ jps</span><br><span class="line">6050 JournalNode</span><br><span class="line">8579 Jps</span><br><span class="line">15398 QuorumPeerMain</span><br><span class="line">8471 DataNode</span><br></pre></td></tr></table></figure>
<p>DataNode进程已经启动。</p>
<h4 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h4><ul>
<li><p>主resourcemanager</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop-master-b ~]$ <span class="variable">$HADOOP_HOME</span>/bin/yarn --daemon start resourcemanager</span><br><span class="line">[hadoop@hadoop-master-b ~]$ jps</span><br><span class="line">25393 ResourceManager</span><br><span class="line">24882 NameNode</span><br><span class="line">25171 DFSZKFailoverController</span><br><span class="line">25637 Jps</span><br></pre></td></tr></table></figure>
</li>
<li><p>备resourcemanager</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop-master-a ~]$ <span class="variable">$HADOOP_HOME</span>/bin/yarn --daemon start resourcemanager</span><br><span class="line">[hadoop@hadoop-master-a ~]$ jps</span><br><span class="line">1331 Jps</span><br><span class="line">984 DFSZKFailoverController</span><br><span class="line">1261 ResourceManager</span><br><span class="line">462 NameNode</span><br></pre></td></tr></table></figure>
</li>
<li><p>nodemanager</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动NodeManager</span></span><br><span class="line">[hadoop@hadoop-master-a ~]$ <span class="variable">$HADOOP_HOME</span>/bin/yarn --workers --daemon start nodemanager</span><br><span class="line"></span><br><span class="line"><span class="comment">#在NodeManager节点中</span></span><br><span class="line">[hadoop@hadoop-data-3 etc]$ jps</span><br><span class="line">6050 JournalNode</span><br><span class="line">8724 NodeManager</span><br><span class="line">15398 QuorumPeerMain</span><br><span class="line">8471 DataNode</span><br><span class="line">8844 Jps</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul>
<li>主namenode<br><a href="http://hadoop-master-a:50070/">http://hadoop-master-a:50070/</a><br><img src="/images/hadoop/hadoop/hadoop4.png"></li>
<li>备namenode<br><a href="http://hadoop-master-b:50070/">http://hadoop-master-b:50070/</a><br><img src="/images/hadoop/hadoop/hadoop5.png"></li>
<li>yarn Applications<br><a href="http://hadoop-master-b:8088/cluster">http://hadoop-master-b:8088/cluster</a><br><img src="/images/hadoop/hadoop/hadoop6.png"></li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1 datanode 报告</span></span><br><span class="line">[hadoop@hadoop-data-3 ~]$ <span class="variable">$HADOOP_HOME</span>/bin/hdfs dfsadmin -report</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 重新格式化，</span></span><br><span class="line"><span class="comment">#先删除logs下所有文件后，</span></span><br><span class="line"><span class="comment">#然后删除/data/hadoop自身及所属目录 除zk，</span></span><br><span class="line"><span class="comment">#然后重新建回/data/hadoop等8个目录</span></span><br><span class="line"><span class="comment">#然后 $HADOOP_HOME/bin/hdfs namenode -format</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 获取一个NameNode节点的HA状态</span></span><br><span class="line">[hadoop@hadoop-master-a ~]$ <span class="variable">$HADOOP_HOME</span>/bin/hdfs haadmin -getServiceState nn1</span><br><span class="line">active</span><br><span class="line">[hadoop@hadoop-master-a ~]$ <span class="variable">$HADOOP_HOME</span>/bin/hdfs haadmin -getServiceState nn2</span><br><span class="line">standby</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#4 获取resourcemanager的HA状态</span></span><br><span class="line">[hadoop@hadoop-master-b ~]$ <span class="variable">$HADOOP_HOME</span>/bin/yarn rmadmin -getServiceState rm2</span><br><span class="line">standby</span><br><span class="line">[hadoop@hadoop-master-b ~]$ <span class="variable">$HADOOP_HOME</span>/bin/yarn rmadmin -getServiceState rm1</span><br><span class="line">active</span><br><span class="line"></span><br><span class="line"><span class="comment">#5 同步journalnode与namenode</span></span><br><span class="line">某个节点部署namenode，reboot了，然后启动时发现namenode没有起来</span><br><span class="line">异常如下</span><br><span class="line">` Journal Storage Directory root= /data/hadoop/zk/journaldata/chinauh; location= null not formatted ; journal <span class="built_in">id</span>: chinauh `</span><br><span class="line">原因：大概为journalnode保存的元数据和namenode的不一致</span><br><span class="line"></span><br><span class="line">解决： 在 master namenode 上执行 `<span class="variable">$HADOOP_HOME</span>/bin/hdfs namenode -initializeSharedEdits` </span><br><span class="line">使得journalnode与namenode保持一致。再重新启动namenode就没有问题了。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/FileSystemShell.html">Hadoop 最新 文档</a></p>
<p><a href="https://blog.csdn.net/cyxinda/article/details/119646724">hadoop3.3.1搭建过程(HA)</a></p>
<p><a href="https://www.cnblogs.com/princessmeiyi/p/5238215.html">YARN 内存参数终极详解</a></p>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>bigData</tag>
        <tag>hadoop</tag>
        <tag>hadoop ha</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoopLive</title>
    <url>/2017/03/06/hadoop/hadoopHive/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>安装 Hive</li>
<li>概念</li>
<li>Hive 脚本</li>
<li>整合 MapReduce</li>
</ul>
<p>Hive 就是 Hadoop 平台的开源数据仓库， HiveQL 就是基于 HDFS 系统的 SQL 引擎， Hive 转换成多阶段的 MapReduce 任务。</p>
<p>……</p>
<span id="more"></span>


<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>下载</li>
<li><code>HIVE_HOME</code> 环境变量</li>
<li><code>$HIVE_HOME/bin</code> 加入 PATH 环境变量</li>
</ul>
<p>在Hadoop集群中使用Hive查询， 前提</p>
<ul>
<li>Hadoop 必须存在于 PATH 环境变量中， 或者 <code>HADOOP_HOME</code> 环境变量已经设置为 Hadoop 的安装目录</li>
<li>在 HDFS 中创建 <code>/tmp</code> 和 <code>/user/hive/warehose</code> 目录， 权限为 <code>g+w</code></li>
<li>为多个用户配置元数据存储</li>
</ul>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li><p>数据库</p>
</li>
<li><p>表<br>默认 托管表</p>
<ul>
<li>托管表</li>
<li>扩展表 external<br>  方便访问或修改 HDFS 已经存在的结构化数据。</li>
</ul>
</li>
<li><p>视图</p>
</li>
<li><p>分区<br>表分区或切片， 最好情况下， 分区的划分条件总是能够对应 where 语句的部分查询条件。<br>分区使用 HDFS 的子目录功能实现。不支持大量的子目录。</p>
</li>
<li><p>桶 bucket<br>分区中的数据可以被进一步拆分成桶。在分区数量过于庞大以至于可能导致文件系统崩溃时， 建议使用桶。<br>桶的数据是固定的， Hive使用基于列的哈希函数对数据打散， 并分发到各个不同的桶中从而完成数据的分桶过程。<br>桶也用来实现高效的Map端连接操作。</p>
</li>
<li><p>索引</p>
</li>
<li><p>序列化和反序列化</p>
</li>
</ul>
<h2 id="编译细节"><a href="#编译细节" class="headerlink" title="编译细节"></a>编译细节</h2><p>使用 <code>EXPLAIN</code> 语句。</p>
<h2 id="Hive-脚本"><a href="#Hive-脚本" class="headerlink" title="Hive 脚本"></a>Hive 脚本</h2><p>Hive查询可以在脚本中顺序执行，可以使用参数。<br>例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">load data loal inpath <span class="string">&#x27;$&#123;hiveconf:src&#125;&#x27;</span> overwrite <span class="keyword">into</span> <span class="keyword">table</span> videos;</span><br><span class="line">  </span><br><span class="line">hive <span class="operator">-</span>hiveconf src<span class="operator">=</span>data<span class="operator">/</span>videos.txt <span class="operator">-</span>f hiveql2.txt</span><br></pre></td></tr></table></figure>

<h2 id="整合-MapReduce"><a href="#整合-MapReduce" class="headerlink" title="整合 MapReduce"></a>整合 MapReduce</h2><p>大规模应用中更常见的是同时使用 MapReduce 和 Hive。 MapReduce 可以读取或写入 Hive 扩展表或 Hive 能够访问的文件。<br>在典型数据分析流程中，前端的MapReduce 接收非结构化或不规则的数据， 并转化成 Hive 可以使用的结构化数据。</p>
<ul>
<li>读取 Hive 扩展表<br>Hive 在 HDFS 中表现为文件路径。Mapper的InputFormat必须要和 Hive 表的存储格式匹配。 如果使用文本文件存储， 那么可以使用TextInputFormat。<br>如果使用2进制序列文件存储， 那么应该使用 SequenceInputFormat。</li>
<li>写入 Hive 扩展表<br>MapReduce 任务的输入目录设置为 Hive 扩展表在 HDFS 中的位置即可。扩展表的文件格式必须和MapReduce任务相匹配。<br><span style="color:red"> 特： Hive 默认使用 \0001 (CTRL+A) 作为列分隔符。</span></li>
</ul>
<h2 id="创建分区"><a href="#创建分区" class="headerlink" title="创建分区"></a>创建分区</h2><h2 id="用户定义函数"><a href="#用户定义函数" class="headerlink" title="用户定义函数"></a>用户定义函数</h2>]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>bigData</tag>
        <tag>hadoop</tag>
        <tag>live</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop MapReduce</title>
    <url>/2017/03/06/hadoop/hadoopMapReduce/</url>
    <content><![CDATA[<p>主要内容<br>hadoop MapReduce 全排序 日志 监控</p>
<p>……</p>
<span id="more"></span>

<h2 id="hadoop-I-x2F-O"><a href="#hadoop-I-x2F-O" class="headerlink" title="hadoop I&#x2F;O"></a>hadoop I&#x2F;O</h2><h3 id="键值特征"><a href="#键值特征" class="headerlink" title="键值特征"></a>键值特征</h3><ul>
<li>键和值 都可以序列化和反序列化</li>
<li>Reduce的键支持用户自定义排序</li>
</ul>
<h3 id="Writable-和-WritableComparable接口"><a href="#Writable-和-WritableComparable接口" class="headerlink" title="Writable 和 WritableComparable接口"></a>Writable 和 WritableComparable接口</h3><ul>
<li><p>Writable接口方法</p>
<ul>
<li>write<br>  序列化， 将实例中所有原始属性写道java.io.DataOutput类型的输出流。</li>
<li>readField<br>  反序列化，利用从java.io.DataInput类型的输入流中抓取的数据重新创建Writable实例。</li>
</ul>
<p>  字段顺序必须和 <code>write()</code> 和 <code>readField()</code> 方法中的顺序保持一致。</p>
</li>
<li><p>优秀实践<br><span style="color:red">Mapper 输出的键类</span>或 <span style="color:red">Reduce 输入的键类</span>都应该实现 WritableComparable接口，<br>其他所有类型（例如 Mapper<code>输入</code>使用的键和值类，Mapper<code>输出</code>的值类， Reduce<code>输出</code>的键类）</p>
</li>
</ul>
<h2 id="全排序"><a href="#全排序" class="headerlink" title="全排序"></a>全排序</h2><ol>
<li><p>reduce键的排序<br>键到reduce之前排序， 在WritableConparable键中实现排序逻辑或自定义Comparator</p>
</li>
<li><p>reduce键的转换为索引数值</p>
</li>
<li><p>自定义Partitioner</p>
</li>
<li><p>清楚reduce键的索引范围</p>
</li>
<li><p>根据reduce键的索引范围 和 reduce的数目 实现划分逻辑</p>
</li>
</ol>
<h2 id="二级分类-x2F-二次排序"><a href="#二级分类-x2F-二次排序" class="headerlink" title="二级分类&#x2F;二次排序"></a>二级分类&#x2F;二次排序</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><ul>
<li>根据键类的某些属性聚拢记录，确保根据键类的某些属性分配到相同的reduce，确保在一次reduce调用中被处理， 这些记录的键只有部分相等。</li>
<li>根据键类的某些属性排序</li>
</ul>
<h3 id="重要组件"><a href="#重要组件" class="headerlink" title="重要组件"></a>重要组件</h3><ul>
<li>自定义的WritableComparable键类<br>用于Mapper的输入和Reduce的输入</li>
<li>自定义Partitioner类<br>用来确保根据键类的某些属性分配到相同的reduce</li>
<li>Sorting Comparator<br>使用自定义的WritableComparable键类对记录进行完全排序。</li>
<li>Grouping Comparator<br>在Reduce端对键进行聚拢，确定Grouping标准，Grouping标准决定从Mapper发往Reduce的哪些值将在一次reduce调用中被使用</li>
</ul>
<h2 id="连接Join"><a href="#连接Join" class="headerlink" title="连接Join"></a>连接Join</h2><p>SQL的常用功能：连接（join），hadoop有2中方法实现：</p>
<ul>
<li><p>Mapper端连接<br>当数据集中的一个非常小的时候使用。</p>
</li>
<li><p>Reduce端连接<br>当数据集都非常大并且其中一个无法完全在内存中缓存时使用，当连接的标准是结果的数量对于任何给定的连接数据集实例都是非常小的。<br>连接的键作为Mapper的输出键， Mapper输出值还包含一个标识属性来指示这个记录（值记录）是来自哪一个记录集。</p>
</li>
</ul>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="Web界面"><a href="#Web界面" class="headerlink" title="Web界面"></a>Web界面</h3><ul>
<li><p>Job Manager Web 界面<br><a href="http://job_history_manager_host:19888/">http://job_history_manager_host:19888</a></p>
</li>
<li><p>资源管理器<br><a href="http://resource_manager_host:8088/">http://resource_manager_host:8088</a></p>
</li>
</ul>
<h3 id="命令行界面"><a href="#命令行界面" class="headerlink" title="命令行界面"></a>命令行界面</h3><p>能与命令行交互的日志文件是 $HADOOP_YARN_HOME&#x2F;bin&#x2F;yarn下的日志</p>
<p>获得整个作业日志</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$HADOOP_YARN_HOME</span>/bin/yarn logs -applicationId &lt;application i&gt;</span><br></pre></td></tr></table></figure>

<p>获得某个容器的日志</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$HADOOP_YARN_HOME</span>/bin/yarn logs -applicationId &lt;application i&gt; -containerId &lt;container <span class="built_in">id</span>&gt; -nodeAddress &lt;nodemanager ip_add:prot&gt;</span><br></pre></td></tr></table></figure>

<p>获得其他用户的作业日志</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$HADOOP_YARN_HOME</span>/bin/yarn logs -applicationId &lt;application i&gt; -appOwner &lt;user <span class="built_in">id</span>&gt; -containerId &lt;container <span class="built_in">id</span>&gt; -nodeAddress &lt;nodemanager ip_add:prot&gt;</span><br></pre></td></tr></table></figure>

<h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><p><code>yarn.log-aggregation.retain-seconds</code> : 指定多少秒后删除日志， 负数标识禁用此功能并永久保存。默认值是-1。<br><code>yarn.log-aggregation.retain-check-interval-seconds</code> : 决定日志保存检测的频率， 默认为-1, 如果该值是0或负数， 默认是yarn.log-aggregation.retain-seconds 的十分之一。<br><code>yarn.nodemanager.log.retain-seconds</code> : 当日志是非聚集日志时， 日志在本地目录的保存时间， 默认10800秒， 3小时。</p>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>开源 Ambari</p>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>bigData</tag>
        <tag>hadoop</tag>
        <tag>全排序</tag>
      </tags>
  </entry>
  <entry>
    <title>spark集群初体验</title>
    <url>/2020/04/30/hadoop/spark%E9%9B%86%E7%BE%A4%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>spark集群初体验</li>
</ul>
<hr>
<span id="more"></span>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">spark-submit --class.org.apache.spark.examples.SparkPi \</span><br><span class="line">--master yarn \</span><br><span class="line">--mun-executors 1 \</span><br><span class="line">--driver-memory 1g \</span><br><span class="line">--executor-cores 1 \</span><br><span class="line">--conf <span class="string">&quot;spark.app.name=SparkPi&quot;</span> \</span><br><span class="line">/opt/cloudera/ xx .jar</span><br></pre></td></tr></table></figure>


<p>run-example SparkPi</p>
<h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><ul>
<li><p>内存不足，在cm里配置yarn</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn.scheduler.maximum-allocation-mb</span><br><span class="line">yarn.nodemanager.resource.memory-mb</span><br></pre></td></tr></table></figure>
</li>
<li><p>dfs</p>
</li>
</ul>
<p>如果直接 root 执行，会有如下错误</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰─<span class="comment"># spark-shell</span></span><br><span class="line">Setting default <span class="built_in">log</span> level to <span class="string">&quot;WARN&quot;</span>.</span><br><span class="line">To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</span><br><span class="line">20/02/27 16:47:23 ERROR spark.SparkContext: Error initializing SparkContext.</span><br><span class="line">org.apache.hadoop.security.AccessControlException: Permission denied: user=root, access=WRITE, inode=<span class="string">&quot;/user&quot;</span>:hdfs:supergroup:drwxr-xr-x</span><br></pre></td></tr></table></figure>

<p>查看</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰─<span class="comment"># hadoop fs -ls /                                                                                                 1 ↵</span></span><br><span class="line">Found 3 items</span><br><span class="line">drwxr-xr-x   - hbase hbase               0 2020-02-27 15:49 /hbase</span><br><span class="line">drwxrwxrwt   - hdfs  supergroup          0 2020-02-27 01:22 /tmp</span><br><span class="line">drwxr-xr-x   - hdfs  supergroup          0 2020-02-27 01:22 /user</span><br></pre></td></tr></table></figure>

<p>解决方案<br>You need to have a user home directory on HDFS. Log as the HDFS user and create a home dir for root.<br>其他用户类似。</p>
<p>hadoop的用户是hdfs， 默认是不能直接登录的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -u hdfs hadoop fs -<span class="built_in">mkdir</span> /user/root  </span><br><span class="line">sudo -u hdfs hadoop fs -<span class="built_in">chown</span> root:root /user/root</span><br></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰─<span class="comment">#  hadoop fs -ls /user</span></span><br><span class="line">Found 6 items</span><br><span class="line">drwxrwxrwx   - mapred hadoop              0 2020-02-27 01:21 /user/history</span><br><span class="line">drwxrwxr-t   - hive   hive                0 2020-02-27 01:21 /user/hive</span><br><span class="line">drwxrwxr-x   - hue    hue                 0 2020-02-27 01:22 /user/hue</span><br><span class="line">drwxr-xr-x   - root   root                0 2020-02-27 17:27 /user/root</span><br><span class="line">drwxr-x--x   - spark  spark               0 2020-02-27 16:59 /user/spark</span><br><span class="line">drwxr-xr-x   - hdfs   supergroup          0 2020-02-27 01:20 /user/yarn</span><br></pre></td></tr></table></figure>

<p>然后root用户可以执行 <code>spark-shell</code></p>
<p>其实直接用 spark 用户执行就可以。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰─<span class="comment"># sudo -u spark spark-shell</span></span><br><span class="line">Setting default <span class="built_in">log</span> level to <span class="string">&quot;WARN&quot;</span>.</span><br><span class="line">To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</span><br><span class="line">20/02/27 17:31:33 WARN cluster.YarnSchedulerBackend<span class="variable">$YarnSchedulerEndpoint</span>: Attempted to request executors before the AM has registered!</span><br><span class="line">20/02/27 17:31:33 WARN lineage.LineageWriter: Lineage directory /var/log/spark/lineage doesn<span class="string">&#x27;t exist or is not writable. Lineage for this application will be disabled.</span></span><br><span class="line"><span class="string">Spark context Web UI available at http://master-23:4040</span></span><br><span class="line"><span class="string">Spark context available as &#x27;</span>sc<span class="string">&#x27; (master = yarn, app id = application_1582792452399_0004).</span></span><br><span class="line"><span class="string">Spark session available as &#x27;</span>spark<span class="string">&#x27;.</span></span><br><span class="line"><span class="string">Welcome to</span></span><br><span class="line"><span class="string">      ____              __</span></span><br><span class="line"><span class="string">     / __/__  ___ _____/ /__</span></span><br><span class="line"><span class="string">    _\ \/ _ \/ _ `/ __/  &#x27;</span>_/</span><br><span class="line">   /___/ .__/\_,_/_/ /_/\_\   version 2.4.0-cdh6.3.2</span><br><span class="line">      /_/</span><br><span class="line"></span><br><span class="line">Using Scala version 2.11.12 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_181)</span><br><span class="line">Type <span class="keyword">in</span> expressions to have them evaluated.</span><br><span class="line">Type :<span class="built_in">help</span> <span class="keyword">for</span> more information.</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/FileSystemShell.html">Hadoop 3.2 文档</a></p>
<h2 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h2><p>弹性分布式数据集（Resilient Distribution Dataset）<br>数据集合</p>
<h3 id="创建RDD"><a href="#创建RDD" class="headerlink" title="创建RDD"></a>创建RDD</h3><ul>
<li>SparkContext 的 parallelize</li>
<li>读外部数据（HDFS，消息队列等）</li>
</ul>
<p>Pair RDD键值对操作<br><a href="https://blog.csdn.net/u014646662/article/details/84673920">https://blog.csdn.net/u014646662/article/details/84673920</a><br><a href="https://blog.csdn.net/JasonDing1354/article/details/46845585">https://blog.csdn.net/JasonDing1354/article/details/46845585</a></p>
<h2 id="spark-sql"><a href="#spark-sql" class="headerlink" title="spark sql"></a>spark sql</h2>]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>bigData</tag>
        <tag>hadoop</tag>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn集群架构原理</title>
    <url>/2021/10/14/hadoop/yarn/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>yarn集群架构原理</li>
</ul>
<hr>
<span id="more"></span>

<h2 id="主要组件"><a href="#主要组件" class="headerlink" title="主要组件"></a>主要组件</h2><p><img src="/images/hadoop/hadoop/yarn1.png"></p>
<ul>
<li><p>ResouManager(NM):<br>负责处理客户端请求<br>监控 NodeManager<br>启动和监控 APPlicationMaster<br>资源的分配和调度 </p>
</li>
<li><p>NodeManager:<br>管理单个Worker节点上的资源;<br>处理来自ResourceManager的命令<br>处理来自ApplicationMaster的命令<br>汇报资源状态 </p>
</li>
<li><p>ApplicationMaster:<br>负责数据的切分<br>为应用申请计算资源，并分配给Task<br>任务的监控与容错<br>运行在Worker节点上 </p>
</li>
<li><p>Container:<br>资源抽象，封装了节点上的多维度资源，如CPU，内存，网络资源等。</p>
</li>
<li><p>Dispatcher<br>整体的设计思路是一个生产者和消费者模型，支持的多生产者和多消费者的模式。</p>
</li>
</ul>
<h2 id="资源调度"><a href="#资源调度" class="headerlink" title="资源调度"></a>资源调度</h2><p><img src="/images/hadoop/hadoop/yarn2.jpg"></p>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>bigData</tag>
        <tag>hadoop</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 逃逸分析 (Escape Analysis)</title>
    <url>/2018/09/30/java/EscapeAnalysis/</url>
    <content><![CDATA[<p><em><strong>主要内容</strong></em></p>
<p>逃逸分析的基本行为就是分析对象动态作用域：当一个对象在方法中被定义后，它可能被外部方法所引用，称为方法逃逸。甚至还有可能被外部线程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。<br>即时编译器（Just-in-time Compilation，JIT）判断对象是否逃逸的依据，一是对象是否被存入堆中（静态字段或者堆中对象的实例字段），二是对象是否被传入未知代码中。<br>逃逸分析 在 方法内联后才进行。</p>
<p>如果对象没有逃逸，即时编译器对代码进行性能优化。</p>
<span id="more"></span>

<h2 id="逃逸方式"><a href="#逃逸方式" class="headerlink" title="逃逸方式"></a>逃逸方式</h2><p>show you code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Escape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object obj;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">globalVariableEscape</span><span class="params">()</span> &#123;  <span class="comment">// 给全局变量赋值，发生逃逸</span></span><br><span class="line">        obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">methodEscape</span><span class="params">()</span> &#123;  <span class="comment">// 方法返回值，发生逃逸</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodNoEscape</span><span class="params">()</span> &#123;  <span class="comment">// 方法返回值，没有逃逸</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">instanceEscape</span><span class="params">()</span> &#123;  <span class="comment">// 实例引用发生逃逸</span></span><br><span class="line">        test(<span class="built_in">this</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="基于逃逸分析的优化"><a href="#基于逃逸分析的优化" class="headerlink" title="基于逃逸分析的优化"></a>基于逃逸分析的优化</h2><p>一旦对象没有逃逸，那么可能做如下优化： 字段访问优化（锁消除、栈上分配以及标量替换）， 字段存储优化， 死代码消除， 循环优化</p>
<h3 id="字段访问优化"><a href="#字段访问优化" class="headerlink" title="字段访问优化"></a>字段访问优化</h3><ul>
<li><p>锁消除<br>线程同步本身比较耗，如果确定一个对象不会逃逸出线程，无法被其它线程访问到，那该对象的读写就不会存在竞争，对这个变量的同步措施就可以消除掉。单线程中是没有锁竞争。（锁和锁块内的对象不会逃逸出线程就可以把这个同步块取消）</p>
</li>
<li><p>栈上分配<br>如果一个对象仅在某线程中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配。<br>一旦对象分配到栈上，方法执行完后自动销毁，而不需要垃圾回收的介入，从而提高系统性能。</p>
</li>
<li><p>标量替换<br>将原本连续分配的对象拆散为一个个单独的字段，分布在栈上或者寄存器中。我的理解就是 将对象拆解为局部变量。<br>减少对 对象以及对象内属性 的访问，  因为他们都涉及到访问内存，而局部变量 访问 栈和控制计数器， 不需要垃圾回收的介入。<br><br>比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">bar</span><span class="params">(Foo o, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> o.a + x;</span><br><span class="line">    <span class="keyword">return</span> o.a + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在上面这段代码中，实例字段将被读取两次。即时编译器会将第一次读取的值缓存起来，并且替换第二次字段读取操作，以节省一次内存访问。</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">bar</span><span class="params">(Foo o, <span class="type">int</span> x)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> o.a; </span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> t + x;</span><br><span class="line"><span class="keyword">return</span> t + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意 <code>volatile</code> 修饰的字段 不会被完全优化</p>
</li>
</ul>
<h3 id="字段存储优化"><a href="#字段存储优化" class="headerlink" title="字段存储优化"></a>字段存储优化</h3><p>编译器还将消除冗余的存储节点。<br>如果一个字段先后被存储了两次，而且这两次存储之间没有对第一次存储内容的读取，那么即时编译器可以将第一个字段存储给消除掉。当然，如果所存储的字段被标记为 volatile，那么即时编译器也不能将冗余的存储操作消除掉。这种情况看似很蠢，但实际上并不少见，比如说两个存储之间隔着许多其他代码，或者因为方法内联的缘故，将两个存储操作（如构造器中字段的初始化以及随后的更新）纳入同一个编译单元里。</p>
<h3 id="死代码消除"><a href="#死代码消除" class="headerlink" title="死代码消除"></a>死代码消除</h3><p>即删除无用字段<br>死存储还有一种变体，即在部分程序路径上有冗余存储。<br>另一种死代码消除则是不可达分支消除。不可达分支就是任何程序路径都不可到达的分支，我们之前已经多次接触过了。</p>
<h3 id="循环无关代码外提"><a href="#循环无关代码外提" class="headerlink" title="循环无关代码外提"></a>循环无关代码外提</h3><p>所谓的循环无关代码（Loop-invariant Code），指的是循环中值不变的表达式。如果能够在不改变程序语义的情况下，将这些循环无关代码提出循环之外，那么程序便可以避免重复执行这些表达式，从而达到性能提升的效果。</p>
<h2 id="逃逸分析并不成熟"><a href="#逃逸分析并不成熟" class="headerlink" title="逃逸分析并不成熟"></a>逃逸分析并不成熟</h2><p>无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。</p>
<p>一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Escape Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 内置函数式接口</title>
    <url>/2017/10/17/java/FunctionalInterface/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>函数式接口</p>
<p><em>更新历史</em><br>无</p>
<span id="more"></span>

<hr>
<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>函数式接口就是只有一个方法的接口，如Runnable、Callable、Comparable都称作函数式接口。<br>java8专门新增 <code>FunctionalInterface</code> 来注解, 防止破坏函数式接口的定义； 默认方法和静态方法不会破坏函数式接口的定义。</p>
<h2 id="内置函数式接口"><a href="#内置函数式接口" class="headerlink" title="内置函数式接口"></a>内置函数式接口</h2><p>java 8 之前 有 Runnable、Callable、Comparable 等； java8提供了一批内置的函数式接口， 跟 Lambda 表达式关系密切。</p>
<table>
<thead>
<tr>
<th>接口</th>
<th>参数</th>
<th>返回类型</th>
<th>抽象方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Predicate&lt;T&gt;</td>
<td>T</td>
<td>boolean</td>
<td>test(T) -&gt; boolean</td>
<td>输入某个值，输出bool值，用于对某值进行判定。并可以使用 negate(非)， and 和 or 连接</td>
</tr>
<tr>
<td>Consumer&lt;T&gt;</td>
<td>T</td>
<td>void</td>
<td>accept(T) -&gt; void</td>
<td>输入某值，无输出。用于消费某值</td>
</tr>
<tr>
<td>Function&lt;T,R&gt;</td>
<td>T</td>
<td>R</td>
<td>apply(T) -&gt; R</td>
<td>输入某类型值，输出另种类型值，用于类型转化等</td>
</tr>
<tr>
<td>Supplier&lt;T&gt;</td>
<td>None</td>
<td>T</td>
<td>get() -&gt; T</td>
<td>无输入，输出某值，用于生产某值</td>
</tr>
<tr>
<td>UnaryOperator&lt;T&gt;</td>
<td>T</td>
<td>T</td>
<td></td>
<td>输入某类型值，输出同类型值，用于值的同类型转化，如对值进行四则运算等</td>
</tr>
<tr>
<td>BinaryOperator&lt;T&gt;</td>
<td>(T,T)</td>
<td>T</td>
<td></td>
<td>输入两个某类型值，输出一个同类型值，用于两值合并等</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java 8</tag>
        <tag>jdk8</tag>
        <tag>FunctionalInterface</tag>
        <tag>内置函数式接口</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 Streams</title>
    <url>/2017/10/12/java/Streams/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>Java 8 Streams 在集合和其他数据集上运行函数式操作。<br>所有流计算都有一种共同的结构：它们具有一个流来源、0 或多个中间操作，以及一个终止操作。</p>
<p><em>更新历史</em><br>无</p>
<span id="more"></span>

<hr>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Collection.stream()</td>
<td>使用一个集合的元素创建一个流。</td>
</tr>
<tr>
<td>Stream.of(T…)</td>
<td>使用传递给工厂方法的参数创建一个流。</td>
</tr>
<tr>
<td>Stream.of(T[])</td>
<td>使用一个数组的元素创建一个流。</td>
</tr>
<tr>
<td>Stream.empty()</td>
<td>创建一个空流。</td>
</tr>
<tr>
<td>Stream.iterate(T first, BinaryOperator<T> f)</td>
<td>创建一个包含序列 first, f(first), f(f(first)), … 的无限流</td>
</tr>
<tr>
<td>Stream.iterate(T first, Predicate<T> test, BinaryOperator<T> f)</td>
<td>（仅限 Java 9）类似于 Stream.iterate(T first, BinaryOperator<T> f)，但流在测试预期返回 false 的第一个元素上终止。</td>
</tr>
<tr>
<td>Stream.generate(Supplier<T> f)</td>
<td>使用一个生成器函数创建一个无限流。</td>
</tr>
<tr>
<td>IntStream.range(lower, upper)</td>
<td>创建一个由下限到上限（不含）之间的元素组成的 IntStream。</td>
</tr>
<tr>
<td>IntStream.rangeClosed(lower, upper)</td>
<td>创建一个由下限到上限（含）之间的元素组成的 IntStream。</td>
</tr>
<tr>
<td>BufferedReader.lines()</td>
<td>创建一个有来自 BufferedReader 的行组成的流。</td>
</tr>
<tr>
<td>BitSet.stream()</td>
<td>创建一个由 BitSet 中的设置位的索引组成的 IntStream。</td>
</tr>
<tr>
<td>Stream.chars()</td>
<td>创建一个与 String 中的字符对应的 IntStream。</td>
</tr>
</tbody></table>
<h2 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h2><p>负责将一个流转换为另一个流</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>filter(Predicate<T>)</td>
<td>接受一个断言（谓词，返回boolean的函数）作为参数，并返回一个包括所有符合断言的元素的流</td>
</tr>
<tr>
<td>map(Function&lt;T, U&gt;)</td>
<td>映射， 将提供的函数应用于流的元素，并将其映射成一个新的元素</td>
</tr>
<tr>
<td>flatMap(Function&lt;T, Stream<U>&gt;</td>
<td>映射，扁平， 将提供的函数应用于流元素后获得的流元素， 即将一个流中的每个值都换成另一个流，然后把所有的流连接成为一个流</td>
</tr>
<tr>
<td>distinct()</td>
<td>已删除了重复的流元素</td>
</tr>
<tr>
<td>sorted()</td>
<td>按自然顺序排序的流元素</td>
</tr>
<tr>
<td>Sorted(Comparator<T>)</td>
<td>按提供的比较符排序的流元素</td>
</tr>
<tr>
<td>limit(long)</td>
<td>截断至所提供长度的流元素</td>
</tr>
<tr>
<td>skip(long)</td>
<td>丢弃了前 N 个元素的流元素， 与 <code>limit</code> 互补</td>
</tr>
<tr>
<td>takeWhile(Predicate<T>)</td>
<td>（仅限 Java 9）在第一个提供的预期不是 true 的元素处阶段的流元素</td>
</tr>
<tr>
<td>dropWhile(Predicate<T>)</td>
<td>（仅限 Java 9）丢弃了所提供的预期为 true 的初始元素分段的流元素</td>
</tr>
</tbody></table>
<h2 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h2><p>结束流</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>forEach(Consumer<T> action)</td>
<td>将提供的操作应用于流的每个元素。</td>
</tr>
<tr>
<td>toArray()</td>
<td>使用流的元素创建一个数组。</td>
</tr>
<tr>
<td>reduce(…)</td>
<td>将流的元素聚合为一个汇总值。</td>
</tr>
<tr>
<td>collect(…)</td>
<td>将流的元素聚合到一个汇总结果容器中。</td>
</tr>
<tr>
<td>min(Comparator<T>)</td>
<td>通过比较符返回流的最小元素。</td>
</tr>
<tr>
<td>max(Comparator<T>)</td>
<td>通过比较符返回流的最大元素。</td>
</tr>
<tr>
<td>count()</td>
<td>返回流的大小。</td>
</tr>
<tr>
<td>{any,all,none}Match(Predicate<T>)</td>
<td>返回流的任何&#x2F;所有元素是否与提供的预期相匹配。</td>
</tr>
<tr>
<td>findFirst()</td>
<td>返回流的第一个元素（如果有）。</td>
</tr>
<tr>
<td>findAny()</td>
<td>返回流的任何元素（如果有）。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java 8</tag>
        <tag>jdk8</tag>
        <tag>Streams</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 范型(generics in java)</title>
    <url>/2020/04/03/java/generics/</url>
    <content><![CDATA[<p>发现一段牛(装)逼的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R&gt; Observable&lt;R&gt; <span class="title function_">compose</span><span class="params">(Transformer&lt;? <span class="built_in">super</span> T, ? extends R&gt; transformer)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ((Transformer&lt;T, R&gt;) transformer).call(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常用的泛型含义：</p>
<ul>
<li>T - Type（类型）</li>
<li>R - Result（结果）</li>
<li>K - Key（键）</li>
<li>V - Value（值）</li>
<li>E - Element (元素)</li>
<li>N - Number（数字）</li>
<li>? - 通配符, 不确定类型</li>
<li>extends - 上边界</li>
<li>super - 下边界</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>generics</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 新特性 概要</title>
    <url>/2017/06/30/java/java8/</url>
    <content><![CDATA[<p><em><strong>主要内容</strong></em></p>
<p>　　Java 8是Java自Java 5之后的最重要的版本。这个版本包含语言、编译器、库、工具和JVM等方面的十多个新特性。</p>
<p>　　外面已经有很多资料， 我在这里仅仅做概要记录，提醒自己多使用新特性， 提高效率和性能， 详细内容参考附录。</p>
<span id="more"></span>

<h2 id="语言的新特性"><a href="#语言的新特性" class="headerlink" title="语言的新特性"></a>语言的新特性</h2><h3 id="接口的默认方法和静态方法"><a href="#接口的默认方法和静态方法" class="headerlink" title="接口的默认方法和静态方法"></a>接口的默认方法和静态方法</h3><p>java 8 的 接口， 不再是 老程序员 脑海中的接口了， java 8 允许在接口中有具体的实现： <code>默认方法</code>和<code>静态方法</code></p>
<ul>
<li>默认方法<br>使用关键字 <code>default</code> 定义, 已经是具体的实现， 不需要实现类去现象， 可以被继承或者覆写</li>
</ul>
<h3 id="Lambda表达式和函数式接口"><a href="#Lambda表达式和函数式接口" class="headerlink" title="Lambda表达式和函数式接口"></a>Lambda表达式和函数式接口</h3><p>java 的 Lambda 表达式借助<code>函数接口</code>实现，可以替换以前的匿名内部类。</p>
<ul>
<li><p>函数接口<br><code>@FunctionalInterface</code> 注解 <code>函数接口</code>， 函数接口指的是只有一个函数的接口，这样的接口可以隐式转换为Lambda表达式。<br>默认方法和静态方法不会破坏函数式接口的定义。</p>
</li>
<li><p>Lambda<br>有了 Lambda， 你就可以把一段代码(函数) 当做参数 传给 另一个函数。<br>可以去掉以前大量的匿名内部类。</p>
</li>
</ul>
<h3 id="重复注解"><a href="#重复注解" class="headerlink" title="重复注解"></a>重复注解</h3><p>同一个地方多次使用同一个注解。</p>
<p>注解几乎可以使用在任何元素上：局部变量、接口类型、超类和接口实现类，甚至可以用在函数的异常定义上。</p>
<h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><h3 id="参数名称"><a href="#参数名称" class="headerlink" title="参数名称"></a>参数名称</h3><p>默认关闭， 需要带 <code>-parameters</code> 参数编译</p>
<p>Maven 的使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">compilerArgument</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">compilerArgument</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="官方库"><a href="#官方库" class="headerlink" title="官方库"></a>官方库</h2><h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><p>Optional是一个容器：存放T类型的值或者null。它提供了一些有用的接口来避免显式的null检查</p>
<h3 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h3><p>Stream API（java.util.stream）将函数式编程引入了Java库中。<br>这是目前为止最大的一次对Java库的完善！！！！<br>极大得简化了集合操作</p>
<p><a href="/2017/10/12/java/Streams/">简要API</a><br><a href="http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps">java.util.stream</a><br><a href="https://wizardforcel.gitbooks.io/java8-tutorials/content/Java%208%20%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E6%97%85%20%E4%BD%BF%E7%94%A8%20Stream%20API%20%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88.html">使用Stream API处理集合</a></p>
<h3 id="Date-x2F-Time-API-JSR-310"><a href="#Date-x2F-Time-API-JSR-310" class="headerlink" title="Date&#x2F;Time API(JSR 310)"></a>Date&#x2F;Time API(JSR 310)</h3><p>新的时间和日期管理API<br><a href="http://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html">java.time</a></p>
<h3 id="Nashorn-JavaScript引擎"><a href="#Nashorn-JavaScript引擎" class="headerlink" title="Nashorn JavaScript引擎"></a>Nashorn JavaScript引擎</h3><h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><p><code>java.util.Base64</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Base64.getEncoder().encodeXxxxx()</span><br><span class="line">Base64.getDecoder().decode()</span><br><span class="line"></span><br><span class="line">Base64.getUrlEncoder()</span><br><span class="line">Base64.getUrlDecoder()</span><br><span class="line"></span><br><span class="line">Base64.getMimeEncoder()</span><br><span class="line">Base64.getMimeDecoder()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="并行数组"><a href="#并行数组" class="headerlink" title="并行数组"></a>并行数组</h3><p><code>parallelSort()</code><br>parallexXxx系列的方法</p>
<h2 id="新的Java工具"><a href="#新的Java工具" class="headerlink" title="新的Java工具"></a>新的Java工具</h2><h3 id="Nashorn引擎：jjs"><a href="#Nashorn引擎：jjs" class="headerlink" title="Nashorn引擎：jjs"></a>Nashorn引擎：jjs</h3><p>jjs是一个基于标准Nashorn引擎的命令行工具，可以接受js源码并执行。</p>
<h3 id="类依赖分析器：jdeps"><a href="#类依赖分析器：jdeps" class="headerlink" title="类依赖分析器：jdeps"></a>类依赖分析器：jdeps</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jdeps org.springframework.core-3.0.5.RELEASE.jar</span><br><span class="line"></span><br><span class="line">org.springframework.core-3.0.5.RELEASE.jar -&gt; C:\Program Files\Java\jdk1.8.0\jre\lib\rt.jar</span><br><span class="line">   org.springframework.core (org.springframework.core-3.0.5.RELEASE.jar)</span><br><span class="line">      -&gt; java.io                                            </span><br><span class="line">      -&gt; java.lang                                          </span><br><span class="line">      -&gt; java.lang.annotation                               </span><br><span class="line">      -&gt; java.lang.ref                                      </span><br><span class="line">      -&gt; java.lang.reflect                                  </span><br><span class="line">      -&gt; java.util                                          </span><br><span class="line">      -&gt; java.util.concurrent                               </span><br><span class="line">      -&gt; org.apache.commons.logging                         not found</span><br><span class="line">      -&gt; org.springframework.asm                            not found</span><br><span class="line">      -&gt; org.springframework.asm.commons                    not found</span><br><span class="line">   org.springframework.core.annotation (org.springframework.core-3.0.5.RELEASE.jar)</span><br><span class="line">      -&gt; java.lang                                          </span><br><span class="line">      -&gt; java.lang.annotation                               </span><br><span class="line">      -&gt; java.lang.reflect                                  </span><br><span class="line">      -&gt; java.util</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="JVM的新特性"><a href="#JVM的新特性" class="headerlink" title="JVM的新特性"></a>JVM的新特性</h2><p>使用Metaspace（JEP 122）代替持久代（PermGen space）。<br>在JVM参数方面，使用 -XX:MetaSpaceSize和-XX:MaxMetaspaceSize代替原来的-XX:PermSize和-XX:MaxPermSize</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><a href="http://www.oracle.com/technetwork/java/javase/documentation/jdk8-doc-downloads-2133158.html">Java SE Development Kit 8 Documentation</a><br><a href="https://wizardforcel.gitbooks.io/java8-tutorials/content/index.html">Java 8 教程汇总</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java 8</tag>
        <tag>jdk8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 日期和时间</title>
    <url>/2018/05/30/java/java8JSR310/</url>
    <content><![CDATA[<p><em><strong>主要内容</strong></em></p>
<p>　　java8 新的日期和时间库， 新API全在java.time包中， 你值得拥有～～～</p>
<span id="more"></span>

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="类概览-："><a href="#类概览-：" class="headerlink" title="类概览 ："></a>类概览 ：</h3><p><img src="/images/jsr310.png"></p>
<p>与旧的API对应关系<br><img src="/images/jsr310.2.png"></p>
<h3 id="方法概览"><a href="#方法概览" class="headerlink" title="方法概览"></a>方法概览</h3><p>该包的API提供了大量相关的方法，这些方法一般有一致的方法前缀：</p>
<p><code>of</code>   ：静态工厂方法。<br><code>parse</code>：静态工厂方法，关注于解析, DateTimeFormatter 格式化。<br><code>get</code>  ：获取某些东西的值。<br><code>is</code>   ：检查某些东西的是否是true。<br><code>with</code> ：不可变的setter等价物。<br><code>plus</code> ：加一些量到某个对象。<br><code>minus</code>：从某个对象减去一些量。<br><code>to</code>   ：转换到另一个类型。<br><code>at</code>   ：把这个对象与另一个对象组合起来，例如： date.atTime(time)。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeIntroduction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testClock</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//时钟提供给我们用于访问某个特定 时区的 瞬时时间、日期 和 时间的。  </span></span><br><span class="line">        <span class="type">Clock</span> <span class="variable">c1</span> <span class="operator">=</span> Clock.systemUTC(); <span class="comment">//系统默认UTC时钟（当前瞬时时间 System.currentTimeMillis()）  </span></span><br><span class="line">        System.out.println(c1.millis()); <span class="comment">//每次调用将返回当前瞬时时间（UTC）  </span></span><br><span class="line">        <span class="type">Clock</span> <span class="variable">c2</span> <span class="operator">=</span> Clock.systemDefaultZone(); <span class="comment">//系统默认时区时钟（当前瞬时时间）  </span></span><br><span class="line">        <span class="type">Clock</span> <span class="variable">c31</span> <span class="operator">=</span> Clock.system(ZoneId.of(<span class="string">&quot;Europe/Paris&quot;</span>)); <span class="comment">//巴黎时区  </span></span><br><span class="line">        System.out.println(c31.millis()); <span class="comment">//每次调用将返回当前瞬时时间（UTC）  </span></span><br><span class="line">        <span class="type">Clock</span> <span class="variable">c32</span> <span class="operator">=</span> Clock.system(ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));<span class="comment">//上海时区  </span></span><br><span class="line">        System.out.println(c32.millis());<span class="comment">//每次调用将返回当前瞬时时间（UTC）  </span></span><br><span class="line">        <span class="type">Clock</span> <span class="variable">c4</span> <span class="operator">=</span> Clock.fixed(Instant.now(), ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));<span class="comment">//固定上海时区时钟  </span></span><br><span class="line">        System.out.println(c4.millis());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(c4.millis()); <span class="comment">//不变 即时钟时钟在那一个点不动  </span></span><br><span class="line">        <span class="type">Clock</span> <span class="variable">c5</span> <span class="operator">=</span> Clock.offset(c1, Duration.ofSeconds(<span class="number">2</span>)); <span class="comment">//相对于系统默认时钟两秒的时钟  </span></span><br><span class="line">        System.out.println(c1.millis());</span><br><span class="line">        System.out.println(c5.millis());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testInstant</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//瞬时时间 相当于以前的System.currentTimeMillis()  </span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant1</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        System.out.println(instant1.getEpochSecond());<span class="comment">//精确到秒 得到相对于1970-01-01 00:00:00 UTC的一个时间  </span></span><br><span class="line">        System.out.println(instant1.toEpochMilli()); <span class="comment">//精确到毫秒  </span></span><br><span class="line">        <span class="type">Clock</span> <span class="variable">clock1</span> <span class="operator">=</span> Clock.systemUTC(); <span class="comment">//获取系统UTC默认时钟  </span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant2</span> <span class="operator">=</span> Instant.now(clock1);<span class="comment">//得到时钟的瞬时时间  </span></span><br><span class="line">        System.out.println(instant2.toEpochMilli());</span><br><span class="line">        <span class="type">Clock</span> <span class="variable">clock2</span> <span class="operator">=</span> Clock.fixed(instant1, ZoneId.systemDefault()); <span class="comment">//固定瞬时时间时钟  </span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant3</span> <span class="operator">=</span> Instant.now(clock2);<span class="comment">//得到时钟的瞬时时间  </span></span><br><span class="line">        System.out.println(instant3.toEpochMilli());<span class="comment">//equals instant1  </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//字符串时间戳 生成 Instant</span></span><br><span class="line">        <span class="comment">//不能直接转，DateTimeFormatter必须加上timezone 再转，add the default timezone to the formatter  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dateTime</span> <span class="operator">=</span> <span class="string">&quot;2018-06-07 10:19:00&quot;</span>;</span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">format</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).withZone(ZoneId.systemDefault());</span><br><span class="line">        Instant.from(format.parse(dateTime)).getEpochSecond()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLocalDateTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用默认时区时钟瞬时时间创建 Clock.systemDefaultZone() --&gt;即相对于 ZoneId.systemDefault()默认时区  </span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"><span class="comment">//自定义时区  </span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now2</span> <span class="operator">=</span> LocalDateTime.now(ZoneId.of(<span class="string">&quot;Europe/Paris&quot;</span>));</span><br><span class="line">        System.out.println(now2);<span class="comment">//会以相应的时区显示日期  </span></span><br><span class="line"><span class="comment">//自定义时钟  </span></span><br><span class="line">        <span class="type">Clock</span> <span class="variable">clock</span> <span class="operator">=</span> Clock.system(ZoneId.of(<span class="string">&quot;Asia/Dhaka&quot;</span>));</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now3</span> <span class="operator">=</span> LocalDateTime.now(clock);</span><br><span class="line">        System.out.println(now3);<span class="comment">//会以相应的时区显示日期  </span></span><br><span class="line"><span class="comment">//不需要写什么相对时间 如java.util.Date 年是相对于1900 月是从0开始  </span></span><br><span class="line"><span class="comment">//2018-12-31 23:59  </span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">d1</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2018</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">59</span>);</span><br><span class="line"><span class="comment">//年月日 时分秒 纳秒  </span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">d2</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2018</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">11</span>);</span><br><span class="line"><span class="comment">//使用瞬时时间 + 时区  </span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">d3</span> <span class="operator">=</span> LocalDateTime.ofInstant(Instant.now(), ZoneId.systemDefault());</span><br><span class="line">        System.out.println(d3);</span><br><span class="line"><span class="comment">//解析String---&gt;LocalDateTime  </span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">d4</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2018-12-31T23:59&quot;</span>);</span><br><span class="line">        System.out.println(d4);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">d5</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2018-12-31T23:59:59.999&quot;</span>);<span class="comment">//999毫秒 等价于999000000纳秒  </span></span><br><span class="line">        System.out.println(d5);</span><br><span class="line"><span class="comment">//使用DateTimeFormatter API 解析 和 格式化  </span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">d6</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2018/12/31 23:59:59&quot;</span>, formatter);</span><br><span class="line">        System.out.println(formatter.format(d6));</span><br><span class="line"><span class="comment">//时间获取  </span></span><br><span class="line">        System.out.println(d6.getYear());</span><br><span class="line">        System.out.println(d6.getMonth());</span><br><span class="line">        System.out.println(d6.getDayOfYear());</span><br><span class="line">        System.out.println(d6.getDayOfMonth());</span><br><span class="line">        System.out.println(d6.getDayOfWeek());</span><br><span class="line">        System.out.println(d6.getHour());</span><br><span class="line">        System.out.println(d6.getMinute());</span><br><span class="line">        System.out.println(d6.getSecond());</span><br><span class="line">        System.out.println(d6.getNano());</span><br><span class="line"><span class="comment">//时间增减  </span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">d7</span> <span class="operator">=</span> d6.minusDays(<span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">d8</span> <span class="operator">=</span> d7.plus(<span class="number">1</span>, IsoFields.QUARTER_YEARS);</span><br><span class="line"><span class="comment">//LocalDate 即年月日 无时分秒  </span></span><br><span class="line"><span class="comment">//LocalTime即时分秒 无年月日  </span></span><br><span class="line"><span class="comment">//API和LocalDateTime类似就不演示了  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testZonedDateTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//即带有时区的date-time 存储纳秒、时区和时差（避免与本地date-time歧义）。  </span></span><br><span class="line"><span class="comment">//API和LocalDateTime类似，只是多了时差(如2018-12-20T10:35:50.711+08:00[Asia/Shanghai])  </span></span><br><span class="line">        <span class="type">ZonedDateTime</span> <span class="variable">now</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line">        <span class="type">ZonedDateTime</span> <span class="variable">now2</span> <span class="operator">=</span> ZonedDateTime.now(ZoneId.of(<span class="string">&quot;Europe/Paris&quot;</span>));</span><br><span class="line">        System.out.println(now2);</span><br><span class="line"><span class="comment">//其他的用法也是类似的 就不介绍了  </span></span><br><span class="line">        <span class="type">ZonedDateTime</span> <span class="variable">z1</span> <span class="operator">=</span> ZonedDateTime.parse(<span class="string">&quot;2018-12-31T23:59:59Z[Europe/Paris]&quot;</span>);</span><br><span class="line">        System.out.println(z1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDuration</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//表示两个瞬时时间的时间段  </span></span><br><span class="line">        <span class="type">Duration</span> <span class="variable">d1</span> <span class="operator">=</span> Duration.between(Instant.ofEpochMilli(System.currentTimeMillis() - <span class="number">12323123</span>), Instant.now());</span><br><span class="line"><span class="comment">//得到相应的时差  </span></span><br><span class="line">        System.out.println(d1.toDays());</span><br><span class="line">        System.out.println(d1.toHours());</span><br><span class="line">        System.out.println(d1.toMinutes());</span><br><span class="line">        System.out.println(d1.toMillis());</span><br><span class="line">        System.out.println(d1.toNanos());</span><br><span class="line"><span class="comment">//1天时差 类似的还有如ofHours()  </span></span><br><span class="line">        <span class="type">Duration</span> <span class="variable">d2</span> <span class="operator">=</span> Duration.ofDays(<span class="number">1</span>);</span><br><span class="line">        System.out.println(d2.toDays());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testChronology</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//提供对java.util.Calendar的替换，提供对年历系统的支持  </span></span><br><span class="line">        <span class="type">Chronology</span> <span class="variable">c</span> <span class="operator">=</span> HijrahChronology.INSTANCE;</span><br><span class="line">        <span class="type">ChronoLocalDateTime</span> <span class="variable">d</span> <span class="operator">=</span> c.localDateTime(LocalDateTime.now());</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新旧日期转换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testNewOldDateConversion</span><span class="params">()</span>&#123;</span><br><span class="line">        Instant instant=<span class="keyword">new</span> <span class="title class_">Date</span>().toInstant();</span><br><span class="line">        Date date=Date.from(instant);</span><br><span class="line">        System.out.println(instant);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        testClock();</span><br><span class="line">        testInstant();</span><br><span class="line">        testLocalDateTime();</span><br><span class="line">        testZonedDateTime();</span><br><span class="line">        testDuration();</span><br><span class="line">        testChronology();</span><br><span class="line">        testNewOldDateConversion();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th>Java.time</th>
<th>java.util.Calendar以及Date</th>
</tr>
</thead>
<tbody><tr>
<td>流畅的API</td>
<td>不流畅的API</td>
</tr>
<tr>
<td>实例不可变</td>
<td>实例可变</td>
</tr>
<tr>
<td>线程安全</td>
<td>非线程安全</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java 8</tag>
        <tag>jdk8</tag>
        <tag>日期</tag>
        <tag>时间</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM线上调优(二)  CPU调优</title>
    <url>/2018/11/07/java/javaAnalyzer-cpu/</url>
    <content><![CDATA[<p>主要内容</p>
<p>JVM调优的工具和方法 深入浅出，分如下3节介绍，可以解决实际问题。<br>本章解决java线上CPU调优</p>
<ul>
<li><p><a href="/2018/11/06/java/javaAnalyzer/">工具介绍</a><br>公欲善其事，必先利其器<br>jps, jstat, jmap, jhat, jstack, jinfo, JConsole, VisualVM, Eclipse Memory Analyzer(MAT)</p>
</li>
<li><p><a href="/2018/11/07/java/javaAnalyzer-cpu/">CPU调优</a><br>还我CPU</p>
</li>
<li><p><a href="/2018/11/07/java/javaAnalyzer-memory/">Memory调优</a><br>吃我的吐出来</p>
</li>
</ul>
<p><em>更新历史</em></p>
<span id="more"></span>
<hr>
<h2 id="定位线程"><a href="#定位线程" class="headerlink" title="定位线程"></a>定位线程</h2><ul>
<li><p>TOP命令查看到CPU的占用情况<br>TOP –&gt; P : 按CPU使用率排序<br><img src="/images/jvm/ja_cpu_p.png"></p>
</li>
<li><p>具体线程<br>Java是一个多线程应用，进程是由多个线程构成的，上面看到的是这个进程的CPU占用率，导致这个进程CPU偏高的是其中某个或某几个线程，因而我们需要找到这些线程。<br>ps命令查看指定进程的线程情况</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps -mp &lt;pid&gt; -o THREAD,tid,time</span><br></pre></td></tr></table></figure>
<p><img src="/images/jvm/ja_cpu_thread.png"><br>线程tid为 9100 的线程，CPU占用率达到了99.8%， 就是这个线程的问题。</p>
</li>
</ul>
<h2 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h2><p>请出 <code>jstack</code> 分析具体线程。</p>
<p>** 注意： 进制转换 **<br>ps命令查看到的线程ID 9100 是十进制，<code>jstack</code> 命令输出的线程ID可能是十六进制，使用如下命令转换</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰─$ <span class="built_in">printf</span> <span class="string">&quot;%x\n&quot;</span> 9100</span><br><span class="line">238c</span><br></pre></td></tr></table></figure>

<p>然后使用 <code>jstack</code> 定位具体的问题</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰─$ jstack 9078|grep 238c -A 15</span><br><span class="line"><span class="string">&quot;Thread-0&quot;</span> <span class="comment">#10 prio=5 os_prio=0 tid=0x00007fbea0821800 nid=0x238c runnable [0x00007fbe8bbfa000]</span></span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">        at com.xxx.xxx.MyClassLoader<span class="variable">$1</span>.run(MyClassLoader.java:19)</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><img src="/images/jvm/ja_cpu_source.png"></p>
<p>最后结合源码检查就ok。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>CPU调优</tag>
        <tag>jstack</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM线上调优(三)  内存调优</title>
    <url>/2018/11/07/java/javaAnalyzer-memory/</url>
    <content><![CDATA[<p>主要内容</p>
<p>JVM调优的工具和方法 深入浅出，分如下3节介绍，可以解决实际问题。</p>
<p>本章讨论java线上内存调优</p>
<ul>
<li><p><a href="/2018/11/06/java/javaAnalyzer/">工具介绍</a><br>公欲善其事，必先利其器<br>jps, jstat, jmap, jhat, jstack, jinfo, JConsole, VisualVM, Eclipse Memory Analyzer(MAT)</p>
</li>
<li><p><a href="/2018/11/07/java/javaAnalyzer-cpu/">CPU调优</a><br>还我CPU</p>
</li>
<li><p><a href="/2018/11/07/java/javaAnalyzer-memory/">Memory调优</a><br>吃我的吐出来</p>
</li>
</ul>
<p><em>更新历史</em></p>
<span id="more"></span>

<hr>
<p>Java应用占用太多内存也有可能的确是内存硬件不足或JVM设置的太小，记得最后考虑下。</p>
<p>本文主要讨论的是Java内存泄漏。</p>
<h2 id="泄漏特征"><a href="#泄漏特征" class="headerlink" title="泄漏特征"></a>泄漏特征</h2><p>出现如下情况之一，就需要检查了</p>
<ul>
<li>OOM Out-of-Memory</li>
<li>堆(老年代)&#x2F;方法区 不停地增长，频繁FullGC</li>
<li>不明的crash</li>
<li>数据集越大，性能越低</li>
</ul>
<h2 id="泄漏原因"><a href="#泄漏原因" class="headerlink" title="泄漏原因"></a>泄漏原因</h2><ul>
<li><p>File&#x2F;Text buffers 等资源没关闭</p>
</li>
<li><p>静态集合类引用<br>静态变量的生命周期和应用程序一致，他们所引用的所有的对象也不能被释放。</p>
</li>
<li><p>监听器<br>只增加监听器，不删除</p>
</li>
<li><p>各种连接没有释放</p>
</li>
<li><p>单例模式<br>单例对象在被初始化后将在JVM的整个生命周期中存在，单例对象持有外部对象的引用，那么这个外部对象将不能被jvm正常回收</p>
</li>
<li><p>内部类和外部模块等的引用<br>非静态内部类的对象会隐式强引用其外围对象，所以在内部类未释放时，外围对象也不会被释放，从而造成内存泄漏。</p>
</li>
<li><p>集合中的可变对象修改<br>一般是HashSet, HashMap, 主键的key的hashCode变化以后，添加或者删除都是映射到不同的桶中。所以对于HashSet或者HashMap的Key，都应该是不可变类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ** 改变了 key **</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name.hashCode() + age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;Person&gt; persons = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;AAAA&quot;</span>,  <span class="number">1</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;BBBB&quot;</span>,  <span class="number">2</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;CCCC&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        persons.add(p1);</span><br><span class="line">        persons.add(p2);</span><br><span class="line">        persons.add(p3);</span><br><span class="line">        System.out.println(<span class="string">&quot;size:&quot;</span> + persons.size()); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">        p3.setAge(<span class="number">31</span>); <span class="comment">// 修改属性。</span></span><br><span class="line">        persons.remove(p3); <span class="comment">// 移除不掉.</span></span><br><span class="line">        persons.add(p3); <span class="comment">// 添加成功.</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;size:&quot;</span> + persons.size()); <span class="comment">// 4</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="OOM"><a href="#OOM" class="headerlink" title="OOM"></a>OOM</h3><p>java启动加入<code>-XX:+HeapDumpOnOutOfMemoryError</code>，发生OOM时自动生成dump文件<br>    java … -XX:+HeapDumpOnOutOfMemoryError  -XX:HeapDumpPath&#x3D;.&#x2F;oom.hprof</p>
<p>发生OOM异常时需要对该文件进行分析。把oom.hprof 下载到开发环境，使用 <code>MAT</code> 分析。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><p><code>jps</code> 找到java进程ID[pid]</p>
</li>
<li><p>top -p [pid] 查看内存使用情况</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰─$ top -p 14986</span><br><span class="line">top - 17:27:51 up 29 days,  7:59,  6 <span class="built_in">users</span>,  load average: 1.27, 0.76, 0.77</span><br><span class="line">Tasks:   1 total,   0 running,   1 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  8.8 us,  7.3 sy,  0.0 ni, 83.4 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.5 si,  0.0 st</span><br><span class="line">KiB Mem : 16287752 total,  5915300 free,  6235960 used,  4136492 buff/cache</span><br><span class="line">KiB Swap: 16784380 total, 16588028 free,   196352 used.  9302212 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                                      </span><br><span class="line">14986 sam       20   0 5682796 2.078g  51756 S 2.000 13.38 451:02.04 java                                                                                                                                         </span><br></pre></td></tr></table></figure>
</li>
<li><p>FullGC情况<br><code>jstat -gcutil [pid] 3s</code> 每3s的GC情况，主要看 FGC</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰─$ jstat -gcutil 14986 3s</span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT    CGC    CGCT     GCT   </span><br><span class="line">  0.00  51.09   9.93  61.42  93.53  90.33   2961   45.827   416  304.043     -        -  349.870</span><br><span class="line">  0.00  51.09   9.96  61.42  93.53  90.33   2961   45.827   416  304.043     -        -  349.870</span><br><span class="line">  0.00  51.09  10.18  61.42  93.53  90.33   2961   45.827   416  304.043     -        -  349.870</span><br><span class="line">  0.00  51.09  10.34  61.42  93.53  90.33   2961   45.827   416  304.043     -        -  349.870</span><br><span class="line">  0.00  51.09  11.28  61.42  93.53  90.33   2961   45.827   416  304.043     -        -  349.870</span><br><span class="line">  。。。</span><br></pre></td></tr></table></figure>
</li>
<li><p>jmap<br>查看目前的各种类型的对象创建数目和所占用内存</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰─$ jmap -histo:live 14986|more</span><br><span class="line"></span><br><span class="line"> num     <span class="comment">#instances         #bytes  class name</span></span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:        514181       53559808  [C</span><br><span class="line">   2:         90742       48738768  [B</span><br><span class="line">   3:         76202       17773512  [I</span><br><span class="line">   4:        152743       13160544  [Ljava.lang.Object;</span><br><span class="line">   5:        509711       12233064  java.lang.String</span><br><span class="line">   6:         83468        9177120  java.lang.Class</span><br><span class="line">   7:        117955        3774560  java.util.HashMap<span class="variable">$Node</span></span><br><span class="line">   8:        100076        3202432  java.util.concurrent.ConcurrentHashMap<span class="variable">$Node</span></span><br><span class="line">   9:         11155        2562688  [J</span><br><span class="line">  10:         15235        2375912  [Ljava.util.HashMap<span class="variable">$Node</span>;</span><br><span class="line">  11:         73180        2341760  com.intellij.util.text.ByteArrayCharSequence</span><br><span class="line">。。。。</span><br></pre></td></tr></table></figure>
<p>还可以生成JVM的内存dump文件，下载到本地使用 <code>MAT</code> 分析<br>  jmap -dump:format&#x3D;b,file&#x3D;文件名 [pid]</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>内存泄漏</tag>
        <tag>内存调优</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM线上调优(一) 工具介绍</title>
    <url>/2018/11/06/java/javaAnalyzer/</url>
    <content><![CDATA[<p>主要内容</p>
<p>JVM调优的工具和方法 深入浅出，分如下3节介绍，可以解决实际问题。</p>
<p>本章首先介绍各种倚天剑和屠龙刀<br>（致敬 金庸大大）</p>
<ul>
<li><p><a href="/2018/11/06/java/javaAnalyzer/">工具介绍</a><br>公欲善其事，必先利其器<br>jps, jstat, jmap, jhat, jstack, jinfo, JConsole, VisualVM, Eclipse Memory Analyzer(MAT)</p>
</li>
<li><p><a href="/2018/11/07/java/javaAnalyzer-cpu/">CPU调优</a><br>还我CPU</p>
</li>
<li><p><a href="/2018/11/07/java/javaAnalyzer-memory/">Memory调优</a><br>吃我的吐出来</p>
</li>
</ul>
<p><em>更新历史</em></p>
<span id="more"></span>
<hr>
<p>TIPs： 以下命令都尽量在启动JVM的用户环境下使用</p>
<h2 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h2><p>JVM Process Status Tool,显示指定系统内所有的HotSpot虚拟机进程。</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><pre><code>jps [-q] [-mlvV] [&lt;hostid&gt;]
</code></pre>
<p>参数都非必须</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><pre><code>-q : 只输出LVMID
-l : 输出主类全名或jar路径
-m : 输出JVM启动时传递给main()的参数
-v : 输出JVM启动时显示指定的JVM参数
</code></pre>
<h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><pre><code>╰─$ jps -l   
15346 org.jetbrains.idea.maven.server.RemoteMavenServer
15527 org.jetbrains.jps.cmdline.Launcher
14986 com.intellij.idea.Main
30074 jdk.jcmd/sun.tools.jps.Jps
18941 org.jetbrains.jps.cmdline.Launcher
</code></pre>
<h2 id="jstat-性能分析"><a href="#jstat-性能分析" class="headerlink" title="jstat 性能分析"></a>jstat 性能分析</h2><p>jstat(JVM statistics Monitoring)是用于监视虚拟机运行时状态信息的命令，类装载、内存、垃圾收集、JIT编译等数据</p>
<h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><pre><code>jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]
</code></pre>
<h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><pre><code>[option] : 操作参数
vmid : 本地虚拟机进程ID
[interval] : 连续输出的时间间隔
[count] : 连续输出的次数
</code></pre>
<h4 id="参数一览"><a href="#参数一览" class="headerlink" title="参数一览"></a>参数一览</h4><style>
table th:first-of-type {
    width: 20%;
}
</style>

<table>
<thead>
<tr>
<th>Option</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>gc</td>
<td>垃圾回收堆的行为统计。Statistics of the behavior of the garbage collected heap.</td>
</tr>
<tr>
<td>class</td>
<td>class loader的行为统计。Statistics on the behavior of the class loader.</td>
</tr>
<tr>
<td>compiler</td>
<td>HotSpt JIT编译器行为统计。Statistics of the behavior of the HotSpot Just-in-Time compiler.</td>
</tr>
<tr>
<td>gccapacity</td>
<td>各个垃圾回收代容量(young,old,perm)和他们相应的空间统计。Statistics of the capacities of the generations and their corresponding spaces.</td>
</tr>
<tr>
<td>gcutil</td>
<td>垃圾回收统计概述。Summary of garbage collection statistics.</td>
</tr>
<tr>
<td>gccause</td>
<td>垃圾收集统计概述（同-gcutil），附加最近两次垃圾回收事件的原因。Summary of garbage collection statistics (same as -gcutil), with the cause of the last and</td>
</tr>
<tr>
<td>gcnew</td>
<td>新生代行为统计。Statistics of the behavior of the new generation.</td>
</tr>
<tr>
<td>gcnewcapacity</td>
<td>新生代与其相应的内存空间的统计。Statistics of the sizes of the new generations and its corresponding spaces.</td>
</tr>
<tr>
<td>gcold</td>
<td>年老代和永生代行为统计。Statistics of the behavior of the old and permanent generations.</td>
</tr>
<tr>
<td>gcoldcapacity</td>
<td>年老代行为统计。Statistics of the sizes of the old generation.</td>
</tr>
<tr>
<td>gcpermcapacity</td>
<td>永生代行为统计。Statistics of the sizes of the permanent generation.</td>
</tr>
<tr>
<td>printcompilation</td>
<td>HotSpot编译方法统计。HotSpot compilation method statistics.</td>
</tr>
</tbody></table>
<p><code>-gc</code><br>常用命令 垃圾回收堆的行为统计</p>
<pre><code>╰─# jstat -gc 15490 3s
S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT   
8192.0 33792.0 8181.8  0.0   724992.0 592657.6  215040.0   81474.7   90880.0 86753.7 11520.0 10764.0     20    0.625   3      0.365    0.990
8192.0 33792.0 8181.8  0.0   724992.0 594107.5  215040.0   81474.7   90880.0 86753.7 11520.0 10764.0     20    0.625   3      0.365    0.990
8192.0 33792.0 8181.8  0.0   724992.0 594455.2  215040.0   81474.7   90880.0 86753.7 11520.0 10764.0     20    0.625   3      0.365    0.990
8192.0 33792.0 8181.8  0.0   724992.0 595905.2  215040.0   81474.7   90880.0 86753.7 11520.0 10764.0     20    0.625   3      0.365    0.990
</code></pre>
<p><strong>C即Capacity 总容量，U即Used 已使用的容量</strong></p>
<ul>
<li>S0C：第一个幸存区的大小</li>
<li>S1C：第二个幸存区的大小</li>
<li>S0U：第一个幸存区的使用大小</li>
<li>S1U：第二个幸存区的使用大小</li>
<li>EC：伊甸园区的大小</li>
<li>EU：伊甸园区的使用大小</li>
<li>OC：老年代大小</li>
<li>OU：老年代使用大小</li>
<li>MC：方法区大小</li>
<li>MU：方法区使用大小</li>
<li>CCSC:压缩类空间大小</li>
<li>CCSU:压缩类空间使用大小</li>
<li>YGC：年轻代垃圾回收次数</li>
<li>YGCT：年轻代垃圾回收消耗时间</li>
<li>FGC：老年代垃圾回收次数</li>
<li>FGCT：老年代垃圾回收消耗时间</li>
<li>GCT：垃圾回收消耗总时间</li>
</ul>
<p>更多可参考<a href="https://app.yinxiang.com/shard/s70/nl/17973191/9a8fdbd4-6a6b-46fb-8c70-babd70a02fcb">jstat</a> <a href="https://blog.csdn.net/maosijunzi/article/details/46049117">java高分局之jstat命令使用</a></p>
<h2 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h2><p>jinfo(JVM Configuration info)实时查看和调整虚拟机运行参数</p>
<h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h3><pre><code>jinfo &lt;option&gt; &lt;pid&gt;
</code></pre>
<h3 id="option"><a href="#option" class="headerlink" title="option"></a>option</h3><pre><code>-flag : 输出指定args参数的值
-flags : 不需要args参数，输出所有JVM参数的值
-sysprops : 输出系统属性，等同于System.getProperties()
</code></pre>
<h2 id="jmap-查看内存"><a href="#jmap-查看内存" class="headerlink" title="jmap 查看内存"></a>jmap 查看内存</h2><p>jmap(JVM Memory Map)命令用于生成heap dump文件，如果不使用这个命令，还可以使用-XX:+HeapDumpOnOutOfMemoryError参数来让虚拟机出现OOM的时候自动生成dump文件。<br>又或者在Linux系统下通过Kill-3命令发送进程退出信号“吓唬”一下虚拟机，也能拿到dump文件。<br>jmap不仅能生成dump文件，还可以查询finalize执行队列、Java堆和永久代的详细信息，如当前使用率、当前使用的是哪种收集器等。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>openjdk 需要 安装 <code>debuginfo</code>，版本需要和openjdk 一致</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum update java-1.8.0-openjdk.x86_64</span><br><span class="line">yum --enablerepo=<span class="string">&quot;*-debug*&quot;</span> install java-1.8.0-openjdk-debuginfo</span><br></pre></td></tr></table></figure>

<p>否则 异常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- unknown CollectedHeap type : class sun.jvm.hotspot.gc_interface.CollectedHeap</span><br></pre></td></tr></table></figure>

<h3 id="命令-3"><a href="#命令-3" class="headerlink" title="命令"></a>命令</h3><pre><code>jmap [option] pid
</code></pre>
<h3 id="option参数"><a href="#option参数" class="headerlink" title="option参数"></a>option参数</h3><pre><code>dump : 生成堆转储快照
finalizerinfo : 显示在F-Queue队列等待Finalizer线程执行finalizer方法的对象
heap : 显示Java堆详细信息
histo : 显示堆中对象的统计信息
clstats : 类加载的统计信息
F : 当-dump没有响应时，强制生成dump快照
</code></pre>
<h3 id="例-1"><a href="#例-1" class="headerlink" title="例"></a>例</h3><ul>
<li>-dump<br>  jmap -dump:live,format&#x3D;b,file&#x3D;dump.hprof $pid</li>
</ul>
<p>dump.hprof这个后缀是为了后续可以直接用MAT(Memory Anlysis Tool)打开。</p>
<ul>
<li><p>-finalizerinfo<br>打印等待回收对象的信息</p>
</li>
<li><p>-heap<br>打印heap的概要信息，GC使用的算法，heap的配置及wise heap的使用情况,可以用此来判断内存目前的使用情况以及垃圾回收情况</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰─<span class="comment"># jmap -heap 15490</span></span><br><span class="line">Attaching to process ID 15490, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.191-b12</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Parallel GC with 2 thread(s) //GC 方式  </span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">    MinHeapFreeRatio         = 0 //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)</span><br><span class="line">    MaxHeapFreeRatio         = 100 //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)</span><br><span class="line">    MaxHeapSize              = 4164943872 (3972.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小</span><br><span class="line">    NewSize                  = 87031808 (83.0MB) //对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小</span><br><span class="line">    MaxNewSize               = 1388314624 (1324.0MB) //对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小</span><br><span class="line">    OldSize                  = 175112192 (167.0MB) //对应jvm启动参数-XX:OldSize=&lt;value&gt;:设置JVM堆的‘老生代’的大小</span><br><span class="line">    NewRatio                 = 2 //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率</span><br><span class="line">    SurvivorRatio            = 8 //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值 </span><br><span class="line">    MetaspaceSize            = 21807104 (20.796875MB) //对应jvm启动参数-XX:MetaspaceSize=&lt;value&gt;:设置JVM堆的‘方法区’的初始大小</span><br><span class="line">    CompressedClassSpaceSize = 1073741824 (1024.0MB)</span><br><span class="line">    MaxMetaspaceSize         = 17592186044415 MB //对应jvm启动参数-XX:MaxMetaspaceSize=&lt;value&gt;:设置JVM堆的‘方法区’的最大大小</span><br><span class="line">    G1HeapRegionSize         = 0 (0.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage: //堆内存使用情况</span><br><span class="line">PS Young Generation</span><br><span class="line">Eden Space: //Eden区内存分布</span><br><span class="line">    capacity = 742391808 (708.0MB) //Eden区总容量</span><br><span class="line">    used     = 626604800 (597.576904296875MB) //Eden区已使用</span><br><span class="line">    free     = 115787008 (110.423095703125MB) //Eden区剩余容量</span><br><span class="line">    84.40351755605579% used //Eden区使用比率</span><br><span class="line">From Space: //其中一个Survivor区的内存分布</span><br><span class="line">    capacity = 8388608 (8.0MB)</span><br><span class="line">    used     = 8378128 (7.9900054931640625MB)</span><br><span class="line">    free     = 10480 (0.0099945068359375MB)</span><br><span class="line">    99.87506866455078% used</span><br><span class="line">To Space: //另一个Survivor区的内存分布</span><br><span class="line">    capacity = 34603008 (33.0MB)</span><br><span class="line">    used     = 0 (0.0MB)</span><br><span class="line">    free     = 34603008 (33.0MB)</span><br><span class="line">    0.0% used</span><br><span class="line">PS Old Generation //当前的Old区内存分布</span><br><span class="line">    capacity = 220200960 (210.0MB)</span><br><span class="line">    used     = 83430072 (79.56511688232422MB)</span><br><span class="line">    free     = 136770888 (130.43488311767578MB)</span><br><span class="line">    37.88815089634487% used</span><br><span class="line"></span><br><span class="line">38773 interned Strings occupying 4270344 bytes.</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>-histo<br>打印堆的对象统计，包括对象数、内存大小等等 （因为在dump:live前会进行full gc，如果带上live则只统计活对象，因此不加live的堆大小要大于加live堆的大小 ）</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ jmap -histo:live 15490 | more</span><br><span class="line"></span><br><span class="line"> num     <span class="comment">#instances         #bytes  class name</span></span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:        137190       15505768  [C</span><br><span class="line">   2:         10772        8598936  [B</span><br><span class="line">   3:        131166        3147984  java.lang.String</span><br><span class="line">   4:         29783        2620904  java.lang.reflect.Method</span><br><span class="line">   5:         36792        2354688  com.mysql.jdbc.ConnectionPropertiesImpl<span class="variable">$BooleanConnectionProperty</span></span><br><span class="line">   6:         72596        2323072  java.util.concurrent.ConcurrentHashMap<span class="variable">$Node</span></span><br><span class="line">   7:         17598        1948272  java.lang.Class</span><br><span class="line">   8:         14682        1766000  [Ljava.util.HashMap<span class="variable">$Node</span>;</span><br><span class="line">   9:         55163        1765216  java.util.Hashtable<span class="variable">$Entry</span></span><br><span class="line">  10:         13793        1732072  [I</span><br><span class="line">  ....</span><br></pre></td></tr></table></figure>

<p>  xml class name是对象类型，说明如下：</p>
<pre><code>  B  byte
  C  char
  D  double
  F  float
  I  int
  J  long
  Z  boolean
  [  数组，如[I表示int[]
  [L+类名 其他对象
</code></pre>
</li>
<li><p>-clstats<br>打印Java堆内存的类加载器的统计信息。对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印。</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jmap -clstats 15490</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h2><p>jhat(JVM Heap Analysis Tool)命令是与jmap搭配使用，用来分析jmap生成的dump。<br>千万下载dump文件到开发环境进行分析。<br>推荐使用 Eclipse Memory Analyzer(MAT)</p>
<h2 id="jstack-查看线程"><a href="#jstack-查看线程" class="headerlink" title="jstack 查看线程"></a>jstack 查看线程</h2><p>jstack（Stack Trace for Java）用于生成虚拟机当前时刻的线程快照（一般称为threaddump或者javacore文件）。<br>线程快照是当前java虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是<strong>定位线程出现长时间停顿</strong>的原因，如<strong>线程间死锁、死循环、请求外部资源</strong>等。<br>如果现在运行的java程序呈现停顿状态，jstack是非常有用的。</p>
<h3 id="命令-4"><a href="#命令-4" class="headerlink" title="命令"></a>命令</h3><pre><code>jstack [-l][-e] &lt;pid&gt;
</code></pre>
<h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><pre><code>-l  long listing. Prints additional information about locks
-e  extended listing. Prints additional information about threads
</code></pre>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>参考 <a href="http://www.hollischuang.com/archives/110">jstack</a></p>
<hr>
<p>以下都是可视化的工具</p>
<h2 id="JConsole"><a href="#JConsole" class="headerlink" title="JConsole"></a>JConsole</h2><p>JConsole（Java Monitoring and Management Console）是一种基于JMX的可视化监视、 管理工具</p>
<h2 id="VisualVM"><a href="#VisualVM" class="headerlink" title="VisualVM"></a>VisualVM</h2><p>大名鼎鼎的 VisualVM， 基于NetBeans平台开发，通过插件扩展支持，VisualVM可以做到</p>
<ul>
<li>显示虚拟机进程以及进程的配置、 环境信息（jps、 jinfo）。</li>
<li>监视应用程序的CPU、 GC、 堆、 方法区以及线程的信息（jstat、 jstack）。</li>
<li>dump以及分析堆转储快照（jmap、 jhat）。</li>
<li>方法级的程序运行性能分析，找出被调用最多、 运行时间最长的方法。</li>
<li>离线程序快照：收集程序的运行时配置、线程dump、内存dump等信息建立一个快照，可以将快照发送开发者处进行Bug反馈。</li>
</ul>
<p><img src="/images/jvm/ja_visualvm.jpg"></p>
<h2 id="Eclipse-Memory-Analyzer-MAT"><a href="#Eclipse-Memory-Analyzer-MAT" class="headerlink" title="Eclipse Memory Analyzer(MAT)"></a><a href="https://www.eclipse.org/mat/">Eclipse Memory Analyzer(MAT)</a></h2><p>Eclipse 出品，MAT可以对堆dump的文件进行分析，可以去detail页看线程各个对象的使用数目等情况。</p>
<ul>
<li>内存泄露报表，自动检查可能存在内存泄露的对象，通过报表展示存活的对象以及为什么他们没有被垃圾收集；</li>
<li>对象报表，对可颖对象的分析，如字符串是否定义重了，空的collection、finalizer以及弱引用等。</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jstack</tag>
        <tag>jvm</tag>
        <tag>jps</tag>
        <tag>jstat</tag>
        <tag>jmap</tag>
        <tag>jhat</tag>
        <tag>jinfo</tag>
        <tag>JConsole</tag>
        <tag>VisualVM</tag>
        <tag>MAT</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 入门到实践</title>
    <url>/2015/07/21/linux/Docker/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Java IO</title>
    <url>/2017/06/29/java/javaIO/</url>
    <content><![CDATA[<p><em><strong>主要内容</strong></em></p>
<p>　　I&#x2F;O 就是数据的输入&#x2F;输出。 Java 平台提供了丰富的类库来满足可能的I&#x2F;O操作需求。最初的java.io包， JDK 1.4 的 NIO， JDK 7 的 NIO.2。<br>　　<br>　　最早的java.io包把IO操作抽象成数据的流动，进而有了流(Stream)概念；Java NIO中把IO操作抽象成端到端的一个数据连接，进而有了通道(channel)概念。</p>
<p>　　如果需要开发高性能网络应用， Java提供的标准库所支持的抽象层次过低， 推荐Netty。</p>
<p>　　JDK 7 后都建议用 try-with-resources来使用流和通道。</p>
<span id="more"></span>

<h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p>java中 最基本的流就是在字节这个层次上处理的。</p>
<h3 id="基本输入流-InputStream"><a href="#基本输入流-InputStream" class="headerlink" title="基本输入流 InputStream"></a>基本输入流 <code>InputStream</code></h3><h4 id="数据功能"><a href="#数据功能" class="headerlink" title="数据功能"></a>数据功能</h4><p><code>read</code>方法</p>
<ul>
<li>每次读一个字节</li>
<li>字节数组缓冲区<br>最常用， 循环读取， 直到返回-1或异常</li>
<li>字节数组缓冲区和起始位置和长度</li>
</ul>
<h4 id="控制功能"><a href="#控制功能" class="headerlink" title="控制功能"></a>控制功能</h4><ul>
<li>close 关闭</li>
<li>skip 跳过指定数目的字节</li>
<li>mark 和 reset 标记和重置配合，实现流中部分内容的重复读取<br>不是所有流都支持mark， 需要用 <code>markSupperted()</code>检查</li>
<li>available 非阻塞的获取可供读取的字节数</li>
</ul>
<h3 id="基本输出流-OutputStream"><a href="#基本输出流-OutputStream" class="headerlink" title="基本输出流 OutputStream"></a>基本输出流 <code>OutputStream</code></h3><h4 id="数据功能-1"><a href="#数据功能-1" class="headerlink" title="数据功能"></a>数据功能</h4><p><code>write</code> 方法， 类似 <code>read</code> 一样， 3种重载形式：每次写入一个字节, 也可写入一个字节数组的全部或部分内容。</p>
<h4 id="控制功能-1"><a href="#控制功能-1" class="headerlink" title="控制功能"></a>控制功能</h4><ul>
<li>close 关闭</li>
<li>flush 强制保存在缓冲区的内容立即进行实际的写入操作。</li>
</ul>
<h3 id="输入流复用"><a href="#输入流复用" class="headerlink" title="输入流复用"></a>输入流复用</h3><p>两种方式：</p>
<ul>
<li>利用标记和重置<br>使用<code>BufferedInputStream</code></li>
<li>输入流转换成数据<br>直接把流中所有数据读取到一个字节数组中</li>
</ul>
<p>这两种复用流的思路一致， 就是预先把需要复用的数据保存起来。</p>
<h3 id="过滤输入输出流"><a href="#过滤输入输出流" class="headerlink" title="过滤输入输出流"></a>过滤输入输出流</h3><ul>
<li>缓冲区<br>BufferedInputStream， BufferedOutputStream</li>
<li>java基本类型支持<br>DataInputStream， DataOutputStream</li>
<li>java 基本类型和对象支持<br>ObjectInputStream， ObjectOutputStream</li>
<li>数据回流<br>PushbackInputStream， PushbackOutputStream</li>
<li>文件流<br>FileInputStream， FileOutputStream</li>
<li>管道流<br>PipedInputStream， PipedOutputStream</li>
<li>顺序连接<br>SequenceInputStream， SequenceOutputStream</li>
</ul>
<h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><p>  以上所有都是字节流， 字节流更适合机器处理。对于人来说，我们更愿意看到直接可读的字符。在在 java.io 包中还有一组类用来处理字符流,即 java.io.Reader 类和 java.io.Writer<br>类及其子类。这些字符流处理的是字符类型,而不是字节类 型。字符流适合用于处理程序中包含的文本类型的内容。<br>  创建一个字符流的最常见做法是通过一个字节流 InputStream 类或 OutputStream 类 的对象进行创建,对应的是 InputStreamReader 类和 OutputStreamWriter 类。在从字节流转换成字符流时,需要指定字符的编码格式。如果编码格式错误,会产生包含乱码的字符串。</p>
<ul>
<li>字符<br>java.io.StringReader 类 和 java.io.StringWriter </li>
<li>字符数组<br> java. io.CharArrayReader 类和 java.io.CharArrayWriter 类</li>
<li>内部缓冲区<br>java.io.BufferedReader 类 和 java.io.BufferedWriter 类</li>
</ul>
<h2 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h2><p>  Java NIO 中的缓冲区在某些特性上类似于 Java 中的基本类型的数组(如字节数组 或整型数组等),比如缓冲区中的数据排列是线性的,缓冲区的空间也是有限的。<br>不过缓冲区所提供的功能远比数组丰富得多,而且也支持存储类型异构的数据。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>容量(capacity)、读写限制(limit)和读写位置(position)</p>
<ul>
<li><p>容量<br>容量指的是缓冲区的额定大小。容量是在创建缓冲区时指定的,无法在创建后更改。在任何时候缓冲区中的数据总数都不可能超过容量。<br>只读</p>
</li>
<li><p>读写限制<br>在缓冲区中进行读写操作时的最大允许位置。<br>可读读写</p>
</li>
<li><p>读写位置<br>表示的是当前进行读写操作时的位置。<br>可读可写</p>
</li>
</ul>
<p>缓冲区同样也支持标记 mark 和重置 reset 的特性。</p>
<p>任何时候 <code>0 &lt;= 标记位置 &lt;= 读写位置 &lt;= 读写限制 &lt;= 容量</code></p>
<p>java.nio.Buffer 类是所有不同数据类型的缓冲区的父类。</p>
<ul>
<li><p>clear方法<br>把读写限制设为缓冲区的容量,同时 把读写位置设为 0 </p>
</li>
<li><p>flip<br>读写限制设为当前的读写位置,再把读写位置设为 0,这样可以保证缓冲区中的全部 数据都可以被读取</p>
</li>
<li><p>rewind<br>不会改变读写限制,但是会把读写位置设为 0</p>
</li>
</ul>
<p>读写操作分成两类 :一类是根据当前读写位置进行的相对读写操作, 另外一类是根据在缓冲区中的绝对位置进行的读写操作。两者的差别在于相对读写会改变当前读写位置,而绝对读写则不会。</p>
<h3 id="字节缓冲区"><a href="#字节缓冲区" class="headerlink" title="字节缓冲区"></a>字节缓冲区</h3><p>java.nio.ByteBuffer 类</p>
<p>　　只能通过其静态工厂方法 allocate 来分配新空间, 或者通过 wrap 方法来包装一个已有的字节数组。</p>
<p>　　必须要考虑字节顺序，同样的字节序列按照不同的顺序去解释,所得到的结果是不同的。java.nio.ByteOrder 类中定义了两种最基本的字节顺序 :BIG_ENDIAN 对应的大端表示和 LITTLE_ENDIAN 对应的小端表示。</p>
<p>　　大端表示的含义是字节序列中高位在前,而小端表示则正好相反。ByteOrder类中的静态方法 nativeOrder 可以获取到底层操作系统平台采用的字节顺序。ByteBuffer 类的对象默认使用的是大端表示。</p>
<h3 id="缓冲区视图"><a href="#缓冲区视图" class="headerlink" title="缓冲区视图"></a>缓冲区视图</h3><p>ByteBuffer 类的另外一个常见的使用方式是在一个已有的 ByteBuffer 类的对象上创建出各种不同的视图。这些视图和它所基于的 ByteBuffer 类的对象共享同样的存储空间,但是提供额外的实用功能。在功能上,ByteBuffer 类的视图与它所基于的 ByteBuffer 类的对象之间的关系类似于过滤流和它所包装的流的关系。<br>CharBuffer、ShortBuffer、IntBuffer、LongBuffer、FloatBuffer 和 DoubleBuffer 。</p>
<h2 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h2><p>通道是 Java NIO 对 I&#x2F;O 操作提供的另外一种新的抽象方式。通道不是从 I&#x2F;O 操作所处理的数据这个层次上去抽象,而是表示为一个已经建立好的到支持 I&#x2F;O 操作的实体的连接。这个连接一旦建立,就可以在这个连接上进行各种 I&#x2F;O 操作。通道在进行读写操作 时使用的都是上面介绍的新的缓冲区的实现,而不是字节数组。</p>
<p>Java NIO 中 的 通 道 都 实 现 了 java.nio.channels.Channel 接 口， 本身很简单，只有关闭通道的 close 方法和判断通道是否被打开的 isOpen 方法。<br>由于 Channel 接口继承了 java.lang.AutoCloseable 接口,通道的所有实现对象都可以用 try-with-resources 。</p>
<ul>
<li>读 java.nio.channels.ReadableByte-Channel 接口 </li>
<li>写 java.nio.channels. WritableByteChannel 接口</li>
<li>移动读写操作的位置 java.nio.channels.SeekableByteChannel 接口</li>
<li>多个 ByteBuffer 类数据 java.nio.channels.ScatteringByteChannel</li>
</ul>
<h3 id="文件通道FileChannel"><a href="#文件通道FileChannel" class="headerlink" title="文件通道FileChannel"></a>文件通道FileChannel</h3><h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h4><p>读取和写入模式 java.nio.file.StandardOpenOption</p>
<p>打开方法：</p>
<ul>
<li>FileChannel.open(Path path)</li>
<li>从已有的 FileInputStream 类、FileOutputStream 类和 RandomAccessFile 类的对象的getChannel 方法得到</li>
</ul>
<h4 id="文件数据传输"><a href="#文件数据传输" class="headerlink" title="文件数据传输"></a>文件数据传输</h4><p>transferFrom<br>transferTo</p>
<h4 id="内存映射文件"><a href="#内存映射文件" class="headerlink" title="内存映射文件"></a>内存映射文件</h4><ul>
<li>map 方法<br>FileChannel 类的 map 方法把一个文件的全部或部分内容映射到内存中,所 得到的是一个 ByteBuffer 类的子类 MappedByteBuffer 的对象,程序只需要对这个 MappedByteBuffer 类的对象进行操作即可。</li>
<li>load 方法<br>MappedByteBuffer 类的 load 方法可以把该缓冲区所对应的文件内容 加载到物理内存中,以提高文件操作时的性能。</li>
<li>force 方法<br>FileChannel 类的 force 方法来强制要求把这些更新同 步到底层文件中。</li>
</ul>
<h4 id="锁定文件"><a href="#锁定文件" class="headerlink" title="锁定文件"></a>锁定文件</h4><p>FileChannel 类的 lock 和 tryLock 方 法可以对当前文件通道所对应的文件进行加锁。<br>lock 方法是阻塞式的,而 tryLock 方法则不是</p>
<h3 id="套接字通道"><a href="#套接字通道" class="headerlink" title="套接字通道"></a>套接字通道</h3><p>接口 java.nio.channels.NetworkChannel </p>
<h4 id="阻塞式套接字通道"><a href="#阻塞式套接字通道" class="headerlink" title="阻塞式套接字通道"></a>阻塞式套接字通道</h4><p>客户端 SocketChannel.open<br>服务端 ServerSocketChannel.open</p>
<h4 id="多路复用套接字通道"><a href="#多路复用套接字通道" class="headerlink" title="多路复用套接字通道"></a>多路复用套接字通道</h4><p>核心是选择器,即 java.nio.channels.Selector 类</p>
<h2 id="NIO-2"><a href="#NIO-2" class="headerlink" title="NIO.2"></a>NIO.2</h2><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>java.nio.file包， 提供的新功能包括文件路径的抽象、文件目录列表流、文件目录树遍历、文件 属性和文件变化监视服务等。<br>传统的是 <code>java.io.File</code> 类</p>
<h4 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h4><p>java.nio.file.Path 接口</p>
<h4 id="文件目录列表流"><a href="#文件目录列表流" class="headerlink" title="文件目录列表流"></a>文件目录列表流</h4><p>接口 java.nio.file.DirectoryStream<br>只能遍历当前目录下的直接子目录或文件， 不递归。</p>
<h4 id="文件目录树遍历"><a href="#文件目录树遍历" class="headerlink" title="文件目录树遍历"></a>文件目录树遍历</h4><p>java.nio.file.FileVisitor 接口</p>
<h4 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h4><p>java.nio.file.attribute 包</p>
<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><p>java.nio.file.Files 类<br><a href="https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html">jdk docs</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">long</span>	<span class="title function_">copy</span><span class="params">(InputStream in, Path target, CopyOption... options)</span></span><br><span class="line">Copies all bytes from an input stream to a file.</span><br><span class="line"><span class="keyword">static</span> <span class="type">long</span>	<span class="title function_">copy</span><span class="params">(Path source, OutputStream out)</span></span><br><span class="line">Copies all bytes from a file to an output stream.</span><br><span class="line"><span class="keyword">static</span> Path	<span class="title function_">copy</span><span class="params">(Path source, Path target, CopyOption... options)</span></span><br><span class="line">Copy a file to a target file.</span><br><span class="line"><span class="keyword">static</span> Path	<span class="title function_">createDirectories</span><span class="params">(Path dir, FileAttribute&lt;?&gt;... attrs)</span></span><br><span class="line">Creates a directory by creating all nonexistent parent directories first.</span><br><span class="line"><span class="keyword">static</span> Path	<span class="title function_">createDirectory</span><span class="params">(Path dir, FileAttribute&lt;?&gt;... attrs)</span></span><br><span class="line">Creates a <span class="keyword">new</span> <span class="title class_">directory</span>.</span><br><span class="line"><span class="keyword">static</span> Path	<span class="title function_">createFile</span><span class="params">(Path path, FileAttribute&lt;?&gt;... attrs)</span></span><br><span class="line">Creates a <span class="keyword">new</span> <span class="title class_">and</span> empty file, failing <span class="keyword">if</span> the file already exists.</span><br><span class="line"><span class="keyword">static</span> Path	<span class="title function_">createLink</span><span class="params">(Path link, Path existing)</span></span><br><span class="line">Creates a <span class="keyword">new</span> <span class="title class_">link</span> (directory entry) <span class="keyword">for</span> an existing <span class="title function_">file</span> <span class="params">(optional operation)</span>.</span><br><span class="line"><span class="keyword">static</span> Path	<span class="title function_">createSymbolicLink</span><span class="params">(Path link, Path target, FileAttribute&lt;?&gt;... attrs)</span></span><br><span class="line">Creates a symbolic link to a <span class="title function_">target</span> <span class="params">(optional operation)</span>.</span><br><span class="line"><span class="keyword">static</span> Path	<span class="title function_">createTempDirectory</span><span class="params">(Path dir, String prefix, FileAttribute&lt;?&gt;... attrs)</span></span><br><span class="line">Creates a <span class="keyword">new</span> <span class="title class_">directory</span> in the specified directory, using the given prefix to generate its name.</span><br><span class="line"><span class="keyword">static</span> Path	<span class="title function_">createTempDirectory</span><span class="params">(String prefix, FileAttribute&lt;?&gt;... attrs)</span></span><br><span class="line">Creates a <span class="keyword">new</span> <span class="title class_">directory</span> in the <span class="keyword">default</span> temporary-file directory, using the given prefix to generate its name.</span><br><span class="line"><span class="keyword">static</span> Path	<span class="title function_">createTempFile</span><span class="params">(Path dir, String prefix, String suffix, FileAttribute&lt;?&gt;... attrs)</span></span><br><span class="line">Creates a <span class="keyword">new</span> <span class="title class_">empty</span> file in the specified directory, using the given prefix and suffix strings to generate its name.</span><br><span class="line"><span class="keyword">static</span> Path	<span class="title function_">createTempFile</span><span class="params">(String prefix, String suffix, FileAttribute&lt;?&gt;... attrs)</span></span><br><span class="line">Creates an empty file in the <span class="keyword">default</span> temporary-file directory, using the given prefix and suffix to generate its name.</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span>	<span class="title function_">delete</span><span class="params">(Path path)</span></span><br><span class="line">Deletes a file.</span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span>	<span class="title function_">deleteIfExists</span><span class="params">(Path path)</span></span><br><span class="line">Deletes a file <span class="keyword">if</span> it exists.</span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span>	<span class="title function_">exists</span><span class="params">(Path path, LinkOption... options)</span></span><br><span class="line">Tests whether a file exists.</span><br><span class="line"><span class="keyword">static</span> Object	<span class="title function_">getAttribute</span><span class="params">(Path path, String attribute, LinkOption... options)</span></span><br><span class="line">Reads the value of a file attribute.</span><br><span class="line"><span class="keyword">static</span> &lt;V <span class="keyword">extends</span> <span class="title class_">FileAttributeView</span>&gt; </span><br><span class="line">V	<span class="title function_">getFileAttributeView</span><span class="params">(Path path, Class&lt;V&gt; type, LinkOption... options)</span></span><br><span class="line">Returns a file attribute view of a given type.</span><br><span class="line"><span class="keyword">static</span> FileStore	<span class="title function_">getFileStore</span><span class="params">(Path path)</span></span><br><span class="line">Returns the FileStore representing the file store where a file is located.</span><br><span class="line"><span class="keyword">static</span> FileTime	<span class="title function_">getLastModifiedTime</span><span class="params">(Path path, LinkOption... options)</span></span><br><span class="line">Returns a file<span class="string">&#x27;s last modified time.</span></span><br><span class="line"><span class="string">static UserPrincipal	getOwner(Path path, LinkOption... options)</span></span><br><span class="line"><span class="string">Returns the owner of a file.</span></span><br><span class="line"><span class="string">static Set&lt;PosixFilePermission&gt;	getPosixFilePermissions(Path path, LinkOption... options)</span></span><br><span class="line"><span class="string">Returns a file&#x27;</span>s POSIX file permissions.</span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span>	<span class="title function_">isDirectory</span><span class="params">(Path path, LinkOption... options)</span></span><br><span class="line">Tests whether a file is a directory.</span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span>	<span class="title function_">isExecutable</span><span class="params">(Path path)</span></span><br><span class="line">Tests whether a file is executable.</span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span>	<span class="title function_">isHidden</span><span class="params">(Path path)</span></span><br><span class="line">Tells whether or not a file is considered hidden.</span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span>	<span class="title function_">isReadable</span><span class="params">(Path path)</span></span><br><span class="line">Tests whether a file is readable.</span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span>	<span class="title function_">isRegularFile</span><span class="params">(Path path, LinkOption... options)</span></span><br><span class="line">Tests whether a file is a regular file with opaque content.</span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span>	<span class="title function_">isSameFile</span><span class="params">(Path path, Path path2)</span></span><br><span class="line">Tests <span class="keyword">if</span> two paths locate the same file.</span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span>	<span class="title function_">isSymbolicLink</span><span class="params">(Path path)</span></span><br><span class="line">Tests whether a file is a symbolic link.</span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span>	<span class="title function_">isWritable</span><span class="params">(Path path)</span></span><br><span class="line">Tests whether a file is writable.</span><br><span class="line"><span class="keyword">static</span> Path	<span class="title function_">move</span><span class="params">(Path source, Path target, CopyOption... options)</span></span><br><span class="line">Move or rename a file to a target file.</span><br><span class="line"><span class="keyword">static</span> BufferedReader	<span class="title function_">newBufferedReader</span><span class="params">(Path path, Charset cs)</span></span><br><span class="line">Opens a file <span class="keyword">for</span> reading, returning a BufferedReader that may be used to read text from the file in an efficient manner.</span><br><span class="line"><span class="keyword">static</span> BufferedWriter	<span class="title function_">newBufferedWriter</span><span class="params">(Path path, Charset cs, OpenOption... options)</span></span><br><span class="line">Opens or creates a file <span class="keyword">for</span> writing, returning a BufferedWriter that may be used to write text to the file in an efficient manner.</span><br><span class="line"><span class="keyword">static</span> SeekableByteChannel	<span class="title function_">newByteChannel</span><span class="params">(Path path, OpenOption... options)</span></span><br><span class="line">Opens or creates a file, returning a seekable <span class="type">byte</span> channel to access the file.</span><br><span class="line"><span class="keyword">static</span> SeekableByteChannel	<span class="title function_">newByteChannel</span><span class="params">(Path path, Set&lt;? extends OpenOption&gt; options, FileAttribute&lt;?&gt;... attrs)</span></span><br><span class="line">Opens or creates a file, returning a seekable <span class="type">byte</span> channel to access the file.</span><br><span class="line"><span class="keyword">static</span> DirectoryStream&lt;Path&gt;	<span class="title function_">newDirectoryStream</span><span class="params">(Path dir)</span></span><br><span class="line">Opens a directory, returning a DirectoryStream to iterate over all entries in the directory.</span><br><span class="line"><span class="keyword">static</span> DirectoryStream&lt;Path&gt;	<span class="title function_">newDirectoryStream</span><span class="params">(Path dir, DirectoryStream.Filter&lt;? <span class="built_in">super</span> Path&gt; filter)</span></span><br><span class="line">Opens a directory, returning a DirectoryStream to iterate over the entries in the directory.</span><br><span class="line"><span class="keyword">static</span> DirectoryStream&lt;Path&gt;	<span class="title function_">newDirectoryStream</span><span class="params">(Path dir, String glob)</span></span><br><span class="line">Opens a directory, returning a DirectoryStream to iterate over the entries in the directory.</span><br><span class="line"><span class="keyword">static</span> InputStream	<span class="title function_">newInputStream</span><span class="params">(Path path, OpenOption... options)</span></span><br><span class="line">Opens a file, returning an input stream to read from the file.</span><br><span class="line"><span class="keyword">static</span> OutputStream	<span class="title function_">newOutputStream</span><span class="params">(Path path, OpenOption... options)</span></span><br><span class="line">Opens or creates a file, returning an output stream that may be used to write bytes to the file.</span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span>	<span class="title function_">notExists</span><span class="params">(Path path, LinkOption... options)</span></span><br><span class="line">Tests whether the file located by <span class="built_in">this</span> path does not exist.</span><br><span class="line"><span class="keyword">static</span> String	<span class="title function_">probeContentType</span><span class="params">(Path path)</span></span><br><span class="line">Probes the content type of a file.</span><br><span class="line"><span class="keyword">static</span> <span class="type">byte</span>[]	readAllBytes(Path path)</span><br><span class="line">Reads all the bytes from a file.</span><br><span class="line"><span class="keyword">static</span> List&lt;String&gt;	<span class="title function_">readAllLines</span><span class="params">(Path path, Charset cs)</span></span><br><span class="line">Read all lines from a file.</span><br><span class="line"><span class="keyword">static</span> &lt;A <span class="keyword">extends</span> <span class="title class_">BasicFileAttributes</span>&gt; </span><br><span class="line">A	<span class="title function_">readAttributes</span><span class="params">(Path path, Class&lt;A&gt; type, LinkOption... options)</span></span><br><span class="line">Reads a file<span class="string">&#x27;s attributes as a bulk operation.</span></span><br><span class="line"><span class="string">static Map&lt;String,Object&gt;	readAttributes(Path path, String attributes, LinkOption... options)</span></span><br><span class="line"><span class="string">Reads a set of file attributes as a bulk operation.</span></span><br><span class="line"><span class="string">static Path	readSymbolicLink(Path link)</span></span><br><span class="line"><span class="string">Reads the target of a symbolic link (optional operation).</span></span><br><span class="line"><span class="string">static Path	setAttribute(Path path, String attribute, Object value, LinkOption... options)</span></span><br><span class="line"><span class="string">Sets the value of a file attribute.</span></span><br><span class="line"><span class="string">static Path	setLastModifiedTime(Path path, FileTime time)</span></span><br><span class="line"><span class="string">Updates a file&#x27;</span>s last modified time attribute.</span><br><span class="line"><span class="keyword">static</span> Path	<span class="title function_">setOwner</span><span class="params">(Path path, UserPrincipal owner)</span></span><br><span class="line">Updates the file owner.</span><br><span class="line"><span class="keyword">static</span> Path	<span class="title function_">setPosixFilePermissions</span><span class="params">(Path path, Set&lt;PosixFilePermission&gt; perms)</span></span><br><span class="line">Sets a file<span class="string">&#x27;s POSIX permissions.</span></span><br><span class="line"><span class="string">static long	size(Path path)</span></span><br><span class="line"><span class="string">Returns the size of a file (in bytes).</span></span><br><span class="line"><span class="string">static Path	walkFileTree(Path start, FileVisitor&lt;? super Path&gt; visitor)</span></span><br><span class="line"><span class="string">Walks a file tree.</span></span><br><span class="line"><span class="string">static Path	walkFileTree(Path start, Set&lt;FileVisitOption&gt; options, int maxDepth, FileVisitor&lt;? super Path&gt; visitor)</span></span><br><span class="line"><span class="string">Walks a file tree.</span></span><br><span class="line"><span class="string">static Path	write(Path path, byte[] bytes, OpenOption... options)</span></span><br><span class="line"><span class="string">Writes bytes to a file.</span></span><br><span class="line"><span class="string">static Path	write(Path path, Iterable&lt;? extends CharSequence&gt; lines, Charset cs, OpenOption... options)</span></span><br><span class="line"><span class="string">Write lines of text to a file.</span></span><br></pre></td></tr></table></figure>



<h2 id="异步-I-x2F-O-通道"><a href="#异步-I-x2F-O-通道" class="headerlink" title="异步 I&#x2F;O 通道"></a>异步 I&#x2F;O 通道</h2><p>java.nio.channels.AsynchronousFileChannel<br>通过 open 方法来完成的。 对文件通道的读取和写入也是通过对应的 read 和 write 方法来完成的。所不同的是 read 和 write 方法要么返回一个 Future 类的对象,要么要求传入一个 CompletionHandler 接口 的实现对象作为回调方法。</p>
<p>异 步 套 接 字 通 道 AsynchronousSocketChannel 和 AsynchronousServerSocketChannel 类 分 别 对 应 一 般 的 SocketChannel 和 ServerSocketChannel 类。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>IO</tag>
        <tag>NIO</tag>
        <tag>NIO2</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 Firewalld</title>
    <url>/2017/03/28/linux/Firewalld-md/</url>
    <content><![CDATA[<p>主要内容<br>CentOS 7 Firewalld 防火墙介紹</p>
<p>主要内容</p>
<ul>
<li>基本概念</li>
<li>基础命令</li>
<li>具体规则</li>
</ul>
<p>CentOS 7 之后改用 firewalld 以 zone 的区域分割来建立，并可动态设置方式执行避免中断的问题。</p>
<span id="more"></span>

<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Firewalld-相关路径"><a href="#Firewalld-相关路径" class="headerlink" title="Firewalld 相关路径"></a>Firewalld 相关路径</h3><p><code>/etc/firewalld</code>：设定档路径<br><code>/usr/bin/</code>：firewall-cmd 指令所在的位置<br><code>/usr/lib/firewalld/</code>：firewalld 设定的设定资源 (xml 格式)，例如 nfs.xml 就定义了 <port protocol="tcp" port="2049"/><br><code>/usr/lib/firewalld/services/</code>： 所有服务xml</p>
<p>共有这些服务，可以直接使用</p>
<pre><code>amanda-client.xml high-availability.xml kpasswd.xml mysql.xml pop3s.xml smtp.xml
bacula-client.xml https.xml ldaps.xml nfs.xml postgresql.xml ssh.xml
bacula.xml http.xml ldap.xml ntp.xml proxy-dhcp.xml telnet.xml
dhcpv6-client.xml imaps.xml libvirt-tls.xml openvpn.xml radius.xml tftp-client.xml
dhcpv6.xml ipp-client.xml libvirt.xml pmcd.xml RH-Satellite-6.xml tftp.xml
dhcp.xml ipp.xml mdns.xml pmproxy.xml rpc-bind.xml transmission-client.xml
dns.xml ipsec.xml mountd.xml pmwebapis.xml samba-client.xml vnc-server.xml
ftp.xml kerberos.xml ms-wbt.xml pmwebapi.xml samba.xml wbem-https.xm
</code></pre>
<h3 id="zone"><a href="#zone" class="headerlink" title="zone"></a>zone</h3><p>Firewall 能将不同的网络连接归类到不同的信任级别，Zone 提供了以下几个级别</p>
<ul>
<li>drop: 丢弃所有进入的包，而不给出任何响应</li>
<li>block: 拒绝所有外部发起的连接，允许内部发起的连接</li>
<li>public: 允许指定的进入连接</li>
<li>external: 同上，对伪装的进入连接，一般用于路由转发</li>
<li>dmz: 允许受限制的进入连接</li>
<li>work: 允许受信任的计算机被限制的进入连接，类似 workgroup</li>
<li>home: 同上，类似 homegroup</li>
<li>internal: 同上，范围针对所有互联网用户</li>
<li>trusted: 信任所有连接</li>
</ul>
<p>最常用<br><code>public</code>： 公開的場所，不信任網域內所有連線，只有被允許的連線才能進入，一般只要设定這裡就可以了<br><code>dmz</code>： (Demilitarized Zone) 非軍事區，允許對外連線，內部網路只有允許的才可以連線進來</p>
<p>所謂的 zone 就表示主机位于哪个环境区域，需要设定哪些规则，在 firewalld 共有 7 個zones</p>
<blockquote>
<p>先决定主机要设定在哪个区域 zone &gt;&gt; 再往该 zone 设定规则 &gt;&gt;&gt; 重新读取设定 sudo firewall-cmd –reload</p>
</blockquote>
<h3 id="过滤规则"><a href="#过滤规则" class="headerlink" title="过滤规则"></a>过滤规则</h3><ul>
<li>source: 根据源地址过滤</li>
<li>interface: 根据网卡过滤</li>
<li>service: 根据服务名过滤</li>
<li>port: 根据端口过滤</li>
<li>icmp-block: icmp 报文过滤，按照 icmp 类型配置</li>
<li>masquerade: ip 地址伪装</li>
<li>forward-port: 端口转发</li>
<li>rule: 自定义规则</li>
</ul>
<p>其中，过滤规则的优先级遵循如下顺序</p>
<ul>
<li>source</li>
<li>interface</li>
<li>firewalld.conf</li>
</ul>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld         <span class="comment"># 启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld        <span class="comment"># 开机启动</span></span><br><span class="line">systemctl stop firewalld          <span class="comment"># 关闭</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld       <span class="comment"># 取消开机启动</span></span><br></pre></td></tr></table></figure>

<p>具体的规则管理，可以使用 firewall-cmd，具体的使用方法可以</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">firewall-cmd --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">--zone=NAME                         <span class="comment"># 指定 zone</span></span><br><span class="line">--permanent                         <span class="comment"># 永久修改，--reload 后生效</span></span><br><span class="line">--<span class="built_in">timeout</span>=seconds                   <span class="comment"># 持续效果，到期后自动移除，用于调试，不能与 --permanent 同时使用</span></span><br></pre></td></tr></table></figure>

<h2 id="具体规则-x2F-例子"><a href="#具体规则-x2F-例子" class="headerlink" title="具体规则&#x2F;例子"></a>具体规则&#x2F;例子</h2><h3 id="显示目前的设定"><a href="#显示目前的设定" class="headerlink" title="显示目前的设定"></a>显示目前的设定</h3><pre><code>firewall-cmd --list-all
</code></pre>
<h3 id="关掉-DHCP-服务-port"><a href="#关掉-DHCP-服务-port" class="headerlink" title="关掉 DHCP 服务 port"></a>关掉 DHCP 服务 port</h3><pre><code>firewall-cmd --zone=public --remove-service dhcpv6-client
</code></pre>
<h3 id="暂时开启-DNS-port-53"><a href="#暂时开启-DNS-port-53" class="headerlink" title="暂时开启 DNS port 53"></a>暂时开启 DNS port 53</h3><pre><code>systemctl start named
systemctl enable named
firewall-cmd --add-service=dns
firewall-cmd --reload
firewall-cmd --list-all
</code></pre>
<h3 id="永久开启-DNS-port-53"><a href="#永久开启-DNS-port-53" class="headerlink" title="永久开启 DNS port 53"></a>永久开启 DNS port 53</h3><pre><code>firewall-cmd --add-service=dns --permanent
firewall-cmd --reload
</code></pre>
<h3 id="如何修改主机的设定-zone"><a href="#如何修改主机的设定-zone" class="headerlink" title="如何修改主机的设定 zone"></a>如何修改主机的设定 zone</h3><pre><code>vi /etc/firewalld/firewalld.conf
&gt; 修改 DefaultZone=public
&gt; 变成 DefaultZone=dmz
firewall-cmd --reload
</code></pre>
<h3 id="加入自行指定的连接"><a href="#加入自行指定的连接" class="headerlink" title="加入自行指定的连接"></a>加入自行指定的连接</h3><pre><code>firewall-cmd --add-port=8080/tcp --permanent
success
firewall-cmd --reload
success
firewall-cmd --list-all
</code></pre>
<h3 id="限制某服务只能从哪IP进入"><a href="#限制某服务只能从哪IP进入" class="headerlink" title="限制某服务只能从哪IP进入"></a>限制某服务只能从哪IP进入</h3><pre><code>firewall-cmd --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.1.88&quot; service name=&quot;ssh&quot; accept&quot;
</code></pre>
<p>或 ip subnet</p>
<pre><code>firewall-cmd --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.1.0/24&quot; service name=&quot;ssh&quot; accept&quot;
</code></pre>
<h3 id="限制某-port-只能从哪IP进入"><a href="#限制某-port-只能从哪IP进入" class="headerlink" title="限制某 port 只能从哪IP进入"></a>限制某 port 只能从哪IP进入</h3><pre><code>firewall-cmd --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.12.9&quot; port port=&quot;8080&quot; protocol=&quot;tcp&quot; accept&quot;
</code></pre>
<p>注意：port port&#x3D;”8080” 不是写错唷！這是他的格式</p>
<h3 id="从-zone-移除某項服务"><a href="#从-zone-移除某項服务" class="headerlink" title="从 zone 移除某項服务"></a>从 zone 移除某項服务</h3><pre><code>firewall-cmd --zone=public --add-service=http --permanent
firewall-cmd --zone=public --remove-service=http --permanent

firewall-cmd --zone=public --add-port=8080/tcp --permanent
firewall-cmd --zone=public --remove-port=8080/tcp --permanent
</code></pre>
<h2 id="rule-自定义规则"><a href="#rule-自定义规则" class="headerlink" title="rule 自定义规则"></a>rule 自定义规则</h2><p><a href="http://jevic.blog.51cto.com/2183736/1785162">自定义规则 直接选项</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.xuite.net/tolarku/blog/363801991-CentOS+7+Firewalld+%E9%98%B2%E7%81%AB%E7%89%86%E8%AA%AA%E6%98%8E%E4%BB%8B%E7%B4%B9">CentOS 7 Firewalld 防火牆說明介紹</a><br><a href="https://havee.me/linux/2015-01/using-firewalls-on-centos-7.html">CentOS 7 下使用 Firewall</a><br><a href="https://fedoraproject.org/wiki/FirewallD">fedora FirewallD</a><br><a href="https://access.redhat.com/documentation/zh-CN/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html">redhat 安全</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>firewalld</tag>
        <tag>防火墙</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Nagios</title>
    <url>/2015/07/21/linux/L-nagios/</url>
    <content><![CDATA[<p>和开发比运维，和运维比开发</p>
<p>服务器监控</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Nagios zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 常用规则， 酷～～～</title>
    <url>/2015/07/20/linux/cmd/</url>
    <content><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul>
<li><p>查看整体空间 (-h 按M单位)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ df -h</span><br></pre></td></tr></table></figure>

</li>
<li><p>查看输出当前目录下各个子目录所使用的空间(-h 按M单位)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">du</span> -h --max-depth=1</span><br></pre></td></tr></table></figure></li>
</ul>
<p>排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ du  --max-depth=1 |sort -rn</span><br></pre></td></tr></table></figure>

<ul>
<li><p>手动清空缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sync</span></span><br><span class="line">$ <span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找以前用过的命令<br><code>ctrl + r</code></p>
</li>
<li><p>Netstat<br>Netstat 命令用于显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade 连接，多播成员 (Multicast Memberships) 等等。<br><a href="http://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316661.html">Linux netstat命令详解 链接</a><br>程序端口占用情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ netstat –apn </span><br><span class="line"></span><br><span class="line">$ netstat   -anp   |   grep  portno</span><br><span class="line"></span><br><span class="line">$ ps -aux | grep java</span><br></pre></td></tr></table></figure>
</li>
<li><p>抓包 tcpdump &#x2F; wireshark</p>
</li>
<li><p>rsync 增量备份，保持原有属性<br>-a<br>-z<br>-p<br>–delete</p>
</li>
<li><p>inotify + rsync 实时备份<br>inotify 安装</p>
</li>
</ul>
<p>inotifywait<br>-e 监控事件<br>-m 持续监控<br>-r 递归<br>-q 简化信息</p>
<ul>
<li><p>ctrl + r 查找历史命令</p>
</li>
<li><p>rs 上传</p>
</li>
<li><p>waf ： web application firewall<br>modsecurity</p>
</li>
<li><p>Linux下高效数据恢复软件extundelete</p>
</li>
<li><p>curl wget lynx<br><a href="http://blog.51yip.com/linux/1049.html">curl</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -I ip/domain #查看web服务器类型和版本</span><br><span class="line">$ wget -C URL #断点续传 -t 重试次数 -T 超时时间</span><br><span class="line">$ wget --user username --password pass URL #认证</span><br><span class="line">$ curl -C URL #断点续传</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h2><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><table>
<thead>
<tr>
<th>变量</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>$0</td>
<td>当前脚本的文件名</td>
</tr>
<tr>
<td>$n</td>
<td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。</td>
</tr>
<tr>
<td>!$</td>
<td>上个命令最后一个参数</td>
</tr>
<tr>
<td>$#</td>
<td>传递给脚本或函数的参数个数。</td>
</tr>
<tr>
<td>$*</td>
<td>传递给脚本或函数的所有参数。</td>
</tr>
<tr>
<td>$@</td>
<td>传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同，下面将会讲到。</td>
</tr>
<tr>
<td>$?</td>
<td>上个命令的退出状态，或函数的返回值。</td>
</tr>
<tr>
<td>$$</td>
<td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td>
</tr>
<tr>
<td>$!</td>
<td>执行上一个后台程序的PID</td>
</tr>
<tr>
<td><code>$*</code> 和 <code>$@</code> 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以”$1” “$2” … “$n” 的形式输出所有参数。</td>
<td></td>
</tr>
<tr>
<td>但是当它们被双引号(“ “)包含时，<code>$*</code> 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；<code>$@</code> 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数。</td>
<td></td>
</tr>
</tbody></table>
<h3 id="常用PATTERN："><a href="#常用PATTERN：" class="headerlink" title="常用PATTERN："></a>常用PATTERN：</h3><pre><code>`^#`:   以#开头
`#$`:   以#结尾
`^$`:   空行
</code></pre>
<h2 id="知乎"><a href="#知乎" class="headerlink" title="知乎"></a><a href="https://www.zhihu.com/question/20140085">知乎</a></h2><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="最小存储单位"><a href="#最小存储单位" class="headerlink" title="最小存储单位"></a>最小存储单位</h3><table>
<thead>
<tr>
<th>名称</th>
<th>最小存储单位</th>
</tr>
</thead>
<tbody><tr>
<td>硬盘</td>
<td>扇区（512B）</td>
</tr>
<tr>
<td>文件系统</td>
<td>block（1K，4K）</td>
</tr>
<tr>
<td>RAID</td>
<td>chunk （512）    mdadm  -c</td>
</tr>
<tr>
<td>LVM</td>
<td>PE （16M 自定义）</td>
</tr>
</tbody></table>
<h2 id="调教-kaffeine-播放各类媒体格式"><a href="#调教-kaffeine-播放各类媒体格式" class="headerlink" title="调教 kaffeine 播放各类媒体格式"></a>调教 kaffeine 播放各类媒体格式</h2><p>kaffeine 是基于 <code>libxine2</code>, openSUSE 官方提供的 libxine2 缺少一些插件，那用户要怎么安装这些编解码器呢？ 我们先说安装 mkv, mp4, wmv, m4v, mov, 3gp, 3g2 等视频文件的编解码器，这些可以很方便的从 packman 安装。核心的包是 <code>libxine2-codecs</code> ，我以 openSUSE 13.2 为例进行讲解：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo zypper ar -f http://packman.inode.at/suse/openSUSE_13.2/ packman</span><br><span class="line">sudo zypper update</span><br><span class="line">sudo zypper install libxine2-codecs</span><br></pre></td></tr></table></figure>


<h2 id="安全相关"><a href="#安全相关" class="headerlink" title="安全相关"></a>安全相关</h2><p><code>last</code><br><code>lastb</code><br><code>lastlog</code><br><code>history</code><br><code>/var/log/secure</code> : 登录的ssh公钥签名可以通过 <code>ssh-keygen -l -f xxx.pub</code> 获得 <code>远程日志服务</code></p>
<h3 id="网络实时流量监测-iftop"><a href="#网络实时流量监测-iftop" class="headerlink" title="网络实时流量监测 iftop"></a>网络实时流量监测 iftop</h3><p>单服务器</p>
<h3 id="网络流量监控与分析-Ntop-和-Ntopng"><a href="#网络流量监控与分析-Ntop-和-Ntopng" class="headerlink" title="网络流量监控与分析 Ntop 和 Ntopng"></a>网络流量监控与分析 Ntop 和 Ntopng</h3><h3 id="网络性能评估-iperf"><a href="#网络性能评估-iperf" class="headerlink" title="网络性能评估 iperf"></a>网络性能评估 iperf</h3><h3 id="rootkit-检测工具"><a href="#rootkit-检测工具" class="headerlink" title="rootkit 检测工具"></a>rootkit 检测工具</h3><ul>
<li>chkrootkit</li>
<li>RKHunter</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>DDOS</title>
    <url>/2015/11/17/linux/ddos/</url>
    <content><![CDATA[<h2 id="参考是否受到-ddos"><a href="#参考是否受到-ddos" class="headerlink" title="参考是否受到 ddos"></a>参考是否受到 ddos</h2><ul>
<li>sh<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ntu | awk &#x27;&#123;print $5&#125;&#x27; | cut -d: -f1          | sort | uniq -C | sort -n</span><br><span class="line">netstat -ntu | awk &#x27;&#123;print $5&#125;&#x27; | cut -d: -f4          | sort | uniq -C | sort -n</span><br><span class="line">#             截取外网ip 端口号   | 截取外网ip 以：为分割符 | 排序  |排除相同记录|排序并统计</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li>测试模拟ddos<br>ab 命令 ： 做压力测试的工具和性能的监控工具<br>语法： ab -n 要产生的链接总数 -c 同时打开的客户端数量 http：&#x2F;&#x2F;链接</li>
</ul>
<h2 id="防止-DDOS"><a href="#防止-DDOS" class="headerlink" title="防止 DDOS"></a>防止 DDOS</h2><ul>
<li><p>手动 iptables</p>
</li>
<li><p>自动检测，自动添加<br>fail2ban  或 linux ddos deflate（deflate.medialayer.com）</p>
</li>
<li><p>安装 deflate</p>
</li>
</ul>
<p>可以 参照deflate ， 编写木马（自动下载，自动执行）<br>重要的是 计划任务查不到</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>DDOS</tag>
      </tags>
  </entry>
  <entry>
    <title>fail2ban防御暴力破解攻击</title>
    <url>/2017/03/28/linux/fail2ban-md/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>安装</li>
<li>配置</li>
<li>使用</li>
</ul>
<p>使用 fail2ban 防御服务器的暴力破解攻击， ssh，nginx 服务为例。</p>
<p>变更历史</p>
<ul>
<li>2019-7-16 Fail2Ban v0.9.7 ssh filter</li>
</ul>
<span id="more"></span>

<p>实验环境 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br><span class="line">LSB Version:    :core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID: CentOS</span><br><span class="line">Description:    CentOS Linux release 7.2.1511 (Core) </span><br><span class="line">Release:        7.2.1511</span><br><span class="line">Codename:       Core</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="EPEL-源"><a href="#EPEL-源" class="headerlink" title="EPEL 源"></a>EPEL 源</h3><p>需要安装 EPEL 源， 国内可使用阿里云的镜像。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure>
<h3 id="fail2ban"><a href="#fail2ban" class="headerlink" title="fail2ban"></a>fail2ban</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install fail2ban-firewalld</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置文件根路径 <code>/etc/fail2ban/</code>。 默认服务的配置文件 <code>jail.conf</code>。<br>自定义服务配置文件 存放路径 <code>jail.d</code>， 建议以 <code>jail_服务名.local</code> 命名。<br>各个服务的拦截条件 在 <code>filter.d</code> 。</p>
<h2 id="ssh服务配置"><a href="#ssh服务配置" class="headerlink" title="ssh服务配置"></a>ssh服务配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/fail2ban/jail.d/jail_ssh.local </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>增加如下内容 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[sshd]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 尝试次数</span></span><br><span class="line">maxretry = 3</span><br><span class="line"><span class="comment"># 禁止访问时间（秒）</span></span><br><span class="line">bantime = 7200</span><br><span class="line">findtime = 600</span><br></pre></td></tr></table></figure>

<p>如果你使用用户密码登录，以上配置就可以了。</p>
<p>如果你使用公钥登录， 在修改下 ssh 的拦截条件, 增加 <code>^%(__prefix_line)sConnection closed by &lt;HOST&gt; \[preauth\]$</code></p>
<p>Fail2Ban v0.9.7 时 <code>^%(__prefix_line_sl)sConnection closed by &lt;HOST&gt;.*%(__suff)s$</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/fail2ban/filter.d/sshd.conf </span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fail3Ban filter for openssh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you want to protect OpenSSH from being bruteforced by password</span></span><br><span class="line"><span class="comment"># authentication then get public key authentication working before disabling</span></span><br><span class="line"><span class="comment"># PasswordAuthentication in sshd_config.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &quot;Connection from &lt;HOST&gt; port \d+&quot; requires LogLevel VERBOSE in sshd_config</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">[INCLUDES]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read common prefixes. If any customizations available -- read them from</span></span><br><span class="line"><span class="comment"># common.local</span></span><br><span class="line">before = common.conf</span><br><span class="line"></span><br><span class="line">[DEFAULT]</span><br><span class="line"></span><br><span class="line">_daemon = sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># optional prefix (logged from several ssh versions) like &quot;error: &quot;, &quot;error: PAM: &quot; or &quot;fatal: &quot;</span></span><br><span class="line">__pref = (?:(?:error|fatal): (?:PAM: )?)?</span><br><span class="line"><span class="comment"># optional suffix (logged from several ssh versions) like &quot; [preauth]&quot;</span></span><br><span class="line">__suff = (?: \[preauth\])?\s*</span><br><span class="line">__on_port_opt = (?: port \d+)?(?: on \S+(?: port \d+)?)?</span><br><span class="line"></span><br><span class="line"><span class="comment"># single line prefix:</span></span><br><span class="line">__prefix_line_sl = %(__prefix_line)s%(__pref)s</span><br><span class="line"><span class="comment"># multi line prefixes (for first and second lines):</span></span><br><span class="line">__prefix_line_ml1 = (?P&lt;__prefix&gt;%(__prefix_line)s)%(__pref)s</span><br><span class="line">__prefix_line_ml2 = %(__suff)s$&lt;SKIPLINES&gt;^(?P=__prefix)%(__pref)s</span><br><span class="line"></span><br><span class="line">mode = %(normal)s</span><br><span class="line"></span><br><span class="line">normal = ^%(__prefix_line_sl)s[aA]uthentication (?:failure|error|failed) <span class="keyword">for</span> .* from &lt;HOST&gt;( via \S+)?\s*%(__suff)s$</span><br><span class="line">         ^%(__prefix_line_sl)sUser not known to the underlying authentication module <span class="keyword">for</span> .* from &lt;HOST&gt;\s*%(__suff)s$</span><br><span class="line">         ^%(__prefix_line_sl)sFailed \S+ <span class="keyword">for</span> (?P&lt;cond_inv&gt;invalid user )?(?P&lt;user&gt;(?P&lt;cond_user&gt;\S+)|(?(cond_inv)(?:(?! from ).)*?|[^:]+)) from &lt;HOST&gt;%(__on_port_opt)s(?: ssh\d*)?(?(cond_user): |(?:(?:(?! from ).)*)$)</span><br><span class="line">         ^%(__prefix_line_sl)sROOT LOGIN REFUSED.* FROM &lt;HOST&gt;\s*%(__suff)s$</span><br><span class="line">         ^%(__prefix_line_sl)s[iI](?:llegal|nvalid) user .*? from &lt;HOST&gt;%(__on_port_opt)s\s*$</span><br><span class="line">         ^%(__prefix_line_sl)sUser .+ from &lt;HOST&gt; not allowed because not listed <span class="keyword">in</span> AllowUsers\s*%(__suff)s$</span><br><span class="line">         ^%(__prefix_line_sl)sUser .+ from &lt;HOST&gt; not allowed because listed <span class="keyword">in</span> DenyUsers\s*%(__suff)s$</span><br><span class="line">         ^%(__prefix_line_sl)sUser .+ from &lt;HOST&gt; not allowed because not <span class="keyword">in</span> any group\s*%(__suff)s$</span><br><span class="line">         ^%(__prefix_line_sl)srefused connect from \S+ \(&lt;HOST&gt;\)\s*%(__suff)s$</span><br><span class="line">         ^%(__prefix_line_sl)sReceived disconnect from &lt;HOST&gt;%(__on_port_opt)s:\s*3: .*: Auth fail%(__suff)s$</span><br><span class="line">         ^%(__prefix_line_sl)sUser .+ from &lt;HOST&gt; not allowed because a group is listed <span class="keyword">in</span> DenyGroups\s*%(__suff)s$</span><br><span class="line">         ^%(__prefix_line_sl)sUser .+ from &lt;HOST&gt; not allowed because none of user<span class="string">&#x27;s groups are listed in AllowGroups\s*%(__suff)s$</span></span><br><span class="line"><span class="string">         ^%(__prefix_line_sl)spam_unix\(sshd:auth\):\s+authentication failure;\s*logname=\S*\s*uid=\d*\s*euid=\d*\s*tty=\S*\s*ruser=\S*\s*rhost=&lt;HOST&gt;\s.*%(__suff)s$</span></span><br><span class="line"><span class="string">         ^%(__prefix_line_sl)s(error: )?maximum authentication attempts exceeded for .* from &lt;HOST&gt;%(__on_port_opt)s(?: ssh\d*)? \[preauth\]$</span></span><br><span class="line"><span class="string">         ^%(__prefix_line_ml1)sUser .+ not allowed because account is locked%(__prefix_line_ml2)sReceived disconnect from &lt;HOST&gt;: 11: .+%(__suff)s$</span></span><br><span class="line"><span class="string">         ^%(__prefix_line_ml1)sDisconnecting: Too many authentication failures for .+?%(__prefix_line_ml2)sConnection closed by &lt;HOST&gt;%(__suff)s$</span></span><br><span class="line"><span class="string">         ^%(__prefix_line_ml1)sConnection from &lt;HOST&gt;%(__on_port_opt)s%(__prefix_line_ml2)sDisconnecting: Too many authentication failures for .+%(__suff)s$</span></span><br><span class="line"><span class="string">            ^%(__prefix_line_sl)sConnection closed by &lt;HOST&gt;.*%(__suff)s$  ##增加在这里</span></span><br><span class="line"><span class="string">            ^%(__prefix_line_sl)sDisconnected from &lt;HOST&gt;.*%(__suff)s$ ##增加在这里, 可根据情况自己增加</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ddos =   ^%(__prefix_line_sl)sDid not receive identification string from &lt;HOST&gt;%(__suff)s$</span></span><br><span class="line"><span class="string">         ^%(__prefix_line_sl)sReceived disconnect from &lt;HOST&gt;%(__on_port_opt)s:\s*14: No supported authentication methods available%(__suff)s$</span></span><br><span class="line"><span class="string">         ^%(__prefix_line_sl)sUnable to negotiate with &lt;HOST&gt;%(__on_port_opt)s: no matching (?:cipher|key exchange method) found.</span></span><br><span class="line"><span class="string">         ^%(__prefix_line_ml1)sConnection from &lt;HOST&gt;%(__on_port_opt)s%(__prefix_line_ml2)sUnable to negotiate a (?:cipher|key exchange method)%(__suff)s$</span></span><br><span class="line"><span class="string">         ^%(__prefix_line_ml1)sSSH: Server;Ltype: (?:Authname|Version|Kex);Remote: &lt;HOST&gt;-\d+;[A-Z]\w+:.*%(__prefix_line_ml2)sRead from socket failed: Connection reset by peer%(__suff)s$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">aggressive = %(normal)s</span></span><br><span class="line"><span class="string">             %(ddos)s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Definition]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">failregex = %(mode)s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ignoreregex =</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Init]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># &quot;maxlines&quot; is number of log lines to buffer for multi-line regex searches</span></span><br><span class="line"><span class="string">maxlines = 10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">journalmatch = _SYSTEMD_UNIT=sshd.service + _COMM=sshd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># DEV Notes:</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string">#   &quot;Failed \S+ for .*? from &lt;HOST&gt;...&quot; failregex uses non-greedy catch-all because</span></span><br><span class="line"><span class="string">#   it is coming before use of &lt;HOST&gt; which is not hard-anchored at the end as well,</span></span><br><span class="line"><span class="string">#   and later catch-all&#x27;</span>s could contain user-provided input, <span class="built_in">which</span> need to be greedily</span><br><span class="line"><span class="comment">#   matched away first.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: Cyril Jaquier, Yaroslav Halchenko, Petr Voralek, Daniel Black</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="自定义服务-NGINX"><a href="#自定义服务-NGINX" class="headerlink" title="自定义服务(NGINX)"></a>自定义服务(NGINX)</h2><p>以下检查 nginx 服务 400,404,500 错误状态为例</p>
<h3 id="jail"><a href="#jail" class="headerlink" title="jail"></a>jail</h3><p>路径 <code>/etc/fail2ban/jail.d</code> , 新建 <code>jail_nginx-err.local</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/fail2ban/jail.d/jail_nginx-err.local</span><br></pre></td></tr></table></figure>

<p>内容如下 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[nginx-err]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">port = http,https</span><br><span class="line">filter = nginx-err</span><br><span class="line">banaction = firewallcmd-ipset</span><br><span class="line">logpath = /var/log/nginx/access.log</span><br><span class="line">findtime = 600</span><br><span class="line">maxretry = 20</span><br><span class="line">bantime = 7200</span><br></pre></td></tr></table></figure>

<p>大致意义如下：</p>
<ul>
<li>[nginx-err]：定义jail名称</li>
<li>enabled：是否启用该jail，默认的所有规则都没有该项，需要手动添加</li>
<li>port：指定封禁的端口，默认为0:65535，也就是所有端口，但可以在jail中设定</li>
<li>filter：指定过滤器名称</li>
<li>logpath：日志路径</li>
<li>banaction：达到阈值后的动作， 默认</li>
<li>maxretry：阈值</li>
<li>findtime：时间间隔 单位秒</li>
<li>bantime：封禁时长</li>
<li>ignoreip：忽略的IP</li>
</ul>
<p>在这里有几点要注意的：</p>
<ul>
<li>logpath与banaction可以有多行，如action中的设定：<br>++ 调用firewallcmd-ipset封禁目标IP访问的多个端口<br>++ 调用sendmail发送告警邮件</li>
<li>findtime不是检查日志的时间间隔，日志的检查是实时的。因为fail2ban自带数据库，所以可以在设定的时间内统计匹配次数</li>
<li>ignoreip添加后端服务器的IP或CDN的IP</li>
</ul>
<h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>使用现有的 <code>firewallcmd-ipset</code></p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>路径 <code>/etc/fail2ban/filter.d</code> 新建 <code>nginx-err.conf</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Definition]</span><br><span class="line"></span><br><span class="line">failregex = ^&lt;HOST&gt; -.*- .*HTTP/1.* (404|400|500) \d+ .*$</span><br><span class="line"></span><br><span class="line">ignoreregex =</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>注意：<br>nginx log 格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li><p>启动&#x2F;重启 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart fail2ban.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>开机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable fail2ban.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>检验fail2ban状态， 显示出当前活动的监狱列表</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fail2ban-client status                                                                                                                                                                                  255 ↵</span><br><span class="line">Status</span><br><span class="line">|- Number of jail:      1</span><br><span class="line">`- Jail list:   sshd</span><br></pre></td></tr></table></figure>
</li>
<li><p>检验一个特定监狱的状态</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fail2ban-client status sshd </span><br><span class="line">Status <span class="keyword">for</span> the jail: sshd</span><br><span class="line">|- Filter</span><br><span class="line">|  |- Currently failed: 1</span><br><span class="line">|  |- Total failed:     4</span><br><span class="line">|  `- Journal matches:  _SYSTEMD_UNIT=sshd.service + _COMM=sshd</span><br><span class="line">`- Actions</span><br><span class="line">   |- Currently banned: 1</span><br><span class="line">   |- Total banned:     2</span><br><span class="line">   `- Banned IP list:   140.205.201.42</span><br></pre></td></tr></table></figure>
</li>
<li><p>解锁特定的IP地址</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fail2ban-client set 特定监狱 unbanip ip</span></span><br><span class="line">fail2ban-client <span class="built_in">set</span> sshd unbanip 192.168.1.8</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看防火墙</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">firewall-cmd --direct --get-all-rules</span><br><span class="line">  </span><br><span class="line">ipset list</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>安全</tag>
        <tag>fail2ban</tag>
      </tags>
  </entry>
  <entry>
    <title>lamp</title>
    <url>/2015/11/17/linux/lamp/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h2><span id="more"></span>
<h3 id="屏蔽-apache-x2F-nginx-的版本"><a href="#屏蔽-apache-x2F-nginx-的版本" class="headerlink" title="屏蔽 apache&#x2F;nginx 的版本"></a>屏蔽 apache&#x2F;nginx 的版本</h3><ul>
<li><p>查看web 服务器的类型和版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -I ip/domain</span><br></pre></td></tr></table></figure>
</li>
<li><p>应该隐藏 服务器的类型和版本<br>apache 主配置文件  httpd-default.conf 打开注释</p>
</li>
</ul>
<p>serverTokens prod<br>serverSignature off</p>
<ul>
<li>提升：让版本彻底消失<br>需要重新编译源码， 修改incloude目录下的ap_release.h 文件<br>– prefix<br>– enable-so<br>– enable-rewrite<br>– enable-ssl</li>
</ul>
<h3 id="启用压缩模块-mod-deflate"><a href="#启用压缩模块-mod-deflate" class="headerlink" title="启用压缩模块 mod_deflate"></a>启用压缩模块 mod_deflate</h3>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>lamp</tag>
      </tags>
  </entry>
  <entry>
    <title>U盘引导多个linux镜像</title>
    <url>/2017/06/27/linux/linuxUsbGrub/</url>
    <content><![CDATA[<p><em><strong>主要内容</strong></em></p>
<p>一个U盘在手，走遍天下都不怕。<br>关键就是这个U盘，<br>它引导多个linux镜像安装,同时支持BIOS和UEFI模式 。不需要安装系统时就是一个普通U 盘。</p>
<p>话说我一个开发，怎么会研究这个玩意。</p>
<p><em>更新历史</em><br>2020-9-10 Ventoy 致敬老师</p>
<span id="more"></span>

<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul>
<li><p>U盘<br>最好16G以上，不然装不了几个系统的。</p>
</li>
<li><p>预备知识<br>在此特别感谢<a href="https://my.oschina.net/abcfy2/blog/491140?nocache=1497879527986">Feng_Yu</a> 的帮助， 把他的内容读通，基本步骤就参照他的。<br>最大的区别是我把U盘分了多个区，除了<code>GPT分区(EF00)</code>和<code>bios_grub分区(EF02)</code>，其他的分区平常都可以当普通U盘使用。</p>
</li>
</ul>
<h2 id="格式化U盘"><a href="#格式化U盘" class="headerlink" title="格式化U盘"></a>格式化U盘</h2><p>我在 <code>Opensuse 42.1</code> 系统操作的。</p>
<h3 id="U盘格式化为GPT分区"><a href="#U盘格式化为GPT分区" class="headerlink" title="U盘格式化为GPT分区"></a>U盘格式化为GPT分区</h3><p>工具: <code>parted</code>, <code>gdisk</code>。</p>
<h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><p>使用图像化工具 <code>parted</code> 将U盘格式化并建立分区。</p>
<ul>
<li>分区一： GPT分区，256Mb， 安装 <code>Grub</code></li>
<li>分区二： ext4分区，5G，数据盘</li>
<li>分区三： NTFS分区，剩下空间-1M，数据盘</li>
<li>分区四： 剩余最后1M，不要格式化！！！！！！！<br>分区二和分区三平常都可当一般U盘使用， 分区三 为兼容 <code>windows</code>系统， 分区二为安装 <code>centos</code> 等不支持 <code>ntfs</code>的系统。</li>
</ul>
<h4 id="bios-grub"><a href="#bios-grub" class="headerlink" title="bios_grub"></a>bios_grub</h4><p>使用<code>gdisk</code> 将最后一个分区标记为 <code>EF02</code>， 即<code>bios_grub分区</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰─<span class="comment"># gdisk /dev/sdb</span></span><br><span class="line">GPT fdisk (gdisk) version 0.8.8</span><br><span class="line"></span><br><span class="line">Partition table scan:</span><br><span class="line">  MBR: protective</span><br><span class="line">  BSD: not present</span><br><span class="line">  APM: not present</span><br><span class="line">  GPT: present</span><br><span class="line"></span><br><span class="line">Found valid GPT with protective MBR; using GPT.</span><br><span class="line"></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition number (3-128, default 3): </span><br><span class="line">First sector (34-31266782, default = 31264768) or &#123;+-&#125;size&#123;KMGTP&#125;: </span><br><span class="line">Last sector (31264768-31266782, default = 31266782) or &#123;+-&#125;size&#123;KMGTP&#125;: </span><br><span class="line">Current <span class="built_in">type</span> is <span class="string">&#x27;Linux filesystem&#x27;</span></span><br><span class="line">Hex code or GUID (L to show codes, Enter = 8300): EF02</span><br><span class="line">Changed <span class="built_in">type</span> of partition to <span class="string">&#x27;BIOS boot partition&#x27;</span></span><br><span class="line"></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line">Disk /dev/sdb: 31266816 sectors, 14.9 GiB</span><br><span class="line">Logical sector size: 512 bytes</span><br><span class="line">Disk identifier (GUID): 42BF9B08-57CA-4F18-8CB5-C3B06668B141</span><br><span class="line">Partition table holds up to 128 entries</span><br><span class="line">First usable sector is 34, last usable sector is 31266782</span><br><span class="line">Partitions will be aligned on 2048-sector boundaries</span><br><span class="line">Total free space is 2014 sectors (1007.0 KiB)</span><br><span class="line"></span><br><span class="line">Number  Start (sector)    End (sector)  Size       Code  Name</span><br><span class="line">   1            2048          526335   256.0 MiB   EF00  </span><br><span class="line">   2          526336        31264767   14.7 GiB    0700  </span><br><span class="line">   3        31264768        31266782   1007.5 KiB  EF02  BIOS boot partition</span><br><span class="line"></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line"></span><br><span class="line">Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING</span><br><span class="line">PARTITIONS!!</span><br><span class="line"></span><br><span class="line">Do you want to proceed? (Y/N): y</span><br><span class="line">OK; writing new GUID partition table (GPT) to /dev/sdb.</span><br><span class="line">The operation has completed successfully.</span><br></pre></td></tr></table></figure>

<h2 id="安装grub到U盘"><a href="#安装grub到U盘" class="headerlink" title="安装grub到U盘"></a>安装grub到U盘</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo mount /dev/sdb1 /mnt -o uid=<span class="variable">$USER</span>,gid=<span class="variable">$USER</span>  <span class="comment"># 没什么好说的，挂载U盘使用，加上uid和gid参数只是为了编辑文件不需要sudo而已</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grub安装到MBR</span></span><br><span class="line">$  sudo grub2-install --target=i386-pc --recheck --boot-directory=/mnt/boot /dev/sdb</span><br><span class="line">Installing <span class="keyword">for</span> i386-pc platform.</span><br><span class="line">Installation finished. No error reported.</span><br><span class="line"></span><br><span class="line"><span class="comment"># grub安装到ESP,特别注意--removable参数，安装到移动设备上一定要用这个参数</span></span><br><span class="line">$ sudo grub2-install --target x86_64-efi --efi-directory /mnt --boot-directory=/mnt/boot --removable</span><br><span class="line">Installing <span class="keyword">for</span> x86_64-efi platform.</span><br><span class="line">Installation finished. No error reported.</span><br></pre></td></tr></table></figure>
<p><code>grub2-install</code> 命令根据你的系统决定， 也可能是 <code>grub-install</code></p>
<h2 id="添加grub菜单"><a href="#添加grub菜单" class="headerlink" title="添加grub菜单"></a>添加grub菜单</h2><p>在<code>/mnt/boot/grub2</code>这个目录下，新建<code>grub.cfg</code>配置文件<br>例如： </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># path to the partition holding ISO images (using UUID)</span></span><br><span class="line">probe -u <span class="variable">$root</span> --<span class="built_in">set</span>=rootuuid</span><br><span class="line"><span class="built_in">set</span> imgdevpath=<span class="string">&quot;/dev/disk/by-uuid/<span class="variable">$rootuuid</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lsblk -f to find your UUID for data device</span></span><br><span class="line"><span class="built_in">set</span> ntfs_data_uuid=<span class="string">&quot;71E161DA3EB70972&quot;</span></span><br><span class="line"><span class="built_in">set</span> ext4_data_uuid=<span class="string">&quot;50a92fdb-4e11-47b8-889c-02f430d3a780&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># define globally (i.e outside any menuentry)</span></span><br><span class="line">insmod search_fs_uuid</span><br><span class="line">search --no-floppy --<span class="built_in">set</span>=isopart --fs-uuid <span class="variable">$ntfs_data_uuid</span></span><br><span class="line">search --no-floppy --<span class="built_in">set</span>=centos_iso_part --fs-uuid <span class="variable">$ext4_data_uuid</span>   <span class="comment"># centos no ntfs</span></span><br><span class="line"><span class="built_in">set</span> isopath=/iso  <span class="comment"># 定义iso文件存放的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义各种要启动的iso镜像名</span></span><br><span class="line"><span class="built_in">set</span> ubuntu=ubuntu-16.04.1-desktop-amd64.iso                  <span class="comment"># ubuntu桌面版镜像,支持12.04-16.04</span></span><br><span class="line"><span class="built_in">set</span> ubuntuserver=ubuntu-16.04.1-server-amd64.iso             <span class="comment"># ubuntu服务器版镜像,支持14.04-16.04</span></span><br><span class="line"><span class="built_in">set</span> debianlive=debian-live-8.6.0-amd64-gnome-desktop.iso     <span class="comment"># debian livecd镜像,支持debian8</span></span><br><span class="line"><span class="built_in">set</span> deepin15=deepin-15.3-amd64.iso                           <span class="comment"># deepin15镜像</span></span><br><span class="line"><span class="built_in">set</span> linuxmint=linuxmint-18.1-kde-64bit.iso                   <span class="comment"># linuxmint镜像,支持17-18</span></span><br><span class="line"><span class="built_in">set</span> ubuntukylin=ubuntukylin-16.04.1-desktop-amd64.iso        <span class="comment"># ubuntukylin镜像,支持14.04-16.04</span></span><br><span class="line"><span class="built_in">set</span> centosdvd=CentOS-7-x86_64-DVD-1511.iso                   <span class="comment"># centos DVD版镜像,包括DVD/Everything/Minimal/Netinstall镜像,支持6-7</span></span><br><span class="line"><span class="built_in">set</span> centoslive=CentOS-7-x86_64-LiveGNOME-1511.iso            <span class="comment"># centos livecd镜像,包括livecd/livedvd，支持7(6似乎不支持直接引导ISO,期待PR解决)</span></span><br><span class="line"><span class="built_in">set</span> opensuse=openSUSE-Leap-42.1-DVD-x86_64.iso               <span class="comment"># opensuse DVD安装镜像</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># grub模块配置</span></span><br><span class="line">loadfont unicode</span><br><span class="line"><span class="built_in">set</span> lang=zh_CN</span><br><span class="line">insmod all_video</span><br><span class="line">insmod gfxterm</span><br><span class="line">insmod gettext</span><br><span class="line">insmod gfxmenu</span><br><span class="line">insmod png</span><br><span class="line">insmod ext2</span><br><span class="line">insmod part_msdos</span><br><span class="line">insmod xfs</span><br><span class="line">insmod ntfs</span><br><span class="line">insmod loopback</span><br><span class="line">insmod iso9660</span><br><span class="line">terminal_output gfxterm</span><br><span class="line"><span class="built_in">set</span> menu_color_normal=cyan/blue</span><br><span class="line"><span class="built_in">set</span> menu_color_highlight=white/blue</span><br><span class="line">gfxmode keep</span><br><span class="line"><span class="built_in">set</span> vt_handoff=vt.handoff=7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题配置</span></span><br><span class="line"><span class="built_in">set</span> gfxmode=auto</span><br><span class="line"><span class="built_in">set</span> timeout_style=menu</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">timeout</span>=10</span><br><span class="line"><span class="built_in">set</span> theme=<span class="variable">$prefix</span>/themes/Tuxkiller2/theme.txt</span><br><span class="line"><span class="built_in">export</span> theme</span><br><span class="line"></span><br><span class="line">menuentry <span class="string">&#x27;从本地硬盘启动&#x27;</span> --class harddrive &#123;</span><br><span class="line">  <span class="built_in">set</span> root=(hd1)</span><br><span class="line">  chainloader +1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;(<span class="variable">$isopart</span>)<span class="variable">$isopath</span>/<span class="variable">$linuxmint</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  menuentry <span class="string">&quot;linuxmint-18.1-kde-64&quot;</span> --class linuxmint --class gnu-linux --class gnu --class os &#123;</span><br><span class="line">    <span class="built_in">set</span> isofile=<span class="string">&quot;<span class="variable">$isopath</span>/<span class="variable">$linuxmint</span>&quot;</span></span><br><span class="line">    loopback loop (<span class="variable">$isopart</span>)<span class="variable">$isofile</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入Linux Mint ...&#x27;</span></span><br><span class="line">    linux (loop)/casper/vmlinuz file=/cdrom/preseed/linuxmint.seed boot=casper iso-scan/filename=<span class="variable">$isofile</span> noeject noprompt splash locale=zh_CN.UTF-8 --</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入初始化内存盘 ...&#x27;</span></span><br><span class="line">    initrd (loop)/casper/initrd.lz</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;(<span class="variable">$isopart</span>)<span class="variable">$isopath</span>/<span class="variable">$ubuntu</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  menuentry <span class="string">&quot;Ubuntu Desktop ISO&quot;</span> --class ubuntu --class gnu-linux --class gnu --class os &#123;</span><br><span class="line">    <span class="built_in">set</span> isofile=<span class="string">&quot;<span class="variable">$isopath</span>/<span class="variable">$ubuntu</span>&quot;</span></span><br><span class="line">    loopback loop (<span class="variable">$isopart</span>)<span class="variable">$isofile</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入Ubuntu Desktop ...&#x27;</span></span><br><span class="line">    linux (loop)/casper/vmlinuz.efi file=/cdrom/preseed/ubuntu.seed boot=casper iso-scan/filename=<span class="variable">$isofile</span> noeject noprompt splash locale=zh_CN.UTF-8 --</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入初始化内存盘 ...&#x27;</span></span><br><span class="line">    initrd (loop)/casper/initrd.lz</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;(<span class="variable">$isopart</span>)<span class="variable">$isopath</span>/<span class="variable">$ubuntukylin</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  menuentry <span class="string">&quot;UbuntuKylin Desktop ISO&quot;</span> --class ubuntukylin --class gnu-linux --class gnu --class os&#123;</span><br><span class="line">    <span class="built_in">set</span> isofile=<span class="string">&quot;<span class="variable">$isopath</span>/<span class="variable">$ubuntukylin</span>&quot;</span></span><br><span class="line">    loopback loop (<span class="variable">$isopart</span>)<span class="variable">$isofile</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入UbuntuKylin Desktop ...&#x27;</span></span><br><span class="line">    linux (loop)/casper/vmlinuz.efi boot=casper iso-scan/filename=<span class="variable">$isofile</span> noeject noprompt splash locale=zh_CN.UTF-8 --</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入初始化内存盘 ...&#x27;</span></span><br><span class="line">    initrd (loop)/casper/initrd.lz</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特别注意: Ubuntu Server会出现安装的时候检测不到光驱的现象</span></span><br><span class="line"><span class="comment"># 此时手工进入shell下，将iso镜像挂载在/cdrom继续即可</span></span><br><span class="line"><span class="comment"># mount /dev/sdb1 /media</span></span><br><span class="line"><span class="comment"># mount -o loop /media/boot/iso/ubuntu-*-server-*.iso /cdrom</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;(<span class="variable">$isopart</span>)<span class="variable">$isopath</span>/<span class="variable">$ubuntuserver</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  menuentry <span class="string">&quot;Ubuntu Server ISO&quot;</span> --class ubuntu --class gnu-linux --class gnu --class os&#123;</span><br><span class="line">    <span class="built_in">set</span> isofile=<span class="string">&quot;<span class="variable">$isopath</span>/<span class="variable">$ubuntuserver</span>&quot;</span></span><br><span class="line">    loopback loop (<span class="variable">$isopart</span>)<span class="variable">$isofile</span></span><br><span class="line">    <span class="built_in">set</span> gfxpayload=keep</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入Ubuntu Server ...&#x27;</span></span><br><span class="line">    linux (loop)/install/vmlinuz file=/cdrom/preseed/ubuntu-server.seed iso-scan/filename=<span class="variable">$isofile</span> quiet ---</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入初始化内存盘 ...&#x27;</span></span><br><span class="line">    initrd (loop)/install/initrd.gz</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;(<span class="variable">$isopart</span>)<span class="variable">$isopath</span>/<span class="variable">$deepin15</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  menuentry <span class="string">&quot;Deepin 15 ISO&quot;</span> --class deepin --class gnu-linux --class gnu --class os&#123;</span><br><span class="line">    <span class="built_in">set</span> isofile=<span class="string">&quot;<span class="variable">$isopath</span>/<span class="variable">$deepin15</span>&quot;</span> </span><br><span class="line">    loopback loop (<span class="variable">$isopart</span>)<span class="variable">$isofile</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入Deepin ...&#x27;</span></span><br><span class="line">    linux (loop)/live/vmlinuz.efi boot=live config findiso=<span class="variable">$isofile</span> noeject noprompt locales=zh_CN.UTF-8 --</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入初始化内存盘 ...&#x27;</span></span><br><span class="line">    initrd (loop)/live/initrd.lz</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;(<span class="variable">$isopart</span>)<span class="variable">$isopath</span>/<span class="variable">$debianlive</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  menuentry <span class="string">&quot;Debian LiveCD ISO&quot;</span> --class debian --class gnu-linux --class gnu --class os&#123;</span><br><span class="line">    <span class="built_in">set</span> isofile=<span class="string">&quot;<span class="variable">$isopath</span>/<span class="variable">$debianlive</span>&quot;</span></span><br><span class="line">    loopback loop (<span class="variable">$isopart</span>)<span class="variable">$isofile</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入Debian LiveCD ...&#x27;</span></span><br><span class="line">    linux (loop)/live/vmlinuz boot=live config findiso=<span class="variable">$isofile</span> noeject noprompt locales=zh_CN.UTF-8 --</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入初始化内存盘 ...&#x27;</span></span><br><span class="line">    initrd (loop)/live/initrd.img</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;(<span class="variable">$centos_iso_part</span>)<span class="variable">$isopath</span>/<span class="variable">$centosdvd</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  menuentry <span class="string">&quot;CentOS-7-x86_64-DVD-1511&quot;</span> --class centos --class gnu-linux --class gnu --class os&#123;</span><br><span class="line">    <span class="built_in">set</span> isofile=<span class="string">&quot;<span class="variable">$isopath</span>/<span class="variable">$centosdvd</span>&quot;</span></span><br><span class="line">    loopback loop (<span class="variable">$centos_iso_part</span>)<span class="variable">$isofile</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入CentOS DVD ...&#x27;</span></span><br><span class="line">    linux (loop)/isolinux/vmlinuz inst.stage2=hd:UUID=<span class="variable">$ext4_data_uuid</span>:/<span class="variable">$isofile</span> inst.lang=zh_CN.UTF-8 rhgb</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入初始化内存盘 ...&#x27;</span></span><br><span class="line">    initrd (loop)/isolinux/initrd.img</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;(<span class="variable">$isopart</span>)<span class="variable">$isopath</span>/<span class="variable">$opensuse</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">menuentry <span class="string">&#x27;openSUSE-42.1-DVD-x86_64&#x27;</span> --class opensuse --class gnu-linux --class gnu --class os&#123;</span><br><span class="line">    <span class="built_in">set</span> isofile=<span class="string">&quot;<span class="variable">$isopath</span>/<span class="variable">$opensuse</span>&quot;</span></span><br><span class="line">    loopback loop (<span class="variable">$isopart</span>)<span class="variable">$isofile</span></span><br><span class="line">    linux (loop)/boot/x86_64/loader/linux install=hd:<span class="variable">$isofile</span></span><br><span class="line">    initrd (loop)/boot/x86_64/loader/initrd</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;(<span class="variable">$isopart</span>)<span class="variable">$isopath</span>/<span class="variable">$centoslive</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  menuentry <span class="string">&quot;CentOS LiveCD ISO&quot;</span> --class centos --class gnu-linux --class gnu --class os&#123;</span><br><span class="line">    <span class="built_in">set</span> isofile=<span class="string">&quot;<span class="variable">$isopath</span>/<span class="variable">$centoslive</span>&quot;</span></span><br><span class="line">    loopback loop (<span class="variable">$isopart</span>)<span class="variable">$isofile</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入CentOS LiveCD ...&#x27;</span></span><br><span class="line">    probe -l -s isolable (loop)</span><br><span class="line">    linux (loop)/isolinux/vmlinuz0 boot=isolinux root=live:LABEL=<span class="string">&quot;<span class="variable">$isolable</span>&quot;</span> iso-scan/filename=<span class="variable">$isofile</span> rd.live.image LANG=zh_CN rd.locale.LANG=zh_CN rhgb</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;载入初始化内存盘 ...&#x27;</span></span><br><span class="line">    initrd (loop)/isolinux/initrd0.img</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">menuentry <span class="string">&#x27;关闭系统&#x27;</span> --class halt &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;关机中 ...&#x27;</span></span><br><span class="line">  halt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">menuentry <span class="string">&#x27;重启系统&#x27;</span> --class reboot &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;重启系统中 ...&#x27;</span></span><br><span class="line">  reboot</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><p> 美化启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对应的把下面的/dev/sdb1替换成你的U盘的ESP分区</span></span><br><span class="line">sudo mount /dev/sdb1 /mnt/  -o uid=<span class="variable">$USER</span>,gid=<span class="variable">$USER</span>,utf8=1</span><br><span class="line"><span class="built_in">cp</span> -R themes/ /mnt/boot/grub2/</span><br></pre></td></tr></table></figure>

<p><code>themes</code> 请参考 <a href="http://git.oschina.net/abcfy2/grub-cfg">Feng_Yu的</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://wiki.archlinux.org/index.php/Multiboot_USB_drive">Multiboot USB drive</a></p>
<h2 id="Ventoy"><a href="#Ventoy" class="headerlink" title="Ventoy"></a>Ventoy</h2><p>好了，现成的来了<br><a href="https://www.ventoy.net/cn/doc_disk_layout.html">Ventoy</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>usb</tag>
        <tag>grub</tag>
        <tag>BIOS</tag>
        <tag>UEFI</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 服务器安全和故障排除</title>
    <url>/2017/04/22/linux/security2trouble/</url>
    <content><![CDATA[<p>Linux 服务器安全和故障排除， 读 高俊峰 之 【高性能Linux服务器构建实战】，记录思路和工具。</p>
<p>主要内容<br>安全<br>故障排除</p>
<span id="more"></span>

<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>安全</tag>
        <tag>故障</tag>
      </tags>
  </entry>
  <entry>
    <title>centos vnc远程桌面</title>
    <url>/2017/08/07/linux/vnc/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>大部分情况下Linux的系统管理员都是通过SSH完成管理任务，特殊情况下可能会需要图形会话。VNC服务器就是这样一个自由开源软件，他可以让用户远程访问服务器的桌面环境。<br>下面就是关于CentOS 7 上配置VNC服务的内容。</p>
<p><em>更新历史</em><br>2017-8-7 增加相关路径说明</p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/redhat-release #only redhat release</span><br><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install tigervnc-server tigervnc</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul>
<li><p>创建一个新的配置文件</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /lib/systemd/system/vncserver@.service /lib/systemd/system/vncserver@:1.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑<code>vncserver@:1.service</code><br>根据远程桌面用户修改配置文件， 替换<code>&lt;USER&gt;</code>部分;<br>Type改成<code>simple</code>，默认的<code>forking</code>可能导致服务启动失败。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Remote desktop service (VNC)</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">## Type=forking</span><br><span class="line">Type=simple</span><br><span class="line"></span><br><span class="line"># Clean any existing files in /tmp/.X11-unix environment</span><br><span class="line">ExecStartPre=/bin/sh -c &#x27;/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :&#x27;</span><br><span class="line">## ExecStart=/usr/sbin/runuser -l &lt;USER&gt; -c &quot;/usr/bin/vncserver %i&quot;</span><br><span class="line">## PIDFile=/home/&lt;USER&gt;/.vnc/%H%i.pid</span><br><span class="line">ExecStart=/usr/sbin/runuser -l root -c &quot;/usr/bin/vncserver %i&quot;</span><br><span class="line">PIDFile=/root/.vnc/%H%i.pid</span><br><span class="line">ExecStop=/bin/sh -c &#x27;/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :&#x27;</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="更新systemctl"><a href="#更新systemctl" class="headerlink" title="更新systemctl"></a>更新systemctl</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<h3 id="VNC密码"><a href="#VNC密码" class="headerlink" title="VNC密码"></a>VNC密码</h3><p>设置对应远程桌面用户的VNC密码， 此密码不同于用户登录密码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vncserver</span><br></pre></td></tr></table></figure>

<p>如果需要更多用户连接，那么需要再创建配置文件和端口， 就是重复上面的步骤；如创建<code>vncserver@:2.service</code>， 并替换里面的用户名。</p>
<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start vncserver@:1.service</span><br></pre></td></tr></table></figure>


<h3 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable vncserver@:1.service</span><br></pre></td></tr></table></figure>

<h2 id="相关路径"><a href="#相关路径" class="headerlink" title="相关路径"></a>相关路径</h2><p><code>PIDFile</code> <code>logFile</code> 都由 配置文件 指定; 如上的配置文件， 这2个文件都在 <code>/root/.vnc/</code> 中<br>临时文件在 <code>/tmp/.X11-unix/Xn</code> 中， n 同 配置文件的含义。</p>
<p>如果vnc 服务启动异常， 可将上面3个文件都清除， 然后重新启动。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vncserver -list #显示</span><br><span class="line">vncserver :n #启动</span><br><span class="line">vncserver -kill n #关闭</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>VNC本身服务默认使用5900， 不同用户使用VNC会获得不同的端口（都是5900的子端口），配置文件名里的数字就指定改用户使用5900的具体子端口，如上面root用户就使用5901端口。</p>
<p>客户端连接时需要采用<code>ip:端口</code>格式。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vnc</tag>
      </tags>
  </entry>
  <entry>
    <title>linux wine 32 &amp; 64</title>
    <url>/2017/09/26/linux/wine/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>  wine在linux中很常用，目前是32位和64位的软件都有；在此讨论在64位centos 7中安装32位和64位的wine。<br>还有wine的中文环境下一些乱码问题。</p>
<p><em>更新历史</em><br>2017-09-26 增加 同时 wine 32和64 的应用</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="删除已有版本"><a href="#删除已有版本" class="headerlink" title="删除已有版本"></a>删除已有版本</h3><pre><code>yum erase wine wine-*
#zsh中yum erase wine &quot;wine-*&quot;
</code></pre>
<h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><pre><code>yum install samba-winbind-clients -y
yum groupinstall &#39;Development Tools&#39; -y
yum install libjpeg-turbo-devel libtiff-devel freetype-devel -y
yum install libgcc.i686 libX11-devel.i686 freetype-devel.i686 gnutls-devel.i686 libxml2-devel.i686 libjpeg-turbo-devel.i686 libpng-devel.i686 libXrender-devel.i686 glibc-devel.i686 glibc-devel ibstdc++-devel.i686  -y 
</code></pre>
<p><a href="http://www.cyberciti.biz/tips/compile-32bit-application-using-gcc-64-bit-linux.html">参考</a></p>
<h3 id="下载wine源码"><a href="#下载wine源码" class="headerlink" title="下载wine源码"></a>下载wine源码</h3><pre><code>ver=1.9.21
cd /usr/src
wget http://dl.winehq.org/wine/source/1.9/wine-$&#123;ver&#125;.tar.bz2 -O wine-$&#123;ver&#125;.tar.bz2
tar xjf wine-$&#123;ver&#125;.tar.bz2
cd wine-$&#123;ver&#125;/
mkdir -p wine32 wine64
</code></pre>
<h3 id="wine-64-编译安装"><a href="#wine-64-编译安装" class="headerlink" title="wine 64 编译安装"></a>wine 64 编译安装</h3><pre><code>cd wine64
../configure --enable-win64
make -j 4
make install
</code></pre>
<h3 id="wine-32-编译安装"><a href="#wine-32-编译安装" class="headerlink" title="wine 32 编译安装"></a>wine 32 编译安装</h3><pre><code>cd ../wine32
../configure --with-wine64=../wine64
make -j 4
make install
</code></pre>
<h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><pre><code>$ file `which wine`
/usr/local/bin/wine: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=a83b9f0916e6c0d5427e2c38a172c93bd8023d98, not stripped
$ file `which wine64`
/usr/local/bin/wine64: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=4d8e8468402bc63bd2a72c59c57fcad332235d41, not stripped
</code></pre>
<h2 id="中文字体库"><a href="#中文字体库" class="headerlink" title="中文字体库"></a>中文字体库</h2><h3 id="安装字体管理工具"><a href="#安装字体管理工具" class="headerlink" title="安装字体管理工具"></a>安装字体管理工具</h3><pre><code>yum install fontconfig mkfontscale
</code></pre>
<h3 id="字体库"><a href="#字体库" class="headerlink" title="字体库"></a>字体库</h3><pre><code>mkdir -pv /usr/share/fonts/chinese/TrueType
</code></pre>
<p>从Windows字体目录C:\Windows\Fonts 拷贝需要的字体库到刚刚建立目录</p>
<h3 id="建立字体缓存"><a href="#建立字体缓存" class="headerlink" title="建立字体缓存"></a>建立字体缓存</h3><pre><code>cd /usr/share/fonts/chinese/TrueType
mkfontscale
mkfontdir
fc-cache -fv
fc-list |grep SimSun
</code></pre>
<h2 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h2><p><a href="www.oschina.net/question/12_2853">参考</a></p>
<h2 id="wine-32和64-的应用"><a href="#wine-32和64-的应用" class="headerlink" title="wine 32和64 的应用"></a>wine 32和64 的应用</h2><p><a href="https://wiki.archlinux.org/index.php/Wine_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#WINEPREFIX">WINEPREFIX 和 WINEARCH </a></p>
<h3 id="WINEPREFIX"><a href="#WINEPREFIX" class="headerlink" title="WINEPREFIX"></a>WINEPREFIX</h3><p>通过设置WINEPREFIX环境变量，可以更改Wine系统目录的位置。如果希望让不同的Windows程序使用不同的系统环境或配置，这一变量会非常有用。<br>比如同时需要wine 32位和64位的程序， 就需要设置32位和64位的Wine系统目录。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">env</span> WINEPREFIX=~/.win-32  wine32  32A程序.exe</span><br><span class="line"><span class="built_in">env</span> WINEPREFIX=~/.win-64  wine64  64B程序.exe</span><br></pre></td></tr></table></figure>

<h3 id="WINEARCH"><a href="#WINEARCH" class="headerlink" title="WINEARCH"></a>WINEARCH</h3><p>对于64位用户，如果使用[multilib]仓库里的Wine，默认创建的系统目录是64位环境的。若想使用纯32位环境，修改WINEARCH 变量win32为即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">WINEARCH=win32 WINEPREFIX=~/win32 winecfg </span><br><span class="line">WINEPREFIX=~/win64 winecfg</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>wine</tag>
      </tags>
  </entry>
  <entry>
    <title>二十一条军规</title>
    <url>/2015/08/19/methodology/methodology/</url>
    <content><![CDATA[<h2 id="电脑是不会错的"><a href="#电脑是不会错的" class="headerlink" title="电脑是不会错的"></a>电脑是不会错的</h2><ul>
<li>电脑是不会错的</li>
<li>要出错都是你的代码错了，so去查你的代码</li>
<li>如果发现电脑错了，参考第二条</li>
</ul>
<h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><p>分析处理问题，二分法挺好</p>
<h2 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h2><p>统一项目组的名词用语（中文，英文，简写）</p>
<h2 id="阶段性项目小结"><a href="#阶段性项目小结" class="headerlink" title="阶段性项目小结"></a>阶段性项目小结</h2><h2 id="每周codereview"><a href="#每周codereview" class="headerlink" title="每周codereview"></a>每周codereview</h2><h2 id="每周-x2F-每月-分享沙龙"><a href="#每周-x2F-每月-分享沙龙" class="headerlink" title="每周&#x2F;每月 分享沙龙"></a>每周&#x2F;每月 分享沙龙</h2><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><ul>
<li>一级目录： 共通&#x2F;base， 业务别</li>
<li>二级目录： 文件类型别，如 controller， view， entity；业务内也可以提取共通；</li>
</ul>
<h2 id="团队文化"><a href="#团队文化" class="headerlink" title="团队文化"></a>团队文化</h2><ul>
<li>你的价值不仅仅体现在计划内的工作</li>
<li>付出与得到</li>
<li>用心，科学偷懒</li>
</ul>
]]></content>
      <tags>
        <tag>methodology</tag>
      </tags>
  </entry>
  <entry>
    <title>activemq (一) 简介</title>
    <url>/2015/09/11/mq/activemq/</url>
    <content><![CDATA[<p>以下全是linux系统上的操作，在opensuse 13.2 上实际操作。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>JDK 1.6 以上</li>
<li>JAVA_HOME 配置好</li>
<li><a href="http://activemq.apache.org/">官网</a></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>1 下载 activemq gzip 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget http://ftp.meisei-u.ac.jp/mirror/apache/dist/activemq/5.12.0/apache-activemq-5.12.0-bin.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>2 解压缩</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tar zxvf activemq-x.x.x.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>3 确认权限<br>确认activemq 是否有执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd [activemq_install_dir]/bin</span><br><span class="line">$ chmod 755 activemq</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>进入安装目录的bin路径，启动activemq</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd [activemq_install_dir]/bin</span><br><span class="line">$ ./activemq start </span><br></pre></td></tr></table></figure>

<p>正常输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO: Loading &#x27;[activemq_install_dir]/bin/env&#x27;</span><br><span class="line">INFO: Using java &#x27;/usr/lib64/jvm/java/bin/java&#x27;</span><br><span class="line">INFO: Starting - inspect logfiles specified in logging.properties and log4j.properties to get details</span><br><span class="line">INFO: pidfile created : &#x27;[activemq_install_dir]/data/activemq.pid&#x27; (pid &#x27;xxxx&#x27;)</span><br></pre></td></tr></table></figure>



<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>网页监控 <a href="http://localhost:8161/admin">http://localhost:8161/admin</a><br>默认用户密码 admin&#x2F;admin</p>
<p>可以在 conf&#x2F;jetty-real.properties 中修改</p>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><ul>
<li><p>网页监控<br>端口： 8161<br>配置： [activemq_install_dir]&#x2F;conf&#x2F;jetty.xml </p>
</li>
<li><p>activeMq 服务<br>openwire： 61616<br>amqp    ： 5672<br>stomp   ： 61613<br>mqtt    ： 1883<br>ws      ： 61614<br>配置： [activemq_install_dir]&#x2F;conf&#x2F;activemq.xml</p>
</li>
</ul>
<h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd [activemq_install_dir]/bin</span><br><span class="line">$ ./activemq stop </span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>[activemq_install_dir]&#x2F;conf&#x2F;activemq.xml </p>
<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p><a href="http://activemq.apache.org/clustering.html">集群</a></p>
<h2 id="web-demo"><a href="#web-demo" class="headerlink" title="web demo"></a>web demo</h2><p>官网说 启动 activemq 后， <a href="http://localhost:8161/demo">http://localhost:8161/demo</a>直接能访问， 其实5.12.0版本是不行的，不行的，不行的。</p>
<p>需要在 conf&#x2F;jetty 中增加配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean class=&quot;org.eclipse.jetty.webapp.WebAppContext&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;contextPath&quot; value=&quot;/admin&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;resourceBase&quot; value=&quot;$&#123;activemq.home&#125;/webapps/admin&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;logUrlOnStart&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 需要增加 --&gt;</span><br><span class="line">&lt;bean class=&quot;org.eclipse.jetty.webapp.WebAppContext&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;contextPath&quot; value=&quot;/demo&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;resourceBase&quot; value=&quot;$&#123;activemq.home&#125;/webapps-demo/demo/&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;logUrlOnStart&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>重启activemq， <a href="http://localhost:8161/demo">http://localhost:8161/demo</a>可以访问了， enjoy it ！</p>
<h2 id="activemq集合贴"><a href="#activemq集合贴" class="headerlink" title="activemq集合贴"></a><a href="http://giveme5.top/2015/09/11/mq/mq/#ActiveMQ">activemq集合贴</a></h2>]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>activemq</tag>
      </tags>
  </entry>
  <entry>
    <title>activemq （二）  集成Spring-远程调用</title>
    <url>/2015/09/18/mq/activemq2/</url>
    <content><![CDATA[<p>上篇介绍了 <a href="http://giveme5.top/2015/09/11/mq/activemq/">activemq 的安装和使用</a>，这篇介绍下集成 spring 最简单的运用，远程调用。注意，这种方式是没有事务控制的。</p>
<h2 id="加入activemq-的-jar"><a href="#加入activemq-的-jar" class="headerlink" title="加入activemq 的 jar"></a>加入activemq 的 jar</h2><p>maven 方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;activemq-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.12.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>


<h2 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h2><ul>
<li><p>接口（服务端和客户端都要有）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface IGmGameAchvService</span><br><span class="line">&#123;</span><br><span class="line">	/**</span><br><span class="line">	 * 根据ID获取对象</span><br><span class="line">	 * @param companyId</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	GmGameAchvEntity findById(Long id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现（服务端）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service(&quot;GmGameAchvServiceImpl&quot;)</span><br><span class="line">public class GmGameAchvServiceImpl implements IGmGameAchvService</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public GmGameAchvEntity findById(Long id)</span><br><span class="line">    &#123;</span><br><span class="line">	GmGameAchvEntity achv = new GmGameAchvEntity();</span><br><span class="line">	achv.setId(1L);</span><br><span class="line">        return achv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>如下内容服务端和客户端都需要配置<br>1 jmsConnectionFactory<br>2 jmsQueue</p>
<p>服务端另需配置<br>3 MessageListenerContainer<br>4 ServiceExporter</p>
<p>客户端另需配置<br>5 ProxyFactoryBean</p>
<h3 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h3><p>以下都是java based的配置，xml的配置可以参考 <a href="http://docs.spring.io/spring/docs/4.2.2.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#remoting-jms">Spring doc</a></p>
<ul>
<li>jmsConnectionFactory  jmsQueue</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class JmsConfiguration</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ActiveMQConnectionFactory jmsConnectionFactory()&#123;</span><br><span class="line">        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory();</span><br><span class="line">        connectionFactory.setBrokerURL(&quot;tcp://localhost:61616&quot;);</span><br><span class="line">        return connectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ActiveMQQueue jmsQueue()&#123;</span><br><span class="line">        ActiveMQQueue queue = new ActiveMQQueue(&quot;spring-activemq&quot;);</span><br><span class="line">        return queue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li><p>服务端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class JmsServerConfiguration</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IGmGameAchvService gameAchvService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ActiveMQConnectionFactory jmsConnectionFactory;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ActiveMQQueue jmsQueue;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public JmsInvokerServiceExporter service()</span><br><span class="line">    &#123;</span><br><span class="line">        JmsInvokerServiceExporter service = new JmsInvokerServiceExporter();</span><br><span class="line">        service.setServiceInterface(IGmGameAchvService.class);</span><br><span class="line">        service.setService(gameAchvService);</span><br><span class="line"></span><br><span class="line">        return service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public SimpleMessageListenerContainer msgListenerContainer()</span><br><span class="line">    &#123;</span><br><span class="line">        SimpleMessageListenerContainer msgListenerContainer = new SimpleMessageListenerContainer();</span><br><span class="line">        msgListenerContainer.setConnectionFactory(jmsConnectionFactory);</span><br><span class="line">        msgListenerContainer.setDestination(jmsQueue);</span><br><span class="line">        msgListenerContainer.setConcurrentConsumers(3);</span><br><span class="line">        msgListenerContainer.setMessageListener(service());</span><br><span class="line">        return msgListenerContainer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
<li><p>客户端<br>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class JmsClientConfiguration</span><br><span class="line">&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private ActiveMQConnectionFactory jmsConnectionFactory;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ActiveMQQueue jmsQueue;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public JmsInvokerProxyFactoryBean achvService()</span><br><span class="line">    &#123;</span><br><span class="line">        JmsInvokerProxyFactoryBean service = new JmsInvokerProxyFactoryBean();</span><br><span class="line">        service.setServiceInterface(IGmGameAchvService.class);</span><br><span class="line">        service.setConnectionFactory(jmsConnectionFactory);</span><br><span class="line">        service.setQueue(jmsQueue);</span><br><span class="line">        return service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IGmGameAchvService gmservice = (IGmGameAchvService) service;</span><br><span class="line">GmGameAchvEntity achv = gmservice.findById(1L);</span><br><span class="line">if (achv == null)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(&quot;achv is null&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(&quot;achv id=&quot; + achv.getId());</span><br><span class="line">&#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure>



<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>正常启动后， 在 activemq 的监控中可以看到相应内容。<br>如<br><a href="http://localhost:8161/admin/queues.jsp">Queues</a><br><a href="http://localhost:8161/admin/connections.jsp">connections</a></p>
<h2 id="activemq集合贴"><a href="#activemq集合贴" class="headerlink" title="activemq集合贴"></a><a href="http://giveme5.top/2015/09/11/mq/mq/#ActiveMQ">activemq集合贴</a></h2>]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>activemq</tag>
      </tags>
  </entry>
  <entry>
    <title>activemq(三) Spring集成 - 消息驱动</title>
    <url>/2015/09/25/mq/activemq3/</url>
    <content><![CDATA[<p>上篇介绍了 <a href="">集成Spring-远程调用</a>, 本次介绍集成 Spring， 常规JMS，消息驱动。主角是 activeMq， JmsTemplate， @JmsListener。</p>
<ul>
<li>activeMq 是消息总线，JMS provider； </li>
<li>JmsTemplate 是由 Spring提供的消息模板，简化消息生产者和消费者端的代码开发量。就是封装了 连接JMS provider（如ActiveMQ），建立JMS Session（如QueueSession），建立消息生产者，建立消费者，发送消息，接收消息；</li>
<li>@JmsListener 由 Spring 提供的最简单的消息接收端操作方式。</li>
</ul>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="必须的jar"><a href="#必须的jar" class="headerlink" title="必须的jar"></a>必须的jar</h3><p>maven管理的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;activemq-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.12.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>activemq 的 PooledConnectionFactory 会调用 commons-pool2。</p>
<h3 id="PropertySourcesPlaceholderConfigurer"><a href="#PropertySourcesPlaceholderConfigurer" class="headerlink" title="PropertySourcesPlaceholderConfigurer"></a>PropertySourcesPlaceholderConfigurer</h3><p>配置<code>PropertySourcesPlaceholderConfigurer</code>， 下面用得着，比较优雅。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ApplicationConfiguration</span><br><span class="line">&#123;</span><br><span class="line">    //To resolve $&#123;&#125; in @Value (in *.properties files by @PropertySource included)</span><br><span class="line">    @Bean</span><br><span class="line">    public static PropertySourcesPlaceholderConfigurer propertyConfigInDev() &#123;</span><br><span class="line">      return new PropertySourcesPlaceholderConfigurer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>消息生产者和消费者都需要。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line">    import org.apache.activemq.command.ActiveMQQueue;</span><br><span class="line">import org.apache.activemq.pool.PooledConnectionFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.PropertySource;</span><br><span class="line">import org.springframework.core.env.Environment;</span><br><span class="line">import org.springframework.jms.annotation.EnableJms;</span><br><span class="line">import org.springframework.jms.config.DefaultJmsListenerContainerFactory;</span><br><span class="line">import org.springframework.jms.connection.CachingConnectionFactory;</span><br><span class="line">import org.springframework.jms.core.JmsTemplate;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableJms //开启jsm 注解</span><br><span class="line">@PropertySource(&#123; &quot;classpath:conf/jms.properties&quot;&#125;) // 加载配置资源文件</span><br><span class="line">public class JmsConfiguration</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Environment env;</span><br><span class="line"></span><br><span class="line">    //ConnectionFactory</span><br><span class="line">    @Bean</span><br><span class="line">    public ActiveMQConnectionFactory jmsConnectionFactory()</span><br><span class="line">    &#123;</span><br><span class="line">        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory();</span><br><span class="line">        connectionFactory.setBrokerURL(&quot;tcp://localhost:61616&quot;);</span><br><span class="line">        return connectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //activeMq PooledConnectionFactory</span><br><span class="line">    @Bean</span><br><span class="line">    public PooledConnectionFactory activeMqPooledConnectionFactory()</span><br><span class="line">    &#123;</span><br><span class="line">        PooledConnectionFactory jmsFactory = new PooledConnectionFactory();</span><br><span class="line">        jmsFactory.setConnectionFactory(jmsConnectionFactory());</span><br><span class="line">        return jmsFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //spring CachingConnectionFactory</span><br><span class="line">    @Bean</span><br><span class="line">    public CachingConnectionFactory springCachingConnectionFactory()</span><br><span class="line">    &#123;</span><br><span class="line">        CachingConnectionFactory jmsFactory = new CachingConnectionFactory();</span><br><span class="line">        jmsFactory.setTargetConnectionFactory(jmsConnectionFactory());</span><br><span class="line">        return jmsFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Queue</span><br><span class="line">    @Bean</span><br><span class="line">    public ActiveMQQueue jmsQueue()</span><br><span class="line">    &#123;</span><br><span class="line">        ActiveMQQueue queue = new ActiveMQQueue(env.getProperty(&quot;testQueue&quot;));</span><br><span class="line">        return queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ListenerContainerFactory， @EnableJms 需要这个默认 bean</span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultJmsListenerContainerFactory jmsListenerContainerFactory() &#123;</span><br><span class="line">        DefaultJmsListenerContainerFactory factory =</span><br><span class="line">                new DefaultJmsListenerContainerFactory();</span><br><span class="line">        factory.setConnectionFactory(activeMqPooledConnectionFactory());</span><br><span class="line">        factory.setConcurrency(&quot;3-10&quot;);</span><br><span class="line">        return factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Spring jmsTemplate</span><br><span class="line">    @Bean</span><br><span class="line">    public JmsTemplate myJmsTemplate()</span><br><span class="line">    &#123;</span><br><span class="line">        JmsTemplate jmsTp = new JmsTemplate();</span><br><span class="line">        jmsTp.setDefaultDestination(jmsQueue());</span><br><span class="line">        jmsTp.setConnectionFactory(activeMqPooledConnectionFactory());</span><br><span class="line">        return jmsTp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>补充说明：</p>
<ul>
<li>@EnableJms：开启 JMS 注解， 这样 @JmsListener 等注解才会生效；默认需要jmsListenerContainerFactory 这个 Bean。</li>
<li>activeMq PooledConnectionFactory 和 springCachingConnectionFactory 同等作用，可以替换。</li>
<li>testQueue 具体value 在 jms.properties 里配置，类似常量。</li>
</ul>
<h2 id="消息发送和接收"><a href="#消息发送和接收" class="headerlink" title="消息发送和接收"></a>消息发送和接收</h2><p>首先看代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service(&quot;GmGameAchvServiceImpl&quot;)</span><br><span class="line">@PropertySource(&#123; &quot;classpath:conf/jms.properties&quot;&#125;)</span><br><span class="line">public class GmGameAchvServiceImpl</span><br><span class="line">&#123;</span><br><span class="line">    @Resource(name = &quot;myJmsTemplate&quot;)</span><br><span class="line">    private JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 消息接收</span><br><span class="line">    @JmsListener(destination = &quot;$&#123;testQueue&#125;&quot;)</span><br><span class="line">    public void JmsReceiveTest(String data)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;jms ----------------------------- &quot; + data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //消息发送</span><br><span class="line">    public void jmsSendTest()</span><br><span class="line">    &#123;</span><br><span class="line">        int numberOfMessages = 10;</span><br><span class="line">        StringBuilder payload = null;</span><br><span class="line">        for (int i = 0; i &lt; numberOfMessages; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            payload = new StringBuilder();</span><br><span class="line">            payload.append(&quot;Message [&quot;).append(i).append(&quot;] sent at: &quot;).append(new Date());</span><br><span class="line">            final int finalI = i;</span><br><span class="line">            final StringBuilder finalPayload = payload;</span><br><span class="line">            jmsTemplate.send((Session session) -&gt; &#123;</span><br><span class="line">                TextMessage message = session.createTextMessage(finalPayload.toString());</span><br><span class="line">                message.setIntProperty(&quot;messageCount&quot;, finalI);</span><br><span class="line">                return message;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>消息发送<br>方法 <code>jmsSendTest</code>， 利用 jmsTemplate 很方便</li>
<li>消息接收<br><code>JmsReceiveTest</code>， 使用了 <code>@JmsListener</code>，这是最简单的方式，比 jmsTemplate 更简单。<br><code>@JmsListener</code> 需要制定 <code>destination</code>， 这里 <code>$&#123;testQueue&#125;</code> 的值由 <code>conf/jms.properties</code> 里具体制定， 由上文提到的 <code>PropertySourcesPlaceholderConfigurer</code> 负责转化。 如此在一个配置文件里配置，多个地方使用，如需改动，仅需修改配置文件，不用修改源代码。</li>
</ul>
<h2 id="消息数据转换-Message-Converters"><a href="#消息数据转换-Message-Converters" class="headerlink" title="消息数据转换 Message Converters"></a>消息数据转换 Message Converters</h2><p>Spring 会自动进行消息转换， 比如上面 <code>jmsSendTest</code> 发送的是 <code>TextMessage</code>， <code>JmsReceiveTest</code> 用 String 类型参数接收就好。POJO 对象一样可以如此操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">@JmsListener(destination = &quot;$&#123;testQueue&#125;&quot;)</span><br><span class="line">public void JmsReceiveTest(GmGameAchvEntity data)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(&quot;jms ----------------------------- &quot; + data.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void jmsSendTest()</span><br><span class="line">&#123;</span><br><span class="line">    int numberOfMessages = 10;</span><br><span class="line">    StringBuilder payload = null;</span><br><span class="line">    for (int i = 0; i &lt; numberOfMessages; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        final int finalI = i;</span><br><span class="line">        GmGameAchvEntity achv = new GmGameAchvEntity();</span><br><span class="line">        achv.setId((long) i);</span><br><span class="line">        jmsTemplate.send((Session session) -&gt; &#123;</span><br><span class="line">            ObjectMessage message = session.createObjectMessage(achv);</span><br><span class="line">            message.setIntProperty(&quot;messageCount&quot;, finalI);</span><br><span class="line">            return message;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如此这般就好了，是不是 很简单方便。</p>
<h2 id="响应管理"><a href="#响应管理" class="headerlink" title="响应管理"></a>响应管理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@JmsListener(destination = &quot;myQueue&quot;)</span><br><span class="line">@SendTo(&quot;queueOut&quot;)</span><br><span class="line">public OrderStatus processOrder(Order order) &#123;</span><br><span class="line">    // order processing</span><br><span class="line">    return status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@SendTo</code> 就可以返回值 到 <code>queueOut</code> 这个destination</p>
<p>～～～～～～～ 嗯嗯， 很不错的样子 ：）</p>
<h2 id="activemq集合贴"><a href="#activemq集合贴" class="headerlink" title="activemq集合贴"></a><a href="http://giveme5.top/2015/09/11/mq/mq/#ActiveMQ">activemq集合贴</a></h2>]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>activemq</tag>
      </tags>
  </entry>
  <entry>
    <title>消息总线(消息中间件)</title>
    <url>/2015/09/11/mq/mq/</url>
    <content><![CDATA[<p>几个消息总线(龟速更新。。。)</p>
<h2 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h2><p>是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的JMS Provider实现。</p>
<ul>
<li><a href="http://activemq.apache.org/">官网</a></li>
<li>详细<br><a href="http://giveme5.top/2015/09/11/mq/activemq/">安装</a><br><a href="http://giveme5.top/2015/09/18/mq/activemq2/">集成Spring 远程调用</a><br><a href="http://giveme5.top/2015/09/25/mq/activemq3/">集成Spring 消息驱动</a></li>
</ul>
<h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>由LinkedIn开发的一个分布式的消息系统，开源贡献给了Apache</p>
<ul>
<li><p><a href="http://kafka.apache.org/">官网</a></p>
</li>
<li><p><a href="http://www.infoq.com/cn/kafka/">info系列</a></p>
</li>
</ul>
<h2 id="Apollo"><a href="#Apollo" class="headerlink" title="Apollo"></a>Apollo</h2><p>ActiveMQ的升级版，重新改写了内核，速度飞快，功能目前还不完全。</p>
<ul>
<li><a href="https://activemq.apache.org/apollo/">官网</a></li>
</ul>
<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>RabbitMQ是实现AMQP（高级消息队列协议）的消息中间件。Erlang语言编写的。</p>
<ul>
<li><a href="https://www.rabbitmq.com/">官网</a></li>
<li>概述<br><a href="http://lynnkong.iteye.com/blog/1699684">链接 关于RabbitMQ</a></li>
</ul>
<h2 id="常用Message-Queue对比-（转载-info-郭俊）"><a href="#常用Message-Queue对比-（转载-info-郭俊）" class="headerlink" title="常用Message Queue对比 （转载 info 郭俊）"></a>常用Message Queue对比 （转载 info 郭俊）</h2><ul>
<li>RabbitMQ</li>
</ul>
<p>RabbitMQ是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正因如此，它非常重量级，更适合于企业级的开发。同时实现了Broker构架，这意味着消息在发送给客户端时先在中心队列排队。对路由，负载均衡或者数据持久化都有很好的支持。</p>
<ul>
<li>Redis</li>
</ul>
<p>Redis是一个基于Key-Value对的NoSQL数据库，开发维护很活跃。虽然它是一个Key-Value数据库存储系统，但它本身支持MQ功能，所以完全可以当做一个轻量级的队列服务来使用。对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。实验表明：入队时，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</p>
<ul>
<li>ZeroMQ</li>
</ul>
<p>ZeroMQ号称最快的消息队列系统，尤其针对大吞吐量的需求场景。ZeroMQ能够实现RabbitMQ不擅长的高级&#x2F;复杂的队列，但是开发人员需要自己组合多种技术框架，技术上的复杂度是对这MQ能够应用成功的挑战。ZeroMQ具有一个独特的非中间件的模式，你不需要安装和运行一个消息服务器或中间件，因为你的应用程序将扮演这个服务器角色。你只需要简单的引用ZeroMQ程序库，可以使用NuGet安装，然后你就可以愉快的在应用程序之间发送消息了。但是ZeroMQ仅提供非持久性的队列，也就是说如果宕机，数据将会丢失。其中，Twitter的Storm 0.9.0以前的版本中默认使用ZeroMQ作为数据流的传输（Storm从0.9版本开始同时支持ZeroMQ和Netty作为传输模块）。</p>
<ul>
<li>ActiveMQ</li>
</ul>
<p>ActiveMQ是Apache下的一个子项目。 类似于ZeroMQ，它能够以代理人和点对点的技术实现队列。同时类似于RabbitMQ，它少量代码就可以高效地实现高级应用场景。</p>
<ul>
<li>Kafka&#x2F;Jafka</li>
</ul>
<p>Kafka是Apache下的一个子项目，是一个高性能跨语言分布式发布&#x2F;订阅消息队列系统，而Jafka是在Kafka之上孵化而来的，即Kafka的一个升级版。具有以下特性：快速持久化，可以在O(1)的系统开销下进行消息持久化；高吞吐，在一台普通的服务器上既可以达到10W&#x2F;s的吞吐速率；完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式，自动实现负载均衡；支持Hadoop数据并行加载，对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka通过Hadoop的并行加载机制统一了在线和离线的消息处理。Apache Kafka相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布式系统</p>
]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>MQ(Message Queue)</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2016/11/23/mysql/mysql/</url>
    <content><![CDATA[<p>概要</p>
<ul>
<li>安装</li>
<li>配置</li>
</ul>
<p><em>更新历史</em><br>2019-7-16 update mysql version 8<br>2020-11-10 update Centos 8 &amp; mysql 8</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>centos 安装 最新版 mysql， 目前mysql 是 8.0</p>
<h3 id="yum源"><a href="#yum源" class="headerlink" title="yum源"></a>yum源</h3><p><code>http://dev.mysql.com/downloads/repo/yum/</code>下载对应版本的RPM</p>
<p>安装生成yum源配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo rpm -Uvh platform-and-version-specific-package-name.rpm</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>yum安装 参照 <a href="https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/">quick doc</a></p>
<p>Centos 8 以前</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install mysql-community-server   #基本安装3个组件</span><br></pre></td></tr></table></figure>

<p>Centos 8</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dnf install mysql-server</span><br></pre></td></tr></table></figure>



<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><a href="https://dev.mysql.com/doc/refman/8.0/en/data-directory-initialization.html">官方文档</a><br>为安全和备份方便，把mysql的<code>datadir</code>配置在非系统目录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1 mysql basedir</span><br><span class="line">which mysql</span><br><span class="line">/usr/bin/mysql</span><br><span class="line"></span><br><span class="line"># 2 init directory</span><br><span class="line">mkdir -p /data/mysql/data</span><br><span class="line">chown -R mysql:mysql /data/mysql</span><br><span class="line"></span><br><span class="line"># 3 初始化数据文件</span><br><span class="line">cd /usr/bin/</span><br><span class="line">mysqld --initialize --user=mysql --lower-case-table-names=1 --datadir=/data/mysql/data </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>生产环境部署,建议不区分大小写, 默认是 <code>lower-case-table-names=0</code><br>lower-case-table-names&#x3D;1(不区分) , 0(区分)</p>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>默认配置文件 <code>/etc/my.cnf</code>,<br>Centos 8 &amp; mysql 8 的配置文件在 <code>/etc/my.cnf.d</code>, server 与 client 配置文件分开。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># For advice on how to change settings please see</span><br><span class="line"># http://dev.mysql.com/doc/refman/8.0/en/server-configuration-defaults.html</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">#</span><br><span class="line"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="line"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="line"># innodb_buffer_pool_size = 128M</span><br><span class="line">#</span><br><span class="line"># Remove the leading &quot;# &quot; to disable binary logging</span><br><span class="line"># Binary logging captures changes between backups and is enabled by</span><br><span class="line"># default. It&#x27;s default setting is log_bin=binlog</span><br><span class="line"># disable_log_bin</span><br><span class="line">#</span><br><span class="line"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="line"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="line"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="line"># join_buffer_size = 128M</span><br><span class="line"># sort_buffer_size = 2M</span><br><span class="line"># read_rnd_buffer_size = 2M</span><br><span class="line">#</span><br><span class="line"># Remove leading # to revert to previous value for default_authentication_plugin,</span><br><span class="line"># this will increase compatibility with older clients. For background, see:</span><br><span class="line"># https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin</span><br><span class="line"># default-authentication-plugin=mysql_native_password</span><br><span class="line"></span><br><span class="line">datadir=/data/mysql/data</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lower_case_table_names=1 # 0：区分大小写，1：不区分大小写</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">slow_query_log=on</span><br><span class="line">slow_query_log_file=/data/mysql/data/slow_query_log.log</span><br><span class="line">long_query_time=2</span><br><span class="line"></span><br><span class="line"># character-set</span><br><span class="line"># # ignore character set information sent by the client</span><br><span class="line">character-set-client-handshake = FALSE</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">init_connect=&#x27;SET NAMES utf8mb4&#x27;</span><br><span class="line"></span><br><span class="line">max_connections        = 1000</span><br><span class="line">server_id=1</span><br><span class="line"></span><br><span class="line"># follow your memory</span><br><span class="line">innodb_buffer_pool_size = 4096M </span><br><span class="line"></span><br><span class="line"># mysql model</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 8.0 使用新的加密方式，如需兼容，如下配置</span><br><span class="line"># old password plugin</span><br><span class="line"># https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>如果不想设置 SELinux， 就把 SELinux 关闭，否则会 <code>(OS errno 13 - Permission denied)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1 启动</span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line"># 2 开机启动</span><br><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure>

<h3 id="root密码"><a href="#root密码" class="headerlink" title="root密码"></a>root密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1 root 初始密码</span><br><span class="line">less /var/log/mysqld.log |grep password</span><br><span class="line">2016-11-23T14:10:00.473337Z 1 [Note] A temporary password is generated for root@localhost: G80K__o3eugw</span><br><span class="line"></span><br><span class="line">#centos 8</span><br><span class="line">less /var/log/mysql/mysqld.log|grep password</span><br><span class="line">2020-11-10T08:03:03.423785Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: &amp;c0gf4:&gt;IpLW</span><br><span class="line"></span><br><span class="line"># 2 修改密码</span><br><span class="line">╰─# mysql -uroot -p</span><br><span class="line">Enter password: #1获得的密码</span><br><span class="line">mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;new_password&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="有趣的链接"><a href="#有趣的链接" class="headerlink" title="有趣的链接"></a>有趣的链接</h2><p><a href="http://mysql.taobao.org/">淘宝MySQL</a></p>
<p><a href="http://www.csdn.net/article/2015-01-16/2823591">淘宝内部分享：怎么跳出MySQL的10个大坑</a></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 8 密码</title>
    <url>/2020/03/30/mysql/mysql8/</url>
    <content><![CDATA[<p>Mysql 8 默认采用新的密码认证方式 <code>caching_sha2_password</code> ,<br>如果想使用8以前的认证方式<code> mysql_native_password</code>, 做如下配置</p>
<ul>
<li><p>my.cnf</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[mysqld] </span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br></pre></td></tr></table></figure>

</li>
<li><p>修改密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;$password&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>参考<br><a href="https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password">caching_sha2_password</a></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>Mysql8</tag>
      </tags>
  </entry>
  <entry>
    <title>【mysql 管理之道】读书笔记一</title>
    <url>/2017/04/15/mysql/mysqlManage/</url>
    <content><![CDATA[<p>概要</p>
<p>MySQL5.7新特性<br>故障处理<br>性能调优<br>备份和恢复<br>高可用架构</p>
<p>拜读 贺春旸先生 的 【mysql 管理之道】 有感， 特此梳理和记录。<br>本篇为第一篇， 主要包括MySQL5.7新特性</p>
<span id="more"></span>

<h2 id="MySQL5-7新特性"><a href="#MySQL5-7新特性" class="headerlink" title="MySQL5.7新特性"></a>MySQL5.7新特性</h2><h3 id="安全性提高"><a href="#安全性提高" class="headerlink" title="安全性提高"></a>安全性提高</h3><ul>
<li><p>SSL<br>默认可开启SSL连接</p>
</li>
<li><p>sql_mode<br>默认启用 <code>STRICT_TRANS_TABLES</code> 严格模式， 用于进行数据的严格校验，错误数据不能插入，报error， 并且事务回滚。</p>
</li>
</ul>
<h3 id="InnoDB-存储引擎提升"><a href="#InnoDB-存储引擎提升" class="headerlink" title="InnoDB 存储引擎提升"></a>InnoDB 存储引擎提升</h3><ul>
<li><p>更改索引名不锁表</p>
</li>
<li><p>在线DDL修改varchar字段属性不锁表<br>  这里还是有坑的，一定要执行 <code>show processlist</code> 命令并观察， 是否有慢SQL正在操作，如有则不要进行 alter table</p>
</li>
<li><p>InnoDB 支持中文全文索引<br><code>ngram</code>解析器， <code>ngram_token_size</code> 参数不可动态修改， 停止词不能动态修改， 需要重建一次全文索引</p>
</li>
<li><p>InnoDB Buffer Pool 预热<br>数据库重启时， 将之前频繁访问的数据重新加载回Buffer中， 快速恢复之前的性能状态。<br>只需要在 <code>my.cnf</code> 里加入</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">innodb_buffer_pool_dump_at_shutdown = 1  <span class="comment"># 关闭时把热数据备份到本地， 正常关闭或pkill时才起作用</span></span><br><span class="line">innodb_buffer_pool_load_at_startup = 1   <span class="comment"># 启动时把热数据加载到内存</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可在线调整 Innodb_buffer_pool_size 而不用重启 MySQL</p>
</li>
<li><p>回收 undo log 回滚日志物理文件空间<br>undo log 回滚日志 在 MySQL 5.6 之前， 保存在共享表空间ibdata1文件里的， MySQL 5.6 支持 单独表空间， MySQL 5.7 支持 在线收缩<br>初始化数据库前 在 <code>my.cnf</code> 指定如下参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">innodb_undo_directory = /data2/ <span class="comment"># </span></span><br><span class="line">innodb_undo_log_truncate = 1 <span class="comment"># 开始在线回收， 支持动态设置</span></span><br><span class="line">innodb_undo_logs = 128 <span class="comment"># undo 回滚段的数量， 至少大于等于 35， 默认 128</span></span><br><span class="line">innodb_undo_tablespaces = 4 <span class="comment"># 指定有多少个 undo log 文件， 必须大于 2</span></span><br><span class="line">innodb_max_undo_log_size = 1G <span class="comment"># 可省略，默认1G， 当超过这个阈值，会触发 truncate 回收动作， truncate后 空间缩小到 10MB</span></span><br><span class="line">innodb_purge_rseg_truncate_frequncy : 控制回收 undo <span class="built_in">log</span> 的频率</span><br></pre></td></tr></table></figure>
</li>
<li><p>通用表空间<br>可以理解为加强版独立表空间，可以指定某些表存放在同一个 share.ibd 文件里。需要开始参数 <code>innodb_file_per_table = 1</code></p>
</li>
<li><p>修改 InnoDB redo log 事务日志文件大小 人性化</p>
<ul>
<li>执行 set global innodb_fast_shutdown &#x3D; 0; 将所有脏页刷到磁盘</li>
<li>执行 mysqladmin shutdown 关闭数据库</li>
<li>在 my.cnf 修改 innodb_log_file_size 参数值</li>
<li>执行 mysqld_safe –default-file&#x3D;&#x2F;etc&#x2F;my.cnf –user&#x3D;mysql&amp; , 最后启动 MySQL<br>在 5.5 版本，启动mysql之前， 必须 mv ib_logfile* &#x2F;bak, 将redo log 移动到 bak 目录</li>
</ul>
</li>
<li><p>死锁可 打印到 错误日志<br>命令 show engine innodb status；<br>在 <code>my.cnf</code> 中 设置 <code>innodb_print_all_deadlocks = 1</code></p>
</li>
<li><p>支持 InnoDB 只读事务</p>
</li>
</ul>
<h3 id="JSON-格式支持"><a href="#JSON-格式支持" class="headerlink" title="JSON 格式支持"></a>JSON 格式支持</h3><p>MySQL 5.7 版本支持 原生的 JSON 格式，将关系型数据库和文档型NoSQL数据库集成一身。<br><a href="https://dev.mysql.com/doc/refman/5.7/en/json.html">JSON TYPE</a><br><a href="https://dev.mysql.com/doc/refman/5.7/en/json-function-reference.html">JSON FUNCTION</a></p>
<h3 id="函数索引"><a href="#函数索引" class="headerlink" title="函数索引"></a>函数索引</h3><p>虚拟列方式支持函数索引</p>
<h3 id="功能提升"><a href="#功能提升" class="headerlink" title="功能提升"></a>功能提升</h3><ul>
<li><p>一张表多个 insert&#x2F;delete&#x2F;update  触发器</p>
</li>
<li><p>支持 explain update</p>
</li>
<li><p>Ctrl + C 组合键不会退出客户端</p>
</li>
</ul>
<h3 id="优化器改进"><a href="#优化器改进" class="headerlink" title="优化器改进"></a>优化器改进</h3><ul>
<li>子查询select 采用半连接优化</li>
<li>优化排序 limit</li>
<li>优化IN条件</li>
<li>支持 Multi Range Read 优化<br>  大表进行范围扫描，通过 MRR 优化减少随机I&#x2F;O<br>  可以通过 <code>show variables like &#39;optimizer_switch&#39;; </code> 来查看是否开启 MRR。</li>
</ul>
<h3 id="半同步复制改进"><a href="#半同步复制改进" class="headerlink" title="半同步复制改进"></a>半同步复制改进</h3><p>复制功能默认是异步的， 异步复制可以提供最佳性能， 主库把 Binlog 日志发给从库， 这一动作就完成了， 并不验证从库是否接收完毕。<br>从库可能没有接收，从而导致复制数据丢失。<br>半同步复制模式，可以确保从服务器接收完主服务器发送的 Binlog 日志文件并写入自己的中继日志（relay log）里， 然后给主服务器一个反馈， 这是主服务器才结束操作。<br>需要主从服务端都开启半同步模式。</p>
<h3 id="GTID-全局事务标识符"><a href="#GTID-全局事务标识符" class="headerlink" title="GTID 全局事务标识符"></a>GTID 全局事务标识符</h3><p>由uuid和事务id 组成。 主从切换后，同步失败，MySQL 可以通过GTID 自动找点同步。 需要主从都开启。</p>
<h3 id="salve-支持多源复制"><a href="#salve-支持多源复制" class="headerlink" title="salve 支持多源复制"></a>salve 支持多源复制</h3><p>多主一从</p>
<h3 id="同步复制过滤不用重启-mysql-服务进程"><a href="#同步复制过滤不用重启-mysql-服务进程" class="headerlink" title="同步复制过滤不用重启 mysql 服务进程"></a>同步复制过滤不用重启 mysql 服务进程</h3>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>【mysql 管理之道】读书笔记二</title>
    <url>/2017/04/16/mysql/mysqlManage2/</url>
    <content><![CDATA[<p>概要</p>
<p>MySQL5.7新特性<br>故障处理<br>性能调优<br>备份和恢复<br>高可用架构</p>
<p>拜读 贺春旸先生 的 【mysql 管理之道】 有感， 特此梳理和记录。 主要适合 MySQL 5.6， MySQL 5.7.<br>本篇为第二篇， 主要包括故障诊断，性能调优， 备份和恢复。</p>
<span id="more"></span>
<h2 id="故障诊断"><a href="#故障诊断" class="headerlink" title="故障诊断"></a>故障诊断</h2><h3 id="dstat"><a href="#dstat" class="headerlink" title="dstat"></a>dstat</h3><p>Linux 性能监控工具 dstat</p>
<h3 id="故障与处理"><a href="#故障与处理" class="headerlink" title="故障与处理"></a>故障与处理</h3><h4 id="连接数过多导致程序连接报错的原因"><a href="#连接数过多导致程序连接报错的原因" class="headerlink" title="连接数过多导致程序连接报错的原因"></a>连接数过多导致程序连接报错的原因</h4><p>keys：</p>
<ul>
<li>max_connections 通常 500 ~ 1000 比较合理， 一直增大不能治本</li>
<li>wait_timeout (服务器关闭非交互连接之前等待活动的秒数) ， 一般设置为 100 就可， 默认是 28800 秒</li>
<li>重启数据库导致早高峰连接数过多<br>  可使用 InnoDB Buffer Pool 预热</li>
<li>磁盘高负荷拖垮MySQL<br>  加内存， InnoDB_Buffer_Pool 最大可调整成内存的 70%</li>
</ul>
<h4 id="binlog-format"><a href="#binlog-format" class="headerlink" title="binlog_format"></a>binlog_format</h4><p>binlog_format 有3种格式 ， statement， row 和 mixed</p>
<ul>
<li><p>statement 记录的是实际的SQL语句</p>
</li>
<li><p>row 记录的是实际行的变更</p>
</li>
<li><p>mixed 默认是 statement， 在如下情况会转换为 row。<br>  NDB引擎，表的DML； SQL语句包含UUID()函数； 自增字段被更新； 包含 INSERT DELAYED 语句； 使用用户定义函数 UDF； 使用临时表。</p>
</li>
</ul>
<p>row格式 安全稳定，binlog 可能会很大， 性能较差；<br>statement格式 性能较好，可能会导致同步数据问题</p>
<h4 id="未设置-swap-分区导致内存耗尽，死机"><a href="#未设置-swap-分区导致内存耗尽，死机" class="headerlink" title="未设置 swap 分区导致内存耗尽，死机"></a>未设置 swap 分区导致内存耗尽，死机</h4><p>swappiness 设置为 0， 只能减少使用 swap 的概率， 不能避免 Linux 使用 swap，所以内存被耗尽后， 主机仍旧会被Hang死。<br>增加 swap<br>监控内存， 达到一定量， 重启 MySQL</p>
<h4 id="恢复-人工误删除-InnoDB-ibdata-数据文件"><a href="#恢复-人工误删除-InnoDB-ibdata-数据文件" class="headerlink" title="恢复 人工误删除 InnoDB ibdata 数据文件"></a>恢复 人工误删除 InnoDB ibdata 数据文件</h4><p>切记 千万千万不要杀死 mysql 进程！！！！！<br>page 130 ~ 132</p>
<h4 id="闪回功能"><a href="#闪回功能" class="headerlink" title="闪回功能"></a>闪回功能</h4><p>** Binlog 必须是 row 格式！！！ **</p>
<ul>
<li><p>恢复update忘记where条件误操作<br>page 133</p>
</li>
<li><p>恢复delete忘记where条件误操作<br>page 141</p>
</li>
</ul>
<h3 id="同步复制报错故障处理"><a href="#同步复制报错故障处理" class="headerlink" title="同步复制报错故障处理"></a>同步复制报错故障处理</h3><p>page 145</p>
<h4 id="干净清除-slave-同步信息"><a href="#干净清除-slave-同步信息" class="headerlink" title="干净清除 slave 同步信息"></a>干净清除 slave 同步信息</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">reset slave <span class="keyword">all</span>; <span class="comment">-- reset slave 会把 master.info 和 relay-log.info 文件删除， 但同步信息还在。</span></span><br><span class="line"><span class="keyword">show</span> slave status;</span><br></pre></td></tr></table></figure>


<h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><h3 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h3><p>设计数据库需要最大可能遵守三范式； 有时为了性能，我们需要有意违反三范式，适度做冗余，提高查询效率。注意，反范式是适度的，必须有充足的理由。</p>
<h3 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h3><p>保小不保大，能用占用字节少的字段就不用大字段。</p>
<h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><p>|类型|字节|最小值|最大值|<br>| – |:–:| – |<br>|tinyint| 1 |有符号 -128  <br> 无符号 0| 有符号 127  <br> 无符号 255|<br>|smallint| 2 |有符号 -32 768  <br> 无符号 0| 有符号 32 767  <br> 无符号 65 535|<br>|mediumint| 3 |有符号 -8 388 608  <br> 无符号 0| 有符号 8 388 607  <br> 无符号 16 777 215|<br>|int| 4 |有符号 -2 147 483 648  <br> 无符号 0| 有符号 2 147 483 647  <br> 无符号 4 294 967 295|<br>|bigint| 8 |有符号 -9 223 372 036 854 775 808  <br> 无符号 0| 有符号 9 223 372 036 854 775 807  <br> 无符号 18 446 744 073 709 551 615|</p>
<ul>
<li><p>手机号码可以用 bigint<br>字符集 utf8，utf8 占用3字节， char（11) 就是 11 * 3 &#x3D; 33 字节； bigint(20) 占用8字节</p>
</li>
<li><p>ip地址可采用 无符号int<br>mysql 内置函数： inet_aton(), 它负责ip地址转换成数字； inet_ntoa()负责把数字转换为ip地址</p>
</li>
<li><p>根据需求选择最小整数类型</p>
</li>
</ul>
<h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><p>char  varchar<br>char(N) 长度最大255， 超长会被截取， 比N 小会被空格填补；<br>varchar(N) 最大长度 65 535， 额外使用 1~2 个字节来存储值得长度， 如果N小于或等于255， 则占用1字节， 否则就是2字节；<br>char和varchar跟字符编码也有关， latin1占用1个字节， gbk占用2个字节， utf8占用3个字节。</p>
<p>计算varchar(N)的最大长度</p>
<ul>
<li>GBK字符集<br>（65 535 -2 ） &#x2F;2 &#x3D; 32766</li>
<li>UTF8字符集<br>（65 535 -2 ） &#x2F;3 &#x3D; 218 44</li>
<li>一行总长度不能超过 65 535</li>
</ul>
<h4 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h4><table>
<thead>
<tr>
<th>数据类型</th>
<th>值</th>
<th>存储字节</th>
</tr>
</thead>
<tbody><tr>
<td>date</td>
<td>‘0000-00-00’</td>
<td>3字节</td>
</tr>
<tr>
<td>time</td>
<td>‘00:00:00’</td>
<td>3字节</td>
</tr>
<tr>
<td>datetime</td>
<td>‘0000-00-00 00:00:00’</td>
<td>8字节</td>
</tr>
<tr>
<td>timestamp</td>
<td>‘0000-00-00 00:00:00’</td>
<td>4字节</td>
</tr>
<tr>
<td>year</td>
<td>0000</td>
<td>1字节</td>
</tr>
</tbody></table>
<ul>
<li>timestamp 默认值 current_timestamp, 自动插入，更新时间</li>
<li>MySQL 5.5之前， 一个表只允许一个字段timestamp， 自动插入，更新时间<br>  MySQL 5.6之后， datetime 有了timestamp功能， 自动插入，更新时间， 也可由多个自动插入，更新时间的字段</li>
</ul>
<h3 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h3><table>
<thead>
<tr>
<th>隔离级别</th>
<th>读数据一致性</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>未提交读 read uncommitted</td>
<td>最低级别， 只能保证不读取物理上损坏的数据</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>已提交读 read committed</td>
<td>语句级</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>可重复读 repeatable read</td>
<td>事务级</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>可序列化 serializable</td>
<td>最高级别，事务级</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody></table>
<p>oracle 和 SQL server 的默认隔离级别 是 read committed； MySQL 的默认隔离级别是 Repeatable read。</p>
<h3 id="my-cnf-配置文件调优"><a href="#my-cnf-配置文件调优" class="headerlink" title="my.cnf 配置文件调优"></a>my.cnf 配置文件调优</h3><p>page231<br>per_thread_buffers + global_buffer 不能大于物理内存</p>
<h4 id="per-thread-buffers"><a href="#per-thread-buffers" class="headerlink" title="per_thread_buffers"></a>per_thread_buffers</h4><p>可以理解为 oracle 的 PGA， 为每个连接到 MySQL 的用户分配的内存。<br>per_thread_buffers &#x3D; (read_buffer_size + read_rnd_buffer_size + sort_buffer_size + thread_stack + join_buffer_size + binlog_cache_size) * max_connections</p>
<ul>
<li>read_buffer_size<br>用于表的顺序扫描，表示每个线程分配的缓冲区大小。默认128KB， 一般在128 ～ 256KB</li>
<li>read_rnd_buffer_size<br>用于表的随机读取，表示每个线程分配的缓冲区大小。64位默认256KB， 一般在128 ～ 256KB</li>
<li>sort_buffer_size<br>在表进行 order by 和 group by 排序操作时， 由于排序没有索引， 会出现 Using filesort， 可用此参数增加每个线程分配的缓冲区大小， 64位默认256KB，一般在128 ～ 256KB， 如果出现 filesort，可增加索引。</li>
<li>thread_stack<br>表示每个线程的堆栈大小。64位默认256KB</li>
<li>join_buffer_size<br>表进行join时，如果没有索引，会出现 Using join buffer， 可用此参数增加每个线程分配的缓冲区大小，64位默认256KB，一般在128 ～ 256KB， 如果出现 Using join buffer，可增加索引。</li>
<li>binlog_cache_size<br>一般来说， 如果数据库没有特别大事务， 写入也不是特频繁，将其设置为1 ～ 2MB, 默认32KB</li>
<li>max_connections<br>该参数设置最大连接数， 默认为100, 一般设置为 500 ～ 1000.</li>
</ul>
<h4 id="global-buffer"><a href="#global-buffer" class="headerlink" title="global_buffer"></a>global_buffer</h4><p>可以理解为 oracle 的 SGA， 用于在内存中缓存从数据文件检索出来的数据块。<br>global_buffer&#x3D; innodb_buffer_pool_size + innodb_additional_mem_pool_size + innodb_log_buffer_size + key_buffer_size + query_cahce_size</p>
<ul>
<li><p>innodb_buffer_pool_size<br>InnoDB 存储引擎的核心数据， 默认128MB， 建议设置成物理内存的 60% ~ 70%</p>
</li>
<li><p>innodb_additional_mem_pool_size<br>设置存储数据字典信息和其他内部数据结构。表越多， 需要这里分配的内存越多， 单位是 byte，参数默认值为8M。如果 InnoDB 用完了内存池中的内存，就会从操作系统中分配内存，同时在 error log 中打入报警信息。<br>从 MySQL 5.7.4 中移除， InnoDB 实现的内存分配器相比操作系统的内存分配器并没有明显优势，所以在之后的版本，会移除 innodb_additional_mem_pool_size 和 innodb_use_sys_malloc 两个参数，统一使用操作系统的内存分配器。</p>
</li>
<li><p>innodb_log_buffer_size<br>事务日志所使用缓冲区。默认16M， 一般设置16M ～ 64MB</p>
</li>
<li><p>key_buffer_size<br>MyISAM 存储引擎的索引参数</p>
</li>
<li><p>query_cahce_size<br>缓存select 语句和结果集大小的参数。<br>如果写操作很少，读操作频繁， 那么打开 query_cahce_type&#x3D;1, 并设置 query_cahce_size 16M， 看情况调试。<br>反之写操作很频繁，读操作少， 那么打开 query_cahce_type&#x3D;0, query_cahce_size&#x3D;0</p>
</li>
</ul>
<h2 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h2><h3 id="冷备份"><a href="#冷备份" class="headerlink" title="冷备份"></a>冷备份</h3><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><ul>
<li>关闭mysql</li>
<li>复制 数据目录（包括 ibdata1） 和 日志目录 （包括 ib_logfile0, ib_logfile1, ib_logfile2)</li>
</ul>
<h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><ul>
<li>拷贝上步的数据目录和日志目录</li>
<li>启动mysql</li>
</ul>
<h3 id="逻辑备份"><a href="#逻辑备份" class="headerlink" title="逻辑备份"></a>逻辑备份</h3><p>mysqldump<br>mydumper </p>
<p>全量，增量备份脚本 page262</p>
<h3 id="热备份"><a href="#热备份" class="headerlink" title="热备份"></a>热备份</h3><p>xtrabackup - 相对完美的免费开源数据备份工具<br>page 263</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>【mysql 管理之道】读书笔记三</title>
    <url>/2017/04/19/mysql/mysqlManage3/</url>
    <content><![CDATA[<p>概要</p>
<p>MySQL5.7新特性<br>故障处理<br>性能调优<br>备份和恢复<br>高可用架构</p>
<p>拜读 贺春旸先生 的 【mysql 管理之道】 有感， 特此梳理和记录。<br>本篇为第三篇， 主要包括高可用，读写分离， 分库分表</p>
<span id="more"></span>
<h2 id="高可用架构"><a href="#高可用架构" class="headerlink" title="高可用架构"></a>高可用架构</h2><h3 id="MHA"><a href="#MHA" class="headerlink" title="MHA"></a>MHA</h3><p>MHA （master high availability） : 会把丢失的数据在每个slave节点上补齐。<br><a href="https://github.com/yoshinorim/mha4mysql-manager">MHA github</a><br>提供3种故障转移模式：</p>
<ul>
<li>master 自动监控和故障转移<br>需要开启半自动复制（semi replication）</li>
<li>手工处理master故障转移<br>机器长时间启动不了或者崩溃恢复时间太长，并可能丢失数据。</li>
<li>在线平滑切换<br>如果机器需要维护， 将master在线切换到其他主机上</li>
</ul>
<p>page 270</p>
<h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>读&#x2F;写分离 技术为 一个 master数据库， 多个 slave 数据库。 master 负责数据更新和实时数据查询， slave 负责非实时数据查询。实际应用， 大部分是读多写少， 而读数据通常耗时时间比较长， cpu内存占用都比较多， 对此通常就把查询从主库分离，采用多个salve， 负载均衡， 减轻每个从库的眼里。</p>
<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>既有效减轻master库的压力， 又可以把用户查询数据的请求分发到不通slave库</p>
<h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>master 处理增， 删， 改操作， slave 处理select 操作， replication 负责把数据变更同步到集群的 slave库。</p>
<h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><ul>
<li><p>MaxScale<br><a href="https://mariadb.com/blog-tags/maxscale">MaxScale 官网</a><br><a href="https://github.com/mariadb-corporation/MaxScale">MaxScale github</a></p>
</li>
<li><p>OneProxy</p>
</li>
<li><p>Atlas</p>
</li>
<li><p>MyCAT</p>
</li>
</ul>
<h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><ul>
<li><p>OneProxy</p>
</li>
<li><p>Atlas</p>
</li>
<li><p>MyCAT</p>
</li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>checkList（一）</title>
    <url>/2015/09/14/other/checkList/</url>
    <content><![CDATA[<p>陆续更新。。。</p>
<h3 id="1-集成测试，是否测试上2个版本？"><a href="#1-集成测试，是否测试上2个版本？" class="headerlink" title="1. 集成测试，是否测试上2个版本？"></a>1. 集成测试，是否测试上2个版本？</h3><p>不仅测试本次发布版本功能，还需测试上2个版本在最新服务端接口上是否功能正常（git flow master库）</p>
<h3 id="2-上线测试，是否进行了小范围正式环境和数据测试。"><a href="#2-上线测试，是否进行了小范围正式环境和数据测试。" class="headerlink" title="2. 上线测试，是否进行了小范围正式环境和数据测试。"></a>2. 上线测试，是否进行了小范围正式环境和数据测试。</h3><p>Android可用友盟或自定义自动升级，iOS可用邀请测试，指定人员测试</p>
<h3 id="3-权限测试，是否进行权限极限测试"><a href="#3-权限测试，是否进行权限极限测试" class="headerlink" title="3. 权限测试，是否进行权限极限测试"></a>3. 权限测试，是否进行权限极限测试</h3><p>关闭APP需要的所以权限，测试每项功能。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>测试 checkList</tag>
      </tags>
  </entry>
  <entry>
    <title>字符编码</title>
    <url>/2016/01/26/other/encoding/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>历史来源</li>
<li>通用规则</li>
</ul>
<p>下面开始瞎掰 <span id="more"></span></p>
<h2 id="历史来源"><a href="#历史来源" class="headerlink" title="历史来源"></a>历史来源</h2><p><code>ASCII</code> <code>Unicode</code> <code>UTF-8</code> …… 字符编码真是一个让人头疼的事情。</p>
<p><strong>最早</strong> 的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（2的8次方-1），如果要表示更大的整数，就必须用更多的字节。<br>比如两个字节可以表示的最大整数是65535，4个字节可以表示的最大整数是4294967295。由于电脑是米国发明的，因此，最早只有127个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，</p>
<p><strong>然后</strong> 这个编码表被称为 <code>ASCII</code> 编码，比如大写字母A的编码是65，小写字母z的编码是122。</p>
<p>处理中文显然一个字节不够，至少需要2个字节，还不能和 <code>ASCII</code> 冲突，<br><strong>然后</strong> 中国就有了 <code>GBK</code> <code>GB2312</code>；岛国有了 <code>Shift_JIS</code>；斯密达有了 <code>Euc-kr</code>；全球还有那么多国家……； 多个语言混合，就是乱码！ </p>
<p>然后电脑受不了了！！！！！！！！<br><strong>然后</strong> 所有语言都统一到一套编码里，就是 <code>Unicode</code> 。 <code>Unicode</code> 标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。</p>
<p>这里有个例子：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>ASCII</th>
<th>Unicode</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>01000001</td>
<td>00000000 01000001</td>
</tr>
<tr>
<td>中</td>
<td>x</td>
<td>01001110 00101101</td>
</tr>
</tbody></table>
<p>smart的大家都看出来： ASCII编码的A用Unicode编码，只需要在前面补0就可以。统一成Unicode编码，乱码问题从此消失了。</p>
<p>然后网络和硬盘来抗议了，看看如果全英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间！而且电脑语言基本都是英文。<br><strong>然后</strong>  <code>UTF-8</code> （8-bit Unicode Transformation Format） 就诞生了，其实就是Unicode编码转化为“可变长编码”的编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果要传输的文本包含大量英文字符，用UTF-8编码就能节省空间</p>
<p>这里还是有个例子：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>ASCII</th>
<th>Unicode</th>
<th>UTF-8</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>01000001</td>
<td>00000000 01000001</td>
<td>01000001</td>
</tr>
<tr>
<td>中</td>
<td>x</td>
<td>01001110 00101101</td>
<td>11100100 10111000 10101101</td>
</tr>
</tbody></table>
<p>smart的大家都看出来：ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p>
<h2 id="通用规则"><a href="#通用规则" class="headerlink" title="通用规则"></a>通用规则</h2><ul>
<li>内存中，统一使用Unicode编码，</li>
<li>保存到硬盘或者传输的时候，就转换为UTF-8编码。</li>
</ul>
<p>这里依然是个例子：<br>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件</p>
<p><img src="http://7xklqw.com1.z0.glb.clouddn.com/encoding.png"></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>字符编码</tag>
      </tags>
  </entry>
  <entry>
    <title>github hexo 多说 构建自己的blog</title>
    <url>/2015/07/03/other/hexo/</url>
    <content><![CDATA[<p>7月5日左右搭建成功的，算比较新鲜吧：） 记录一下操作步骤，感谢前人，希望能帮到其他人。主要涉及github，hexo，多说。<br>github： 我想你懂得，万一你不懂，百度可以帮助你;<br>hexo  ： 博客博客模板框架 - 基于nodejs<br>多说   ： 一个现成的评论模块，据说是国内最好的</p>
<p>下面每个讲讲，nodejs和git不说了。</p>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>首先你得有一个github的账户， ssh链接也配置好。</p>
<h3 id="GitHub-Pages-建立博客"><a href="#GitHub-Pages-建立博客" class="headerlink" title="GitHub Pages 建立博客"></a>GitHub Pages 建立博客</h3><p>GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。<br>建立个人的博客使用第一种，像 sam2099.github.io 。<br><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/">GitHub Pages</a></p>
<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>找个干净好找的地方建个文件夹hexo，然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>
<p>hexo会自动建好目录和文件。</p>
<h3 id="看看初始效果"><a href="#看看初始效果" class="headerlink" title="看看初始效果"></a>看看初始效果</h3><p>在当前目录（hexo）运行，然后到浏览器输入localhost:4000看看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<p>哈哈，正常的话，可以看到了。</p>
<h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>目前来说 NexT 这个主题最符合我的口味。</p>
<ul>
<li>安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li>
<li>主题配置<br>在<code>themes/next</code>目录的 <code>_config.yml</code><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">/sitemap.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line">  <span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码</span></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">eighties</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="string">default</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/favicon.ico</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/favicon.ico</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/favicon.ico</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/favicon.ico</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure></li>
<li>hexo 配置<br>Hexo目录下的config.yml配置文件中的theme属性，将其设置为 <code>next</code> 。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><p>下面是hexo init 时生成的操作命令，够用了。<br>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/deployment.html">Deployment</a></p>
<h3 id="hexo-设置"><a href="#hexo-设置" class="headerlink" title="hexo 设置"></a>hexo 设置</h3><p>根据自己爱好来对Hexo生成的网站进行设置了，对整站的设置，只要修改项目目录的_config.yml就可以了。<br>注意空格， 冒号后面一定跟一个空格；层级关系也需要空格。<br>我所有的 <a href="https://github.com/sam2099/bolg">博客源文件</a> 可以和blog对照着看。<br>主要设置的地方：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Site</span><br><span class="line">plugins</span><br><span class="line">theme</span><br><span class="line">deploy</span><br></pre></td></tr></table></figure>

<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-feed   --save   </span><br></pre></td></tr></table></figure>

<p>配置<br>参考主题的 <code>menu</code></p>
<h3 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h3><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-sitemap   --save   </span><br></pre></td></tr></table></figure>

<p>配置<br>参考主题的 <code>menu</code></p>
<h3 id="hexo-util"><a href="#hexo-util" class="headerlink" title="hexo-util"></a>hexo-util</h3><p>Next主题需要<br>安装</p>
<pre><code>        npm install hexo-util  --save
        
</code></pre>
<h3 id="github-pages"><a href="#github-pages" class="headerlink" title="github pages"></a>github pages</h3><p>上传到 github pages 需要<br>安装</p>
<pre><code>    npm install hexo-deployer-git --save
    
</code></pre>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>NexT 主题自带了一个搜索功能 Local Search，即在编译文件时本地生成一个数据库，放在网站根目录下，用户借助此数据库进行搜索查询。 安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>配置<br>参考主题的 <code>local_search</code></p>
<h2 id="域名映射"><a href="#域名映射" class="headerlink" title="域名映射"></a>域名映射</h2><p>在source根路径下，创建文件CNAME（无后缀，大写）;内容就一行，是你需要映射的域名，比如我的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">giveme5.top</span><br></pre></td></tr></table></figure>



<h2 id="藏在最后"><a href="#藏在最后" class="headerlink" title="藏在最后"></a>藏在最后</h2><p>这是第一篇，我想这个作为笔记，有需要就可以拿出来看看，省得记载纸上找不到；所以这个大概是给自己看的。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>duoshuo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>面试时除了薪水以外的问题</title>
    <url>/2015/09/08/other/interview/</url>
    <content><![CDATA[<p>薪水之外，工程师最应该关系的问题</p>
<h2 id="你们的企业文化是什么？"><a href="#你们的企业文化是什么？" class="headerlink" title="你们的企业文化是什么？"></a>你们的企业文化是什么？</h2><p>可以问问企业从开发到测试都喜欢什么工具，询问开发流程，询问工程和其他团队之间的关系。建议问“在应对项目时，你们公司会给开发人员什么级别的自主性？”</p>
<h2 id="如何衡量我？"><a href="#如何衡量我？" class="headerlink" title="如何衡量我？"></a>如何衡量我？</h2><p>你的雇主如何定义你的“成功”？不同公司的评判标准不同，要满足你觉得不舒服的目标会让你的生活苦不堪言。</p>
<h2 id="有什么成长计划？"><a href="#有什么成长计划？" class="headerlink" title="有什么成长计划？"></a>有什么成长计划？</h2><p>询问是否有一个针对软件工程师的成长计划，询问一下，多少外部聘请 vs 公司内部晋升。</p>
<h2 id="你们的发展计划？"><a href="#你们的发展计划？" class="headerlink" title="你们的发展计划？"></a>你们的发展计划？</h2><p>你需要了解他们的发展计划，建议可以问这样的问题，如“你们的资金消耗率（公司的负现金流）是多少？”</p>
<h2 id="我会喜欢你们的人吗？"><a href="#我会喜欢你们的人吗？" class="headerlink" title="我会喜欢你们的人吗？"></a>我会喜欢你们的人吗？</h2><p>聊到目前的团队成员，试着和公司的内部人士聊天（面试官以外），以便于知道公司内部管理人员大致的情形， “他们好合作吗，他们做事征求意见吗，他们提供反馈吗，他或她投资团队成员并帮助他们成长吗？”</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>jwt (Json Web Tokens)</title>
    <url>/2018/01/25/other/jwt1/</url>
    <content><![CDATA[<p><strong>主要内容</strong></p>
<ul>
<li>JWT (Json Web Tokens) </li>
<li>Shiro + JWT</li>
</ul>
<p><em>更新历史</em><br>无</p>
<p>JWT 是为分布式，微服务 而生。<br>这时Web应用是无状态的，即服务器端无状态，就是说服务器端不会存储像session这种东西，而是每次请求时access_token进行资源访问。<br>如一些REST风格的API， 大型tomcat集群（不做session同步）。<br>单体WEB应用还是推荐session-cookie机制。</p>
<span id="more"></span>

<hr>
<h2 id="JWT-概念"><a href="#JWT-概念" class="headerlink" title="JWT 概念"></a>JWT 概念</h2><p><code>JWT</code> 详细说明参照 <a href="https://jwt.io/">jwt</a>。</p>
<p>下面仅仅罗列<code>JWT</code>标准定义的字段（Registered Claim）：</p>
<h3 id="载荷（Payload）"><a href="#载荷（Payload）" class="headerlink" title="载荷（Payload）"></a>载荷（Payload）</h3><ul>
<li>iss: 该JWT的签发者</li>
<li>sub: 该JWT所面向的用户</li>
<li>aud: 接收该JWT的一方</li>
<li>exp(expires): 什么时候过期，这里是一个Unix时间戳</li>
<li>iat(issued at): 在什么时候签发的</li>
<li>jti(JWT ID)：该JWT的唯一标识</li>
<li>nbf: 这个时间之前token不可用</li>
</ul>
<h3 id="头部（Header）"><a href="#头部（Header）" class="headerlink" title="头部（Header）"></a>头部（Header）</h3><ul>
<li>typ: “JWT”,</li>
<li>alg: 签名或摘要算法， (HS256,HS384,HS512,RS256,RS384,RS512,ES256,ES384,ES512)</li>
</ul>
<h3 id="信息会暴露"><a href="#信息会暴露" class="headerlink" title="信息会暴露"></a>信息会暴露</h3><p>在JWT中，不应该在载荷里面加入任何敏感的数据。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Header//头信息</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,//签名或摘要算法</span><br><span class="line">    <span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span>//token类型</span><br><span class="line">&#125;</span><br><span class="line">Playload//荷载信息</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;iss&quot;</span>: <span class="string">&quot;token-server&quot;</span>,//签发者</span><br><span class="line">    <span class="string">&quot;exp &quot;</span>: <span class="string">&quot;Mon Nov 13 15:28:41 CST 2017&quot;</span>,//过期时间</span><br><span class="line">    <span class="string">&quot;sub &quot;</span>: <span class="string">&quot;wangjie&quot;</span>,//用户名</span><br><span class="line">    <span class="string">&quot;aud&quot;</span>: <span class="string">&quot;web-server-1&quot;</span>//接收方,</span><br><span class="line">    <span class="string">&quot;nbf&quot;</span>: <span class="string">&quot;Mon Nov 13 15:40:12 CST 2017&quot;</span>,//这个时间之前token不可用</span><br><span class="line">    <span class="string">&quot;jat&quot;</span>: <span class="string">&quot;Mon Nov 13 15:20:41 CST 2017&quot;</span>,//签发时间</span><br><span class="line">    <span class="string">&quot;jti&quot;</span>: <span class="string">&quot;0023&quot;</span>,//令牌<span class="built_in">id</span>标识</span><br><span class="line">    <span class="string">&quot;claim&quot;</span>: &#123;“auth”:”ROLE_ADMIN”&#125;//访问主张</span><br><span class="line">&#125;</span><br><span class="line">Signature//签名信息</span><br><span class="line">签名或摘要算法（</span><br><span class="line">    base64urlencode（Header），</span><br><span class="line">    Base64urlencode（Playload），</span><br><span class="line">    secret-key</span><br><span class="line">）</span><br></pre></td></tr></table></figure>

<p>按照JWT规范，对这个令牌定义进行如下操作：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">base64urlencode（Header）</span><br><span class="line">+<span class="string">&quot;.&quot;</span>+</span><br><span class="line">base64urlencode（Playload）</span><br><span class="line">+<span class="string">&quot;.&quot;</span>+</span><br><span class="line">signature（</span><br><span class="line">    base64urlencode（Header）</span><br><span class="line">    +<span class="string">&quot;.&quot;</span>+</span><br><span class="line">    base64urlencode（Playload）</span><br><span class="line">    ,secret-key</span><br><span class="line">）</span><br></pre></td></tr></table></figure>


<h2 id="JWT-撤销（revoke）"><a href="#JWT-撤销（revoke）" class="headerlink" title="JWT 撤销（revoke）"></a>JWT 撤销（revoke）</h2><p><a href="https://auth0.com/blog/blacklist-json-web-token-api-keys/">https://auth0.com/blog/blacklist-json-web-token-api-keys/</a></p>
<h2 id="shiro-集成"><a href="#shiro-集成" class="headerlink" title="shiro 集成"></a>shiro 集成</h2><p><a href="http://www.bijishequ.com/detail/578914?p=">http://www.bijishequ.com/detail/578914?p=</a></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>对象的引用 reference</title>
    <url>/2015/10/15/other/reference/</url>
    <content><![CDATA[<p>  很多现代语言都有 <code>GC</code> ，与 <code>GC</code> 紧密相关的是对象的引用。</p>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>Java有4种引用类型：</p>
<ul>
<li><p>强引用 StrongReference： 平常使用的都是这种，其他引用统称 <code>弱引用</code> 。</p>
<p>强引用可以直接访问目标对象。<br>强引用所指向的对象在任何时候都不会被系统回收。<br>强引用可能导致内存泄漏。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Bean bean = new Bean();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>软引用 SoftReference： 最强的弱引用， 内存紧缺时可能会被GC回收。</p>
<p>软引用使用 get() 方法取得对象的强引用从而访问目标对象。<br>软引用所指向的对象按照 JVM 的使用情况（Heap 内存是否临近阈值）来决定是否回收。<br>软引用可以避免 Heap 内存不足所导致的异常。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SoftReference&lt;Bean&gt; bean = new SoftReference&lt;Bean&gt;(new Bean());</span><br></pre></td></tr></table></figure>

<ul>
<li><p>弱引用 WeakReference ：</p>
<p>弱引用使用 get() 方法取得对象的强引用从而访问目标对象。<br>一旦系统内存回收，无论内存是否紧张，弱引用指向的对象都会被回收。<br>弱引用也可以避免 Heap 内存不足所导致的异常。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WeakReference&lt;Bean&gt; bean = new WeakReference&lt;Bean&gt;(new Bean());</span><br></pre></td></tr></table></figure>

<ul>
<li>虚引用 PhantomReference： 始终是null</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ReferenceQueue&lt;Bean&gt; refQueue = new ReferenceQueue&lt;Bean&gt;();</span><br><span class="line">PhantomReference&lt;Bean&gt; referent = new PhantomReference&lt;Bean&gt;(new Bean(), refQueue);</span><br></pre></td></tr></table></figure>

<p>有篇可以参照 <a href="http://blog.csdn.net/liuj2511981/article/details/46372187">blog</a></p>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><p>Swift 使用自动引用计数（ARC）机制来跟踪和管理你的应用程序的内存。<br>Swift有3种引用类型：</p>
<ul>
<li>强引用 StrongReference： ARC + 1，ARC 不会销毁被引用的实例</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> apartment: <span class="type">Apartment</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>弱引用 WeakReference ： 弱引用不会对其引用的实例保持强引用，因而不会阻止 ARC 销毁被引用的实例。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Apartment &#123;</span><br><span class="line">    weak var tenant: Person?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>无主引用 unowned ： 无主引用是永远有值的。总是被定义为非可选类型（non-optional type）。总是可以被直接访问。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Customer &#123;</span><br><span class="line">    var card: CreditCard?</span><br><span class="line">&#125;</span><br><span class="line">class CreditCard &#123;</span><br><span class="line">    unowned let customer: Customer</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>无主引用以及隐式解析可选属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Country &#123;</span><br><span class="line">    var capitalCity: City!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class City &#123;</span><br><span class="line">    unowned let country: Country</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>Person和Apartment的例子展示了两个属性的值都允许为nil，并会潜在的产生循环强引用。这种场景最适合用弱引用来解决。</p>
<p>Customer和CreditCard的例子展示了一个属性的值允许为nil，而另一个属性的值不允许为nil，这也可能会产生循环强引用。这种场景最适合通过无主引用来解决。</p>
<p>Country和City的例子中两个属性都必须有值，并且初始化完成后永远不会为nil。在这种场景中，需要一个类使用无主属性，而另外一个类使用隐式解析可选属性。</p>
<p>更详细的内容可以参考 <a href="http://wiki.jikexueyuan.com/project/swift/chapter2/16_Automatic_Reference_Counting.html#7be938fb77dc56602eecdece3e1b5847">中译 Swift</a></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>reference</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索引擎技巧 搜索引擎指令 提高搜索效率</title>
    <url>/2016/03/02/other/searchEngine/</url>
    <content><![CDATA[<p>  索引擎能使用一些特殊的搜索引擎高级指令，对于提高搜索效率，了解网站seo优化效果、研究竞争对手以及找寻网站外链优化资源是非常有用的。</p>
<p>主要有如下技巧&#x2F;指令：</p>
<p><a href="http://giveme5.top/2016/03/02/other/searchEngine/#%E5%8F%8C%E5%BC%95%E5%8F%B7">双引号</a><br><a href="http://giveme5.top/2016/03/02/other/searchEngine/#%E7%A9%BA%E6%A0%BC_%E5%8A%A0%E5%8F%B7_%E5%87%8F%E5%8F%B7">空格 加号 减号</a><br><a href="http://giveme5.top/2016/03/02/other/searchEngine/#%E6%98%9F%E5%8F%B7">星号</a><br><a href="http://giveme5.top/2016/03/02/other/searchEngine/#inurl:">inurl:</a><br><a href="http://giveme5.top/2016/03/02/other/searchEngine/#inanchor:">inanchor:</a><br><a href="http://giveme5.top/2016/03/02/other/searchEngine/#intitle:">intitle:</a><br><a href="http://giveme5.top/2016/03/02/other/searchEngine/#site:">site:</a><br><a href="http://giveme5.top/2016/03/02/other/searchEngine/#link:">link:</a></p>
<span id="more"></span>
<h2 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h2><p>把搜索词放在双引号中，表示精确匹配搜索，也就是说搜索结果返回的页面包含双引号中出现的所有的词，连顺序也必须完全匹配。<br>百度和谷歌都支持这个指令。</p>
<pre><code>  &quot;搜索词&quot;
</code></pre>
<p>使用双引号扫完可以更准确地找到特定关键词的竟争对手。</p>
<h2 id="空格-加号-减号"><a href="#空格-加号-减号" class="headerlink" title="空格 加号 减号"></a>空格 加号 减号</h2><ul>
<li><p>空格 加号 表示and， 搜索结果的并集</p>
<pre><code>搜索词1 搜索词2
搜索词1 +搜索词2
</code></pre>
</li>
<li><p>减号（-）表示搜索结果不包含减号后面的词。谷歌和百度都支持。</p>
<pre><code>搜索词 -不要的词  #减号前面必须是空格，减号后面没有空格
</code></pre>
</li>
</ul>
<h2 id="星号"><a href="#星号" class="headerlink" title="星号"></a>星号</h2><p>星号常用作通配符，百度不支持 <code>*</code> 号搜索指令，谷歌支持</p>
<pre><code>  搜索词*搜索词
</code></pre>
<h2 id="inurl"><a href="#inurl" class="headerlink" title="inurl:"></a>inurl:</h2><p><code>inurl:</code> 指令用于搜索搜索词出现在URL中的结果。</p>
<pre><code>inurl:搜索词
</code></pre>
<p>关键词出现在 URL中对排名有一定影响，因此使用inurl:搜索可以更准确地找到竟争对手。</p>
<h2 id="inanchor"><a href="#inanchor" class="headerlink" title="inanchor:"></a>inanchor:</h2><p><code>inanchor:</code> 指令搜索链接锚文字中包含搜索词的结果。（百度不支持）</p>
<pre><code>inanchor:搜索词
</code></pre>
<h2 id="intitle"><a href="#intitle" class="headerlink" title="intitle:"></a>intitle:</h2><p><code>intitle:</code> 指令搜索title中包含搜索词的页面。Google和百度都支持。</p>
<pre><code>intitle:搜索词
</code></pre>
<p>title是目前页面优化的最重要因素。</p>
<h2 id="site"><a href="#site" class="headerlink" title="site:"></a>site:</h2><p><code>site:</code> 搜索某个域名下的所有结果</p>
<pre><code>site:domainName
</code></pre>
<p>查询网站收录页面数最直接方法。</p>
<h2 id="link"><a href="#link" class="headerlink" title="link:"></a>link:</h2><p><code>link:</code> 用来搜索某个url的反向链接，既包含内部链接，也包含外部链接。</p>
<pre><code>link:domainName #返回domain的反向链接

 
</code></pre>
<h2 id="allintitle-allinurl"><a href="#allintitle-allinurl" class="headerlink" title="allintitle:   allinurl:"></a>allintitle:   allinurl:</h2><p><code>allintitle:</code> 搜索title中包含多组搜索词的结果。（百度不支持）</p>
<pre><code>allintitle:搜索1 搜索2  #相当于 title:搜索1 title:搜索2

  
</code></pre>
<p><code>allinurl:</code> 就是 多组<code>inurl</code>的集合，跟 <code>allintitle:</code> 类似 （百度不支持）</p>
<h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><ul>
<li><p>inurl:gov 淘宝<br> 返回的就是URL中包含“gov”，页面中有“淘宝”这个词的页面。很多SEO人员认为政府和学校网站有比较高的权重，找到相关的政府和学校网站，就找到了最好的链接资源。</p>
</li>
<li><p>inurl:.edu.cn 交换链接<br>返回的是来自.edu.cn，也就是学校域名上的包含 “交换链接” 这个词的页面。从中SEO人员可以找到愿意交换链接的学校网站。<br>或者使用一个更精确的搜索：inurl:.edu.cn intitle:交换链接     </p>
</li>
<li><p>淘宝 inurl:links<br>很多站长把交换链接的页面命名为　links.html等，所以这个指令返回的就是与淘宝主题相关的交换链接页面。      </p>
</li>
<li><p>allinurl:gov.cn+links<br>返回的是url中包含“gov.cn” 以及“links” 的页面，也就是政府域名上的交换链接页面。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title>ss</title>
    <url>/2016/05/05/other/shadowsocks/</url>
    <content><![CDATA[<p>v 2 r a y</p>
<span id="more"></span>


<h2 id="v2ray-安装"><a href="#v2ray-安装" class="headerlink" title="v2ray 安装"></a>v2ray 安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安裝最新發行的 geoip.dat 和 geosite.dat</span></span><br><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-dat-release.sh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除 V2Ray</span></span><br><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh) --remove</span><br></pre></td></tr></table></figure>

<p>安装结果</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">installed: /usr/local/bin/v2ray</span><br><span class="line">installed: /usr/local/bin/v2ctl</span><br><span class="line">installed: /usr/local/share/v2ray/geoip.dat</span><br><span class="line">installed: /usr/local/share/v2ray/geosite.dat</span><br><span class="line">installed: /usr/local/etc/v2ray/config.json</span><br><span class="line">installed: /var/log/v2ray/</span><br><span class="line">installed: /var/log/v2ray/access.log</span><br><span class="line">installed: /var/log/v2ray/error.log</span><br><span class="line">installed: /etc/systemd/system/v2ray.service</span><br><span class="line">installed: /etc/systemd/system/v2ray@.service</span><br></pre></td></tr></table></figure>


<h2 id="server-配置"><a href="#server-配置" class="headerlink" title="server 配置"></a>server 配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;inbounds&quot;</span>: [&#123;</span><br><span class="line">    <span class="string">&quot;port&quot;</span>: <span class="comment">###,  # 端口</span></span><br><span class="line">    <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">    <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;clients&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;id&quot;</span>: <span class="string">&quot;###&quot;</span>, <span class="comment"># 可以使用/usr/bin/v2ray/v2ctl uuid生成</span></span><br><span class="line">          <span class="string">&quot;level&quot;</span>: 1,</span><br><span class="line">          <span class="string">&quot;alterId&quot;</span>: 0</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;streamSettings&quot;</span>: &#123;     <span class="comment"># 载体配置段，设置为websocket</span></span><br><span class="line">        <span class="string">&quot;network&quot;</span>: <span class="string">&quot;ws&quot;</span>,</span><br><span class="line">        <span class="string">&quot;wsSettings&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/###&quot;</span>  <span class="comment"># 与nginx中的路径保持一致</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span> <span class="comment"># 出于安全考虑，建议只接受本地链接</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="string">&quot;outbounds&quot;</span>: [&#123;</span><br><span class="line">    <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;freedom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;settings&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;blackhole&quot;</span>,</span><br><span class="line">    <span class="string">&quot;settings&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&quot;tag&quot;</span>: <span class="string">&quot;blocked&quot;</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="string">&quot;routing&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;rules&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ip&quot;</span>: [<span class="string">&quot;geoip:private&quot;</span>],</span><br><span class="line">        <span class="string">&quot;outboundTag&quot;</span>: <span class="string">&quot;blocked&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="client-配置"><a href="#client-配置" class="headerlink" title="client 配置"></a>client 配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;inbounds&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;port&quot;</span>:1080,</span><br><span class="line">            <span class="string">&quot;listen&quot;</span>:<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;protocol&quot;</span>:<span class="string">&quot;socks&quot;</span>,</span><br><span class="line">            <span class="string">&quot;settings&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;udp&quot;</span>:<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;outbounds&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;protocol&quot;</span>:<span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">            <span class="string">&quot;settings&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;vnext&quot;</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;address&quot;</span>:<span class="string">&quot;###&quot;</span>, <span class="comment"># IP</span></span><br><span class="line">                        <span class="string">&quot;port&quot;</span>:443,</span><br><span class="line">                        <span class="string">&quot;users&quot;</span>:[</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="string">&quot;alterId&quot;</span>:0,  <span class="comment">### alterId</span></span><br><span class="line">                                <span class="string">&quot;encryption&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;flow&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;id&quot;</span>:<span class="string">&quot;###&quot;</span>,  <span class="comment">### id</span></span><br><span class="line">                                <span class="string">&quot;level&quot;</span>:8,</span><br><span class="line">                                <span class="string">&quot;security&quot;</span>:<span class="string">&quot;auto&quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;streamSettings&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;network&quot;</span>:<span class="string">&quot;ws&quot;</span>,</span><br><span class="line">                <span class="string">&quot;security&quot;</span>:<span class="string">&quot;tls&quot;</span>,</span><br><span class="line">                <span class="string">&quot;tlsSettings&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;allowInsecure&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">                    <span class="string">&quot;serverName&quot;</span>:<span class="string">&quot;###&quot;</span>  <span class="comment">### 域名</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;wsSettings&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;headers&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;Host&quot;</span>:<span class="string">&quot;###&quot;</span>   <span class="comment">### 域名</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;path&quot;</span>:<span class="string">&quot;###&quot;</span>  <span class="comment">### path</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;protocol&quot;</span>:<span class="string">&quot;freedom&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tag&quot;</span>:<span class="string">&quot;direct&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;routing&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;domainStrategy&quot;</span>:<span class="string">&quot;IPOnDemand&quot;</span>,</span><br><span class="line">        <span class="string">&quot;rules&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ip&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;geoip:private&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="string">&quot;outboundTag&quot;</span>:<span class="string">&quot;direct&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> v2ray</span><br><span class="line"></span><br><span class="line">systemctl start v2ray</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>spring 多态 注入</title>
    <url>/2017/10/10/spring/polymorphismDI/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>spring 多态 注入<br>利用 <code>PropertySource</code> 实现 多态的动态注入。</p>
<p><em>更新历史</em><br>无</p>
<span id="more"></span>

<hr>
<p>环境：spring 4, JDK 1.8； 话不多说，看代码</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>一个 service 接口， 有若干具体实现</p>
<h3 id="接口-IPolyDiService-java"><a href="#接口-IPolyDiService-java" class="headerlink" title="接口 IPolyDiService.java"></a>接口 <code>IPolyDiService.java</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IPolyDiService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现A-APolyDiServiceImpl"><a href="#实现A-APolyDiServiceImpl" class="headerlink" title="实现A APolyDiServiceImpl"></a>实现A <code>APolyDiServiceImpl</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxx.service.IPolyDiService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;A_service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">APolyDiServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IPolyDiService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is A PolyDiServiceImpl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现B-BPolyDiServiceImpl"><a href="#实现B-BPolyDiServiceImpl" class="headerlink" title="实现B BPolyDiServiceImpl"></a>实现B <code>BPolyDiServiceImpl</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxx.service.IPolyDiService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;B_service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BPolyDiServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IPolyDiService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is B PolyDiServiceImpl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态注入"><a href="#动态注入" class="headerlink" title="动态注入"></a>动态注入</h2><h3 id="配置文件-env-properties"><a href="#配置文件-env-properties" class="headerlink" title="配置文件 env.properties"></a>配置文件 <code>env.properties</code></h3><p>可以用其他外置配置替代， 如下， 改变 <code>service</code> 的值， 可以运行时动态注入不同的具体实现。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># service=B</span></span><br><span class="line">service=A</span><br></pre></td></tr></table></figure>

<h3 id="Junit-PolyDiTest"><a href="#Junit-PolyDiTest" class="headerlink" title="Junit PolyDiTest"></a>Junit <code>PolyDiTest</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxx.service.IPolyDiService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.support.AnnotationConfigContextLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(loader = AnnotationConfigContextLoader.class)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyDiTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;$&#123;service&#125;_service&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> IPolyDiService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        service.printName();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@PropertySource(&#123; &quot;classpath:conf/env.properties&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ComponentScan(basePackages =&#123; &quot;com.xxx.service.impl&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ContextConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><code>service=A</code> 的结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is A PolyDiServiceImpl</span><br></pre></td></tr></table></figure>

<p><code>service=B</code> 的结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is B PolyDiServiceImpl</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>多态</tag>
        <tag>注入</tag>
        <tag>DI</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringTesting （一） Annotations</title>
    <url>/2015/08/11/spring/s-SpringTest1/</url>
    <content><![CDATA[<p><a href="http://docs.spring.io/spring/docs/4.2.1.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#integration-testing-annotations">Annotations</a></p>
<h2 id="Spring-Testing-Annotations"><a href="#Spring-Testing-Annotations" class="headerlink" title="Spring Testing Annotations"></a>Spring Testing Annotations</h2><ul>
<li><p><code>@ContextConfiguration</code><br>类级别注解，用来声明如何加载和配置<code>ApplicationContext</code>。可以使用XML配置文件和被<code>@Configuration</code>注解的类。<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1） xml</span><br><span class="line">@ContextConfiguration(&quot;/test-config.xml&quot;)</span><br><span class="line">public class XmlApplicationContextTests &#123;</span><br><span class="line">    // class body...</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">// 2）  @Configuration Class</span><br><span class="line">@ContextConfiguration(classes = TestConfig.class)</span><br><span class="line">public class ConfigClassApplicationContextTests &#123;</span><br><span class="line">    // class body...</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">// 3）  `ApplicationContextInitializer` Class</span><br><span class="line">@ContextConfiguration(initializers = CustomContextIntializer.class)</span><br><span class="line">public class ContextInitializerTests &#123;</span><br><span class="line">    // class body...</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">// 4）  ContextLoader</span><br><span class="line">@ContextConfiguration(locations = &quot;/test-context.xml&quot;, loader = CustomContextLoader.class)</span><br><span class="line">public class CustomLoaderXmlApplicationContextTests &#123;</span><br><span class="line">    // class body...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>@WebAppConfiguration<br>类级别注解，用来声明如何加载<code>WebApplicationContext</code>。默认<code>&quot;file:src/main/webapp&quot;</code>为web App根目录。必须协同<code> @ContextConfiguration</code>才生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ContextConfiguration</span><br><span class="line">@WebAppConfiguration</span><br><span class="line">public class WebAppTests &#123;</span><br><span class="line">    // class body...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">@ContextConfiguration</span><br><span class="line">@WebAppConfiguration(&quot;classpath:test-web-resources&quot;)</span><br><span class="line">public class WebAppTests &#123;</span><br><span class="line">    // class body...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>@ContextHierarchy<br>类级别注解，声明多层级的<code>@ContextConfiguration</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ContextHierarchy(&#123;</span><br><span class="line">    @ContextConfiguration(&quot;/parent-config.xml&quot;),</span><br><span class="line">    @ContextConfiguration(&quot;/child-config.xml&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">public class ContextHierarchyTests &#123;</span><br><span class="line">    // class body...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@WebAppConfiguration</span><br><span class="line">@ContextHierarchy(&#123;</span><br><span class="line">    @ContextConfiguration(classes = AppConfig.class),</span><br><span class="line">    @ContextConfiguration(classes = WebConfig.class)</span><br><span class="line">&#125;)</span><br><span class="line">public class WebIntegrationTests &#123;</span><br><span class="line">    // class body...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>@ActiveProfiles<br>类级别注解，声明<em>ApplicationContext</em>使用哪些profiles。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ContextConfiguration</span><br><span class="line">@ActiveProfiles(&quot;dev&quot;)</span><br><span class="line">public class DeveloperTests &#123;</span><br><span class="line">    // class body...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ContextConfiguration</span><br><span class="line">@ActiveProfiles(&#123;&quot;dev&quot;, &quot;integration&quot;&#125;)</span><br><span class="line">public class DeveloperIntegrationTests &#123;</span><br><span class="line">    // class body...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>@TestPropertySource<br>类级别注解，指定加载properties文件或手动增加PropertySources的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ContextConfiguration</span><br><span class="line">@TestPropertySource(&quot;/test.properties&quot;)</span><br><span class="line">public class MyIntegrationTests &#123;</span><br><span class="line">    // class body...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ContextConfiguration</span><br><span class="line">@TestPropertySource(properties = &#123; &quot;timezone = GMT&quot;, &quot;port: 4242&quot; &#125;)</span><br><span class="line">public class MyIntegrationTests &#123;</span><br><span class="line">    // class body...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>@DirtiesContext<br>类或方法级别注解，根据不同策略，Spring TestContext会刷新Spring的上下文（就是重新创建ApplicationContext）<br>有各种策略</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// BEFORE_CLASS</span><br><span class="line">@DirtiesContext(classMode = BEFORE_CLASS)</span><br><span class="line">public class FreshContextTests &#123;</span><br><span class="line">    // some tests that require a new Spring container</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">//default class mode ： `AFTER_CLASS`</span><br><span class="line">@DirtiesContext</span><br><span class="line">public class ContextDirtyingTests &#123;</span><br><span class="line">    // some tests that result in the Spring container being dirtied</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">// BEFORE_EACH_TEST_METHOD</span><br><span class="line">@DirtiesContext(classMode = BEFORE_EACH_TEST_METHOD)</span><br><span class="line">public class FreshContextTests &#123;</span><br><span class="line">    // some tests that require a new Spring container</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">// AFTER_EACH_TEST_METHOD</span><br><span class="line">@DirtiesContext(classMode = AFTER_EACH_TEST_METHOD)</span><br><span class="line">public class ContextDirtyingTests &#123;</span><br><span class="line">    // some tests that result in the Spring container being dirtied</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">// BEFORE_METHOD</span><br><span class="line">@DirtiesContext(methodMode = BEFORE_METHOD)</span><br><span class="line">@Test</span><br><span class="line">public void testProcessWhichRequiresFreshAppCtx() &#123;</span><br><span class="line">    // some logic that requires a new Spring container</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">//default method mode `AFTER_METHOD`</span><br><span class="line">@DirtiesContext</span><br><span class="line">@Test</span><br><span class="line">public void testProcessWhichDirtiesAppCtx() &#123;</span><br><span class="line">    // some logic that results in the Spring container being dirtied</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@TestExecutionListeners</code></p>
</li>
<li><p><code>@Commit</code></p>
</li>
<li><p><code>@Rollback</code></p>
</li>
<li><p><code>@BeforeTransaction</code></p>
</li>
<li><p><code>@AfterTransaction</code></p>
</li>
<li><p><code>@Sql</code></p>
</li>
<li><p><code>@SqlConfig</code></p>
</li>
<li><p><code>@SqlGroup</code></p>
</li>
</ul>
<h2 id="Standard-Annotation-Support"><a href="#Standard-Annotation-Support" class="headerlink" title="Standard Annotation Support"></a>Standard Annotation Support</h2><p>Spring TestContext Framework 支持下列标准的注解</p>
<ul>
<li><pre><code>@Autowired
</code></pre>
</li>
<li>@Qualifier</li>
<li>@Resource (javax.annotation) if JSR-250 is present</li>
<li>@Inject (javax.inject) if JSR-330 is present</li>
<li>@Named (javax.inject) if JSR-330 is present</li>
<li>@PersistenceContext (javax.persistence) if JPA is present</li>
<li>@PersistenceUnit (javax.persistence) if JPA is present</li>
<li>@Required</li>
<li>@Transactional</li>
</ul>
<h2 id="Spring-JUnit-Testing-Annotations"><a href="#Spring-JUnit-Testing-Annotations" class="headerlink" title="Spring JUnit Testing Annotations"></a>Spring JUnit Testing Annotations</h2><p>组合SpringJUnit4ClassRunner, Spring’s JUnit rules, 或 Spring’s JUnit support classes使用的时候，Spring TestContext Framework 还支持下列标准的注解：</p>
<ul>
<li><p>@IfProfileValue<br>类级别或方法级别注解，校验具体的环境变量，匹配才进行测试，否则就会忽略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@IfProfileValue(name=&quot;java.vendor&quot;, value=&quot;Oracle Corporation&quot;)</span><br><span class="line">@Test</span><br><span class="line">public void testProcessWhichRunsOnlyOnOracleJvm() &#123;</span><br><span class="line">    // some logic that should run only on Java VMs from Oracle Corporation</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">@IfProfileValue(name=&quot;test-groups&quot;, values=&#123;&quot;unit-tests&quot;, &quot;integration-tests&quot;&#125;)</span><br><span class="line">@Test</span><br><span class="line">public void testProcessWhichRunsForUnitOrIntegrationTestGroups() &#123;</span><br><span class="line">    // some logic that should run only for unit and integration test groups</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>@ProfileValueSourceConfiguration</p>
</li>
<li><p>@Timed</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Timed(millis=1000)</span><br><span class="line">public void testProcessWithOneSecondTimeout() &#123;</span><br><span class="line">    // some logic that should not take longer than 1 second to execute</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>@Repeat</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Repeat(10)</span><br><span class="line">@Test</span><br><span class="line">public void testProcessRepeatedly() &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>junit</tag>
        <tag>spring</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringTesting （二） Spring TestContext Framework</title>
    <url>/2015/08/12/spring/s-SpringTest2/</url>
    <content><![CDATA[<p><a href="http://docs.spring.io/spring/docs/4.2.1.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#testcontext-framework">Spring TestContext Framework</a></p>
<h2 id="TODO-设计原理和实现"><a href="#TODO-设计原理和实现" class="headerlink" title="TODO 设计原理和实现"></a>TODO 设计原理和实现</h2><p><code> TestContextManager</code> ： Spring TestContext Framework的主入口，管理单例的<code>TestContext</code>和所有注册的TestExecutionListeners。<br><code> TestContext</code><br><code> TestExecutionListener</code><br><code> ContextLoader</code></p>
<h2 id="Context-management"><a href="#Context-management" class="headerlink" title="Context management"></a>Context management</h2><p>每个TestContext提供 context 管理， 测试实例无权配置ApplicationContext， 实例仅能获得一个ApplicationContext的引用。特别的是AbstractJUnit4SpringContextTests和AbstractTestNGSpringContextTests实现了ApplicationContextAware而且有权修改ApplicationContext。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration</span><br><span class="line">public class MyTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    // class body...</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@WebAppConfiguration</span><br><span class="line">@ContextConfiguration</span><br><span class="line">public class MyWebAppTest &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private WebApplicationContext wac;</span><br><span class="line"></span><br><span class="line">    // class body...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="注入mocks"><a href="#注入mocks" class="headerlink" title="注入mocks"></a>注入mocks</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@WebAppConfiguration</span><br><span class="line">@ContextConfiguration</span><br><span class="line">public class WacTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    WebApplicationContext wac; // cached</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    MockServletContext servletContext; // cached</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    MockHttpSession session;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    MockHttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    MockHttpServletResponse response;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    ServletWebRequest webRequest;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="执行SQL-scripts"><a href="#执行SQL-scripts" class="headerlink" title="执行SQL scripts"></a>执行SQL scripts</h2><ul>
<li><p>代码<br>下列都可以用来执行<br>   org.springframework.jdbc.datasource.init.ScriptUtils<br>  org.springframework.jdbc.datasource.init.ResourceDatabasePopulator<br>  org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests<br>  org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void databaseTest &#123;</span><br><span class="line">    ResourceDatabasePopulator populator = new ResourceDatabasePopulator();</span><br><span class="line">    populator.addScripts(</span><br><span class="line">        new ClassPathResource(&quot;test-schema.sql&quot;),</span><br><span class="line">        new ClassPathResource(&quot;test-data.sql&quot;));</span><br><span class="line">    populator.setSeparator(&quot;@@&quot;);</span><br><span class="line">    populator.execute(this.dataSource);</span><br><span class="line">    // execute code that uses the test schema and data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>@Sql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration</span><br><span class="line">@Sql(&quot;/test-schema.sql&quot;)</span><br><span class="line">public class DatabaseTests &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void emptySchemaTest &#123;</span><br><span class="line">        // execute code that uses the test schema without any test data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Sql(&#123;&quot;/test-schema.sql&quot;, &quot;/test-user-data.sql&quot;&#125;)</span><br><span class="line">    public void userTest &#123;</span><br><span class="line">        // execute code that uses the test schema and test data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">//1</span><br><span class="line">@Test</span><br><span class="line">@Sql(scripts = &quot;/test-schema.sql&quot;, config = @SqlConfig(commentPrefix = &quot;`&quot;))</span><br><span class="line">@Sql(&quot;/test-user-data.sql&quot;)</span><br><span class="line">public void userTest &#123;</span><br><span class="line">    // execute code that uses the test schema and test data</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">//3</span><br><span class="line">@Test</span><br><span class="line">@SqlGroup(&#123;</span><br><span class="line">    @Sql(scripts = &quot;/test-schema.sql&quot;, config = @SqlConfig(commentPrefix = &quot;`&quot;)),</span><br><span class="line">    @Sql(&quot;/test-user-data.sql&quot;)</span><br><span class="line">)&#125;</span><br><span class="line">public void userTest &#123;</span><br><span class="line">    // execute code that uses the test schema and test data</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">//4</span><br><span class="line">@Test</span><br><span class="line">@Sql(</span><br><span class="line">    scripts = &quot;create-test-data.sql&quot;,</span><br><span class="line">    config = @SqlConfig(transactionMode = ISOLATED)</span><br><span class="line">)</span><br><span class="line">@Sql(</span><br><span class="line">    scripts = &quot;delete-test-data.sql&quot;,</span><br><span class="line">    config = @SqlConfig(transactionMode = ISOLATED),</span><br><span class="line">    executionPhase = AFTER_TEST_METHOD</span><br><span class="line">)</span><br><span class="line">public void userTest &#123;</span><br><span class="line">    // execute code that needs the test data to be committed</span><br><span class="line">    // to the database outside of the test&#x27;s transaction</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="TestContext-Framework支持类"><a href="#TestContext-Framework支持类" class="headerlink" title="TestContext Framework支持类"></a>TestContext Framework支持类</h2><h3 id="Spring-JUnit-Runner"><a href="#Spring-JUnit-Runner" class="headerlink" title="Spring JUnit Runner"></a>Spring JUnit Runner</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@TestExecutionListeners(&#123;&#125;)</span><br><span class="line">public class SimpleTest &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void testMethod() &#123;</span><br><span class="line">      // execute test logic...</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要使用MockitoJUnitRunner等第三方runners， 可以使用Spring JUnit Rules。</p>
<h3 id="Spring-JUnit-Rules"><a href="#Spring-JUnit-Rules" class="headerlink" title="Spring JUnit Rules"></a>Spring JUnit Rules</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Optionally specify a non-Spring Runner via @RunWith(...)</span><br><span class="line">@ContextConfiguration</span><br><span class="line">public class IntegrationTest &#123;</span><br><span class="line"></span><br><span class="line">   @ClassRule</span><br><span class="line">   public static final SpringClassRule SPRING_CLASS_RULE = new SpringClassRule();</span><br><span class="line"></span><br><span class="line">   @Rule</span><br><span class="line">   public final SpringMethodRule springMethodRule = new SpringMethodRule();</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void testMethod() &#123;</span><br><span class="line">      // execute test logic...</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>junit</tag>
        <tag>spring</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringTesting （三） Spring MVC Test Framework</title>
    <url>/2015/08/13/spring/s-SpringTest3/</url>
    <content><![CDATA[<p><a href="http://docs.spring.io/spring/docs/4.2.1.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#spring-mvc-test-framework">Spring MVC Test Framework</a>建立在Servlet API mock objects基础上，他不需要一个运行的Servlet容器，<br>不需要，不需要，不需要！<br>他使用DispatcherServlet来提供完整Spring MVC的支持，使用TestContext framework来加载实际的Spring各个配置。</p>
<h2 id="Server-Side-Tests"><a href="#Server-Side-Tests" class="headerlink" title="Server-Side Tests"></a>Server-Side Tests</h2><p> Spring MVC Test的目的：提供一种有效的利用DispatcherServlet所伴生的requests和responses来测试controller的方式。<br> 例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</span><br><span class="line">import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@WebAppConfiguration</span><br><span class="line">@ContextConfiguration(&quot;test-servlet-context.xml&quot;)</span><br><span class="line">public class ExampleTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private WebApplicationContext wac;</span><br><span class="line"></span><br><span class="line">    private MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void setup() &#123;</span><br><span class="line">        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getAccount() throws Exception &#123;</span><br><span class="line">        this.mockMvc.perform(get(&quot;/accounts/1&quot;).accept(MediaType.parseMediaType(&quot;application/json;charset=UTF-8&quot;)))</span><br><span class="line">            .andExpect(status().isOk())</span><br><span class="line">            .andExpect(content().contentType(&quot;application/json&quot;))</span><br><span class="line">            .andExpect(jsonPath(&quot;$.name&quot;).value(&quot;Lee&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Setup-Options"><a href="#Setup-Options" class="headerlink" title="Setup Options"></a>Setup Options</h3><ul>
<li><p>webAppContextSetup</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@WebAppConfiguration</span><br><span class="line">@ContextConfiguration(&quot;my-servlet-context.xml&quot;)</span><br><span class="line">public class MyWebTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private WebApplicationContext wac;</span><br><span class="line"></span><br><span class="line">    private MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void setup() &#123;</span><br><span class="line">        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>standaloneSetup（简单controller实例）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyWebTests &#123;</span><br><span class="line"></span><br><span class="line">    private MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void setup() &#123;</span><br><span class="line">        this.mockMvc = MockMvcBuilders.standaloneSetup(new AccountController()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>如何选择？<br>webAppContextSetup 方式：加载并缓存完整的Spring MVC配置，</p>
<p>standaloneSetup    方式：更像一个单元测试</p>
<p>他们就像集成测试Vs单元测试。</p>
<h3 id="Performing-Requests"><a href="#Performing-Requests" class="headerlink" title="Performing Requests"></a>Performing Requests</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mockMvc.perform(post(&quot;/hotels/&#123;id&#125;&quot;, 42).accept(MediaType.APPLICATION_JSON));</span><br><span class="line">  </span><br><span class="line">mockMvc.perform(fileUpload(&quot;/doc&quot;).file(&quot;a1&quot;, &quot;ABC&quot;.getBytes(&quot;UTF-8&quot;)));</span><br><span class="line">  </span><br><span class="line">mockMvc.perform(get(&quot;/hotels?foo=&#123;foo&#125;&quot;, &quot;bar&quot;));</span><br><span class="line">  </span><br><span class="line">mockMvc.perform(get(&quot;/hotels&quot;).param(&quot;foo&quot;, &quot;bar&quot;));</span><br><span class="line">  </span><br><span class="line">mockMvc.perform(get(&quot;/app/main/hotels/&#123;id&#125;&quot;).contextPath(&quot;/app&quot;).servletPath(&quot;/main&quot;))</span><br></pre></td></tr></table></figure>

<h3 id="测试预期"><a href="#测试预期" class="headerlink" title="测试预期"></a>测试预期</h3><p>测试预期结果可以在Requests后面加一个或多个<code> .andExpect(..)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mockMvc.perform(post(&quot;/persons&quot;))</span><br><span class="line">    .andDo(print())  // static import from MockMvcResultHandlers， can print all the available result data</span><br><span class="line">    .andExpect(status().isOk())</span><br><span class="line">    .andExpect(model().attributeHasErrors(&quot;person&quot;));</span><br></pre></td></tr></table></figure>

<p>如果需要直接访问结果来验证一些其他数据，在测试预期最后加上<code> .andReturn()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MvcResult mvcResult = mockMvc.perform(post(&quot;/persons&quot;)).andExpect(status().isOk()).andReturn();</span><br></pre></td></tr></table></figure>

<h3 id="HtmlUnit-Integration-TODO"><a href="#HtmlUnit-Integration-TODO" class="headerlink" title="HtmlUnit Integration TODO"></a><a href="http://docs.spring.io/spring/docs/4.2.1.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#spring-mvc-test-server-htmlunit">HtmlUnit Integration TODO</a></h3><h2 id="Client-Side-REST-Tests"><a href="#Client-Side-REST-Tests" class="headerlink" title="Client-Side REST Tests"></a>Client-Side REST Tests</h2><p>使用RestTemplate进行客户端的REST测试。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RestTemplate restTemplate = new RestTemplate();</span><br><span class="line"></span><br><span class="line">MockRestServiceServer mockServer = MockRestServiceServer.createServer(restTemplate);</span><br><span class="line">mockServer.expect(requestTo(&quot;/greeting&quot;)).andRespond(withSuccess(&quot;Hello world&quot;, MediaType.TEXT_PLAIN));</span><br><span class="line"></span><br><span class="line">// use RestTemplate ...</span><br><span class="line"></span><br><span class="line">mockServer.verify();</span><br></pre></td></tr></table></figure>


<h2 id="PetClinic-Example"><a href="#PetClinic-Example" class="headerlink" title="PetClinic Example"></a>PetClinic Example</h2><p>Spring官方提供的完整案例<a href="https://github.com/spring-projects/spring-petclinic">Github</a></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>junit</tag>
        <tag>spring</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringPortletMVCFramework</title>
    <url>/2015/08/07/spring/s-springPortletMVCFramework/</url>
    <content><![CDATA[<h1 id="Spring-Portlet-MVC-Framework"><a href="#Spring-Portlet-MVC-Framework" class="headerlink" title="Spring Portlet MVC Framework"></a><a href="http://docs.spring.io/spring/docs/4.2.1.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#portlet">Spring Portlet MVC Framework</a></h1>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>Portlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Web Socket</title>
    <url>/2015/08/18/spring/s-springWebSocket/</url>
    <content><![CDATA[<h2 id="使用情景"><a href="#使用情景" class="headerlink" title="使用情景"></a>使用情景</h2><p>Spring Framework是基于STOMP提供的WebSocket服务，适合与对时间延迟非常敏感并且需要高频得交换大量数据的场合。比如但不限于这样的应用：金融，游戏，在线合作等。REST和HTTP API可以和WebSocket混合使用。 Spring Framework允许<code>@Controller</code>和<code>@RestController</code>同时有HTTP request操作和WebSocket消息操作。</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC（一） 常用点</title>
    <url>/2015/08/06/spring/s-springmvc%201/</url>
    <content><![CDATA[<p>springmvc一</p>
<h2 id="RequestMapping-URI"><a href="#RequestMapping-URI" class="headerlink" title="@RequestMapping URI"></a>@RequestMapping URI</h2><h3 id="URI-Template-Patterns"><a href="#URI-Template-Patterns" class="headerlink" title="URI Template Patterns"></a>URI Template Patterns</h3><p><a href="http://docs.spring.io/spring/docs/4.2.1.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-uri-templates">spring doc</a></p>
<p>如何匹配这个url <code>&quot;/spring-web/spring-web-3.0.5.jar&quot;</code> ？</p>
<p><code>@RequestMapping</code> 支持正则表达式， 语法就是 <code>&#123;varName:regex&#125;</code>。</p>
<p>比如上面那个url就可以这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/spring-web/&#123;symbolicName:[a-z-]+&#125;-&#123;version:\\d\\.\\d\\.\\d&#125;&#123;extension:\\.[a-z]+&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(<span class="meta">@PathVariable</span> String version, <span class="meta">@PathVariable</span> String extension)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Path-Pattern-Comparison"><a href="#Path-Pattern-Comparison" class="headerlink" title="Path Pattern Comparison"></a>Path Pattern Comparison</h4><p>多重匹配优先规则：</p>
<ul>
<li>越少数量URI variables 和 wild cards 的表达式越优先；例如<code>/hotels/&#123;hotel&#125;/*</code> 比 <code>/hotels/&#123;hotel&#125;/**</code> 优先</li>
<li>数量一致，越长的表达式越优先；例如<code>/foo/bar*</code> 比 <code>/foo/*</code> 优先</li>
<li>数量和长度一致， 越少wild cards的表达式越优先；例如<code>/hotels/&#123;hotel&#125;</code> 比 <code>/hotels/*</code> 优先</li>
<li>例外的 <code>/api/&#123;a&#125;/&#123;b&#125;/&#123;c</code> 比 <code>/**</code> 优先</li>
</ul>
<h3 id="Path-Pattern-Matching-By-Suffix"><a href="#Path-Pattern-Matching-By-Suffix" class="headerlink" title="Path Pattern Matching By Suffix"></a>Path Pattern Matching By Suffix</h3><p>默认Spring MVC会自动增加后缀 <code>&quot;.*&quot;</code> 来匹配URI。比如 <code>/person</code> 会自动映射成 <code>/person.*</code> ， 可以自动匹配文件类型，如<code>/person.pdf</code>, <code>/person.xml</code>，不能匹配 <code> /person.com</code><br><code>.com</code> 不是文件类型。</p>
<h3 id="Matrix-Variables"><a href="#Matrix-Variables" class="headerlink" title="Matrix Variables"></a>Matrix Variables</h3><p>需要修改下默认<a href="http://docs.spring.io/spring/docs/4.2.1.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#mvc-ann-matrix-variables">配置</a> ，，，，就可以使用<a href="http://www.w3.org/DesignIssues/MatrixURIs.html"> “Matrix URIs”</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// GET /pets/42;q=11;r=22</span><br><span class="line"></span><br><span class="line">@RequestMapping(path = &quot;/pets/&#123;petId&#125;&quot;, method = RequestMethod.GET)</span><br><span class="line">public void findPet(@PathVariable String petId, @MatrixVariable int q) &#123;</span><br><span class="line"></span><br><span class="line">    // petId == 42</span><br><span class="line">    // q == 11</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// GET /owners/42;q=11/pets/21;q=22</span><br><span class="line"></span><br><span class="line">@RequestMapping(path = &quot;/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;&quot;, method = RequestMethod.GET)</span><br><span class="line">public void findPet(</span><br><span class="line">        @MatrixVariable(name=&quot;q&quot;, pathVar=&quot;ownerId&quot;) int q1,</span><br><span class="line">        @MatrixVariable(name=&quot;q&quot;, pathVar=&quot;petId&quot;) int q2) &#123;</span><br><span class="line"></span><br><span class="line">    // q1 == 11</span><br><span class="line">    // q2 == 22</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// GET /pets/42</span><br><span class="line"></span><br><span class="line">@RequestMapping(path = &quot;/pets/&#123;petId&#125;&quot;, method = RequestMethod.GET)</span><br><span class="line">public void findPet(@MatrixVariable(required=false, defaultValue=&quot;1&quot;) int q) &#123;</span><br><span class="line"></span><br><span class="line">    // q == 1</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// GET /owners/42;q=11;r=12/pets/21;q=22;s=23</span><br><span class="line"></span><br><span class="line">@RequestMapping(path = &quot;/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;&quot;, method = RequestMethod.GET)</span><br><span class="line">public void findPet(</span><br><span class="line">        @MatrixVariable Map&lt;String, String&gt; matrixVars,</span><br><span class="line">        @MatrixVariable(pathVar=&quot;petId&quot;&quot;) Map&lt;String, String&gt; petMatrixVars) &#123;</span><br><span class="line"></span><br><span class="line">    // matrixVars: [&quot;q&quot; : [11,22], &quot;r&quot; : 12, &quot;s&quot; : 23]</span><br><span class="line">    // petMatrixVars: [&quot;q&quot; : 11, &quot;s&quot; : 23]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="BindingResult-and-ModelAttribute"><a href="#BindingResult-and-ModelAttribute" class="headerlink" title="BindingResult and @ModelAttribute"></a>BindingResult and @ModelAttribute</h3><p>BindingResult必须直接跟在@ModelAttribute后面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(method = RequestMethod.POST)</span><br><span class="line">public String processSubmit(@ModelAttribute(&quot;pet&quot;) Pet pet, BindingResult result, Model model) &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h3 id="各种参数绑定"><a href="#各种参数绑定" class="headerlink" title="各种参数绑定"></a>各种参数绑定</h3><h4 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h4><ul>
<li>绑定URI的参数，若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable(“name”)指定uri template中的名称。</li>
</ul>
<h4 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h4><ul>
<li>可以把Request请求header部分的值绑定到方法的参数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/displayHeaderInfo.do&quot;)  </span><br><span class="line">public void displayHeaderInfo(@RequestHeader(&quot;Accept-Encoding&quot;) String encoding,  </span><br><span class="line">                              @RequestHeader(&quot;Keep-Alive&quot;) long keepAlive)  &#123;  </span><br><span class="line">  </span><br><span class="line">  //...  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h4><ul>
<li>把Request header中关于cookie的值绑定到方法的参数</li>
</ul>
<h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><ul>
<li>常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String–&gt; 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；</li>
<li>用来处理Content-Type: 为 application&#x2F;x-www-form-urlencoded编码的内容，提交方式GET、POST；</li>
<li>该注解有两个属性： value、required； value用来指定要传入值的id名称，required用来指示参数是否必须绑定</li>
</ul>
<h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><ul>
<li>该注解常用来处理Content-Type: 不是application&#x2F;x-www-form-urlencoded编码的内容，例如application&#x2F;json, application&#x2F;xml等；</li>
<li>它是通过使用HandlerAdapter 配置的HttpMessageConverters来解析post data body，然后绑定到相应的bean上的。</li>
<li>因为配置有FormHttpMessageConverter，所以也可以用来处理 application&#x2F;x-www-form-urlencoded的内容，处理完的结果放在一个MultiValueMap&lt;String, String&gt;里，这种情况在某些特殊需求下使用，详情查看FormHttpMessageConverter api;</li>
</ul>
<h4 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h4><ul>
<li>绑定HttpSession中的attribute对象的值</li>
</ul>
<h4 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h4><p>该注解有两个用法，一个是用于方法上，一个是用于参数上；<br>用于方法上时：  通常用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model；<br>用于参数上时： 用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：</p>
<ul>
<li>@SessionAttributes 启用的attribute 对象上；</li>
<li>@ModelAttribute 用于方法上时指定的model对象；</li>
<li>上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中。</li>
</ul>
<h3 id="HttpPutFormContentFilter"><a href="#HttpPutFormContentFilter" class="headerlink" title="HttpPutFormContentFilter"></a>HttpPutFormContentFilter</h3><p>支持PUT方法</p>
<h3 id="InitBinder"><a href="#InitBinder" class="headerlink" title="@InitBinder"></a>@InitBinder</h3><p>在controller里面配置web数据绑定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class MyFormController &#123;</span><br><span class="line"></span><br><span class="line">    @InitBinder</span><br><span class="line">    public void initBinder(WebDataBinder binder) &#123;</span><br><span class="line">        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">        dateFormat.setLenient(false);</span><br><span class="line">        binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最新的Spring 4.2 里面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class MyFormController &#123;</span><br><span class="line"></span><br><span class="line">    @InitBinder</span><br><span class="line">    public void initBinder(WebDataBinder binder) &#123;</span><br><span class="line">        binder.addCustomFormatter(new DateFormatter(&quot;yyyy-MM-dd&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h3><p>被注解的类可以搭配<code> @ExceptionHandler</code>, <code> @InitBinder</code>, and <code> @ModelAttribute</code>，全局处理</p>
<h2 id="Resolving-views"><a href="#Resolving-views" class="headerlink" title="Resolving views"></a>Resolving views</h2><p><a href="http://docs.spring.io/spring/docs/4.2.1.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#mvc-viewresolver-resolver">Spring Doc : Resolving views</a></p>
<h2 id="Spring’s-multipart-file-upload-support"><a href="#Spring’s-multipart-file-upload-support" class="headerlink" title="Spring’s multipart (file upload) support"></a><a href="http://docs.spring.io/spring/docs/4.2.1.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#mvc-multipart">Spring’s multipart (file upload) support</a></h2><h2 id="Handling-exceptions"><a href="#Handling-exceptions" class="headerlink" title="Handling exceptions"></a>Handling exceptions</h2><ul>
<li>HandlerExceptionResolver</li>
<li>@ExceptionHandler</li>
</ul>
<p><a href="http://docs.spring.io/spring/docs/4.2.1.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#mvc-ann-rest-spring-mvc-exceptions">Standard Spring MVC Exceptions</a></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC（二） 配置</title>
    <url>/2015/08/07/spring/s-springmvc2/</url>
    <content><![CDATA[<h2 id="Spring-MVC-的配置-Configuring-Spring-MVC"><a href="#Spring-MVC-的配置-Configuring-Spring-MVC" class="headerlink" title="Spring MVC 的配置 Configuring Spring MVC"></a>Spring MVC 的配置 <a href="http://docs.spring.io/spring/docs/4.2.1.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#mvc-config">Configuring Spring MVC</a></h2><h3 id="开启Spring-MVC默认配置"><a href="#开启Spring-MVC默认配置" class="headerlink" title="* 开启Spring MVC默认配置"></a>* 开启Spring MVC默认配置</h3><p>Java Config: 加入<code> @EnableWebMvc</code> 到 某个有 <code>@Configuration</code> 注解的类头。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebMvc</span><br><span class="line">public class WebConfig &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>XML方式: 增加<code>mvc:annotation-driven</code> 到 DispatcherServlet 的context里面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;</span><br><span class="line">        http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/mvc</span><br><span class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mvc:annotation-driven /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>


<h3 id="自定义Spring-MVC配置"><a href="#自定义Spring-MVC配置" class="headerlink" title="* 自定义Spring MVC配置"></a>* 自定义Spring MVC配置</h3><p>Java Config: 加入<code> @EnableWebMvc</code> 到 某个有 <code>@Configuration</code> 注解的类头。自己实现<code> WebMvcConfigurer</code>， 更多是继承<code> WebMvcConfigurerAdapter</code>并重写你自己需要的方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebMvc</span><br><span class="line">public class WebConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    // Override configuration methods...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>XML方式: 增加<code>mvc:annotation-driven</code> 到 DispatcherServlet 的context里面。设置自己需要<a href="http://schema.spring.io/mvc/spring-mvc.xsd">Spring MVC XML schema</a>里面的元素值。</p>
<h3 id="高级自定义Spring-MVC配置"><a href="#高级自定义Spring-MVC配置" class="headerlink" title="* 高级自定义Spring MVC配置"></a>* 高级自定义Spring MVC配置</h3><p>Java Config: 去掉<code> @EnableWebMvc</code>。 <code>@Configuration</code> 注解类头，自己实现<code> WebMvcConfigurationSupport.</code>， 更多是继承<code> DelegatingWebMvcConfiguration</code>并重写你自己需要的方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebConfig extends DelegatingWebMvcConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry)&#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @Bean</span><br><span class="line">    public RequestMappingHandlerAdapter requestMappingHandlerAdapter() &#123;</span><br><span class="line">        // Create or let &quot;super&quot; create the adapter</span><br><span class="line">        // Then customize one of its properties</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>具体内容看头部的官方文档</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>spring aop 面向切面编程</title>
    <url>/2017/10/13/spring/spring%20aop/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>spring aop 面向切面编程; 主要探索Spring框架对面向切面编程的支持，包括如何定义需要被切面(aspect)覆盖的类，如何使用注解创建切面。</p>
<ul>
<li>AOP基本知识</li>
<li>spring AOP</li>
</ul>
<p><em>更新历史</em><br>无</p>
<span id="more"></span>

<hr>
<h2 id="AOP基本知识"><a href="#AOP基本知识" class="headerlink" title="AOP基本知识"></a>AOP基本知识</h2><p>面向切面编程(AOP)模块化的单元则是切面。切面能对交叉关注点进行模块化，简单来说，交叉关注点值得是那些影响一个应用中多个模块的通用功能。</p>
<p><img src="/images/aop1.png"></p>
<p>把交叉关注点模块化到某个特定的类，这个类就称为切面(aspects)，这有两个优点：<br>关注点分离，而不是与业务逻辑代码混合在一起；<br>业务模块更加清晰，因为它们只需要关注业务逻辑部分；</p>
<h2 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP 术语"></a>AOP 术语</h2><ul>
<li>切面(Aspect)</li>
<li>连接点(Joinpoint)</li>
<li>切入点(Pointcut)</li>
<li>引入(Introduction)</li>
<li>目标对象(Target Object)</li>
<li>AOP代理(AOP Proxy)</li>
<li>织入(Weaving)</li>
<li>通知(Advice)</li>
</ul>
<h3 id="切面-Aspect"><a href="#切面-Aspect" class="headerlink" title="切面(Aspect)"></a>切面(Aspect)</h3><p>一个关注点的模块化，这个关注点可能会横切多个对象。通常由 通知(advice)、切点(pointcuts)和连接点(join points)组成；<br>事务管理是J2EE应用中一个关于横切关注点的很好的例子。在Spring AOP中，切面可以使用基于模式)或者基于@Aspect注解的方式来实现。<br><img src="/images/aop2.png"></p>
<blockquote>
<blockquote>
<p>切面的功能(advice)通过一个或者多个连接点织入到应用的执行流程</p>
</blockquote>
</blockquote>
<h3 id="连接点-Joinpoint"><a href="#连接点-Joinpoint" class="headerlink" title="连接点(Joinpoint)"></a>连接点(Joinpoint)</h3><p>在程序执行过程中某个特定的点，可能是正在调用的方法、正在抛出的异常或者是正在被修改的属性, 比如某方法调用的时候或者处理异常的时候。<br>在Spring AOP中，一个连接点总是表示一个方法的执行。<br>通常是业务代码中的概念， 不在切面(Aspect)代码中体现。理论上可以做为切入点的集合。</p>
<h3 id="切入点-Pointcut"><a href="#切入点-Pointcut" class="headerlink" title="切入点(Pointcut)"></a>切入点(Pointcut)</h3><p>匹配连接点的断言， 逻辑上是连接点的子集，就是当前切面(Aspect)所关心&#x2F;处理的连接点。<br>在切面(Aspect)代码中通过 <code>@Pointcut</code> 定义。</p>
<h3 id="通知-Advice"><a href="#通知-Advice" class="headerlink" title="通知(Advice)"></a>通知(Advice)</h3><p>在切面的某个特定的切入点上执行的动作， 就是切面的真正目的——它真正要做的工作。</p>
<p>通知类型：</p>
<ul>
<li>前置通知(Before advice)：在某连接点之前执行的通知</li>
<li>后置通知(After returning advice)：在某连接点正常完成后执行的通知</li>
<li>异常通知(After throwing advice)：在方法抛出异常退出时执行的通知</li>
<li>最终通知(After (finally) advice)当某连接点退出的时候执行的通知(不论是正常返回还是异常退出)</li>
<li>环绕通知(Around Advice)：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。</li>
</ul>
<h3 id="引入-Introduction"><a href="#引入-Introduction" class="headerlink" title="引入(Introduction)"></a>引入(Introduction)</h3><p>用来给一个类型声明额外的方法或属性(也被称为连接类型声明(inter-type declaration))。Spring允许引入新的接口(以及一个对应的实现)到任何被代理的对象。例如，你可以使用引入来使一个bean实现IsModified接口，以便简化缓存机制。</p>
<h3 id="目标对象-Target-Object"><a href="#目标对象-Target-Object" class="headerlink" title="目标对象(Target Object)"></a>目标对象(Target Object)</h3><p>被一个或者多个切面所通知的对象。也被称做被通知(advised)对象。 既然Spring AOP是通过运行时代理实现的，这个对象永远是一个被代理(proxied)对象。</p>
<h3 id="AOP代理-AOP-Proxy"><a href="#AOP代理-AOP-Proxy" class="headerlink" title="AOP代理(AOP Proxy)"></a>AOP代理(AOP Proxy)</h3><p>AOP框架创建的对象，用来实现切面契约(例如通知方法执行等等)。在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。</p>
<h3 id="织入-Weaving"><a href="#织入-Weaving" class="headerlink" title="织入(Weaving)"></a>织入(Weaving)</h3><p>把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时(例如使用AspectJ编译器)，类加载时和运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。</p>
<h2 id="Spring-的AOP支持"><a href="#Spring-的AOP支持" class="headerlink" title="Spring 的AOP支持"></a>Spring 的AOP支持</h2><p>Spring对AOP的支持来自以下四种形式：</p>
<ul>
<li>基于代理的Spring AOP</li>
<li>Pure-POJO aspects</li>
<li>基于@AspectJ注解的aspects</li>
<li>注入AspectJ aspects(所有版本的Spring都支持)</li>
</ul>
<p>前三种属于Spring自己的AOP实现：Spring AOP基于动态代理机制构建，也正是因为这个原因，Spring AOP仅仅支持函数调用级别的拦截。</p>
<h3 id="启用-AspectJ支持"><a href="#启用-AspectJ支持" class="headerlink" title="启用@AspectJ支持"></a>启用@AspectJ支持</h3><p>java config： <code>@EnableAspectJAutoProxy</code><br>或<br>xml config： <code>&lt;aop:aspectj-autoproxy /&gt;</code></p>
<h3 id="完整-经典-切面"><a href="#完整-经典-切面" class="headerlink" title="完整(经典)切面"></a>完整(经典)切面</h3><p>一个 完整(经典)切面 通常 由 切面， 切入点， 通知 3部分组成。</p>
<h4 id="切面-Aspect-1"><a href="#切面-Aspect-1" class="headerlink" title="切面 @Aspect"></a>切面 <code>@Aspect</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Aspect</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="切入点-pointcut-Pointcut"><a href="#切入点-pointcut-Pointcut" class="headerlink" title="切入点(pointcut) @Pointcut"></a>切入点(pointcut) <code>@Pointcut</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(value=&quot;execution(* transfer(..)) &amp;&amp; args(param)&quot;, argNames = &quot;param&quot;)</span><span class="comment">// the pointcut expression</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pointcutName</span><span class="params">()</span> &#123;&#125;<span class="comment">// the pointcut signature</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>value</code> : 指定切入点表达式, 如execution、args等</li>
<li><code>argNames</code> : 指定该切入点方法参数列表,多个用,分隔,这些参数将传递给通知方法同名的参数;</li>
<li><code>pointcutName</code> : 切入点名字，可以用该名字引用该切入点表达式</li>
</ul>
<p>切入点指示符(PCD)</p>
<style>
table th:first-of-type {
    width: 20%;
}
</style>

<table>
<thead>
<tr>
<th align="center">切入点指示符</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">execution</td>
<td align="left">匹配方法，这是你将会用到的Spring的最主要的切入点指示符。</td>
</tr>
<tr>
<td align="center">within</td>
<td align="left">匹配特定类型之内的全部方法</td>
</tr>
<tr>
<td align="center">target</td>
<td align="left">用于匹配当前目标对象类型的连接点,不包括接口。</td>
</tr>
<tr>
<td align="center">args</td>
<td align="left">用于匹配当前执行的方法传入的参数为指定类型的连接点</td>
</tr>
<tr>
<td align="center">this</td>
<td align="left">用于匹配当前AOP代理对象类型的连接点,包括接口</td>
</tr>
<tr>
<td align="center">@annotation</td>
<td align="left">匹配持有指定注解的方法(注解在方法上)。</td>
</tr>
<tr>
<td align="center">@within</td>
<td align="left">匹配持有指定注解的类型里面的所有方法(注解在类上)</td>
</tr>
<tr>
<td align="center">@target</td>
<td align="left">用于匹配当前目标对象类型的连接点，其中目标对象持有指定的注解</td>
</tr>
<tr>
<td align="center">@args</td>
<td align="left">匹配当前执行的方法传入的参数持有指定的注解</td>
</tr>
</tbody></table>
<h4 id="声明通知"><a href="#声明通知" class="headerlink" title="声明通知"></a>声明通知</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(value = &quot;切入点表达式或命名切入点&quot;, argNames = &quot;参数列表参数名&quot;)</span></span><br><span class="line"><span class="meta">@After(value  = &quot;切入点表达式或命名切入点&quot;, argNames = &quot;参数列表参数名&quot;)</span></span><br><span class="line"><span class="meta">@Around(value = &quot;切入点表达式或命名切入点&quot;, argNames = &quot;参数列表参数名&quot;)</span></span><br><span class="line"><span class="meta">@AfterReturning(</span></span><br><span class="line"><span class="meta">value = &quot;切入点表达式或命名切入点&quot;,</span></span><br><span class="line"><span class="meta">pointcut = &quot;切入点表达式或命名切入点&quot;, // 如果指定了将覆盖value属性指定的，pointcut具有高优先级</span></span><br><span class="line"><span class="meta">argNames = &quot;参数列表参数名&quot;,</span></span><br><span class="line"><span class="meta">returning = &quot;返回值对应参数名&quot;)</span></span><br><span class="line"><span class="meta">@AfterThrowing(</span></span><br><span class="line"><span class="meta">value = &quot;切入点表达式或命名切入点&quot;,</span></span><br><span class="line"><span class="meta">pointcut = &quot;切入点表达式或命名切入点&quot;,</span></span><br><span class="line"><span class="meta">argNames = &quot;参数列表参数名&quot;,</span></span><br><span class="line"><span class="meta">throwing = &quot;异常对应参数名&quot;)</span></span><br></pre></td></tr></table></figure>
<p>如果在同一个连接点上执行多个通知,可以使用<code>@Order</code>注解决定其执行顺序</p>
<ul>
<li><p>前置通知 <code>@Before</code><br>声明前置通知</p>
</li>
<li><p>后置通知 <code>@AfterReturning</code><br>在一个匹配的方法返回的时候执行</p>
<p>  通知体内得到返回的值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterReturningExample</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning(</span></span><br><span class="line"><span class="meta">    pointcut=&quot;com.xyz.myapp.SystemArchitecture.dataAccessOperation()&quot;,</span></span><br><span class="line"><span class="meta">    returning=&quot;retVal&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAccessCheck</span><span class="params">(Object retVal)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>异常通知 <code>@AfterThrowing</code><br>只在某种特殊的异常被抛出的时候匹配<br>还可以将抛出的异常绑定到通知的一个参数上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterThrowingExample</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@AfterThrowing(</span></span><br><span class="line"><span class="meta">    pointcut=&quot;com.xyz.myapp.SystemArchitecture.dataAccessOperation()&quot;,</span></span><br><span class="line"><span class="meta">    throwing=&quot;ex&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doRecoveryActions</span><span class="params">(DataAccessException ex)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最终通知  <code>@After</code> 不论一个方法是如何结束的，最终通知都会运行。<br>最终通知必须准备处理正常返回和异常返回两种情况。通常用它来释放资源。</p>
</li>
<li><p>环绕通知 <code>@Around</code><br>环绕通知在一个方法执行之前和之后执行。<br>通知的第一个参数必须是 ProceedingJoinPoint类型。在通知体内，调用 ProceedingJoinPoint的proceed()方法会导致 后台的连接点方法执行。proceed 方法也可能会被调用并且传入一个 Object[]对象-该数组中的值将被作为方法执行时的参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AroundExample</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Around(&quot;com.xyz.myapp.SystemArchitecture.businessService()&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">doBasicProfiling</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// start stopwatch</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">retVal</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">    <span class="comment">// stop stopwatch</span></span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="通知参数-Advice-parameters"><a href="#通知参数-Advice-parameters" class="headerlink" title="通知参数(Advice parameters)"></a>通知参数(Advice parameters)</h4><p>可以在通知签名中声明所需的参数.</p>
<p>如果第一个参数是JoinPoint， ProceedingJoinPoint， 或者JoinPoint.StaticPart类型， 你可以在“argNames”属性的值中省去参数的名字,Spring会自动传入。<br>其他使用 额外的”argNames”属性指定的参数名。<br>如下 参数 <code>trackNumber</code>, <code>jp</code> 都可以使用。</p>
<h4 id="完整切面例子"><a href="#完整切面例子" class="headerlink" title="完整切面例子"></a>完整切面例子</h4><p>上面章节分别说明了切面，切入点，通知， 下面结合整体例子说明， 注意 1,2,3 点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;<span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//1. 切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrackCounter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Integer&gt; trackCounts = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut( //2. 切入点</span></span><br><span class="line"><span class="meta">            &quot;execution(* com.spring.sample.soundsystem.CompactDisc.playTrack( .. )) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;&amp;&amp; args(trackNumber)&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trackPlayed</span><span class="params">(<span class="type">int</span> trackNumber)</span> &#123;&#125; <span class="comment">//2.1 注意参数声明和上面切入点签名一致</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;trackPlayed(trackNumber)&quot;)</span>  <span class="comment">//3. 通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countTrack</span><span class="params">(JoinPoint jp, <span class="type">int</span> trackNumber)</span> &#123;  <span class="comment">//3.1 注意参数声明和上面通知签名一致</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">currentCount</span> <span class="operator">=</span> getPlayCount(trackNumber);</span><br><span class="line">        trackCounts.put(trackNumber, currentCount + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPlayCount</span><span class="params">(<span class="type">int</span> trackNumber)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> trackCounts.containsKey(trackNumber) ？ trackCounts.get(trackNumber) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="引入-Introduction-1"><a href="#引入-Introduction-1" class="headerlink" title="引入(Introduction)"></a>引入(Introduction)</h2><p>在不修改原有类的基础上为该类添加新方法，即通过切面为Spring的beans增加新方法。<br>使用 <code>@DeclareParents</code> 注解</p>
<p>假定现有一个来自Spring的接口 <code>SpringIntroduction</code>, 现在你需要给它增加 <code>Encode</code>功能， </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Encode</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">AopEncode</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你暂时还不能修改Spring 的代码， 那你就可以使用Spring AOP。</p>
<h3 id="introduced的默认实现"><a href="#introduced的默认实现" class="headerlink" title="introduced的默认实现"></a>introduced的默认实现</h3><p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultEncode</span> <span class="keyword">implements</span> <span class="title class_">Encode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aopEncode</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Introduction the Encode!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="introduced-切面"><a href="#introduced-切面" class="headerlink" title="introduced 切面"></a>introduced 切面</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncodeIntroducer</span> &#123;</span><br><span class="line">    <span class="meta">@DeclareParents(value = &quot;io.spring.xxx.SpringIntroduction+&quot;,</span></span><br><span class="line"><span class="meta">                    defaultImpl = DefaultEncode.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Encode encode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过<code>@DeclareParents</code>注解将 Encode 接口引入到 SpringIntroduction 接口的实现中。</p>
<p><code>@DeclareParents</code> 注解的组成包括三点：</p>
<ul>
<li>value属性用于匹配那些beans需要被引入这个新的接口。在这个例子中是所有SpringIntroduction的实现都被引入了新的接口（最后的那个+表示，所有SpringIntroduction的子类型，除了SpringIntroduction自己）。</li>
<li>defaultImpl属性用于指定一个新引入的接口的实现，在这里我们提供了DefaultEncode类；</li>
<li>引入的新接口被定义为public static的属性，这里引入了Encode接口</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>junit 的使用例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(loader = AnnotationConfigContextLoader.class)</span><br><span class="line">public class EncodeIntroducerTest &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private SpringIntroduction springIntroduction;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testEncode() &#123;</span><br><span class="line">        Encode encode = (Encode) springIntroduction; //使用方法</span><br><span class="line">        Encode.aopEncode();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Bean</span><br><span class="line">    public EncodeIntroducer encodeIntroducer() &#123;</span><br><span class="line">        return  new EncodeIntroducer();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Configuration</span><br><span class="line">    @EnableAspectJAutoProxy</span><br><span class="line">    public static class EncdeIntroducerTest &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="附录-切入点表达式"><a href="#附录-切入点表达式" class="headerlink" title="附录 切入点表达式"></a>附录 切入点表达式</h2><h3 id="类型匹配语句"><a href="#类型匹配语句" class="headerlink" title="类型匹配语句"></a>类型匹配语句</h3><p>类型匹配语句格式像下面这样(带?的属于可选,可以不写):</p>
<p>对类的匹配: 注解<code>?</code> 类的全限定名字<br>对方法的匹配: 注解<code>?</code> 修饰符<code>?</code> 返回值类型 类型声明<code>?</code> 方法名(参数列表) 异常列表<code>？</code></p>
<h3 id="类型匹配的通配符"><a href="#类型匹配的通配符" class="headerlink" title="类型匹配的通配符"></a>类型匹配的通配符</h3><p><code>*</code> : 匹配任何数量字符；<br><code>..</code> :(两个点)匹配任何数量字符的重复;如在类型模式中匹配任何数量子包,而在方法参数模式中匹配任何数量参数<br><code>+</code> : 匹配指定类型的子类型,仅能作为后缀放在类型模式后边</p>
<h3 id="切入点表达式-例"><a href="#切入点表达式-例" class="headerlink" title="切入点表达式 例"></a>切入点表达式 例</h3><p>AspectJ使用 与(&amp;&amp;)、或(||)、非(!)来组合切入点表达式, 在xml文件中可使用and、or、not</p>
<ul>
<li><p>任意公共方法的执行：<br><code>execution(public * *(..))</code></p>
</li>
<li><p>任何一个名字以“set”开始的方法的执行：<br><code>execution(* set*(..))</code></p>
</li>
<li><p>AccountService接口定义的任意方法的执行：<br><code>execution(* com.xyz.service.AccountService.*(..))</code></p>
</li>
<li><p>在service包中定义的任意方法的执行：<br><code>execution(* com.xyz.service.*.*(..))</code></p>
</li>
<li><p>在service包或其子包中定义的任意方法的执行：<br><code>execution(* com.xyz.service..*.*(..))</code></p>
</li>
<li><p>在service包中的任意连接点(在Spring AOP中只是方法执行)：<br><code>within(com.xyz.service.*)</code></p>
</li>
<li><p>在service包或其子包中的任意连接点(在Spring AOP中只是方法执行)：<br><code>within(com.xyz.service..*)</code></p>
</li>
<li><p>实现了AccountService接口的代理对象的任意连接点 (在Spring AOP中只是方法执行)：<br><code>this(com.xyz.service.AccountService)</code><br>‘this’在绑定表单中更加常用：- 请参见后面的通知一节中了解如何使得代理对象在通知体内可用。</p>
</li>
<li><p>实现AccountService接口的目标对象的任意连接点 (在Spring AOP中只是方法执行)：<br><code>target(com.xyz.service.AccountService)</code><br>‘target’在绑定表单中更加常用：- 请参见后面的通知一节中了解如何使得目标对象在通知体内可用。</p>
</li>
<li><p>任何一个只接受一个参数，并且运行时所传入的参数是Serializable 接口的连接点(在Spring AOP中只是方法执行)<br><code>args(java.io.Serializable)</code><br>‘args’在绑定表单中更加常用：- 请参见后面的通知一节中了解如何使得方法参数在通知体内可用。<br>请注意在例子中给出的切入点不同于 execution(* *(java.io.Serializable))： args版本只有在动态运行时候传入参数是Serializable时才匹配，而execution版本在方法签名中声明只有一个 Serializable类型的参数时候匹配。</p>
</li>
<li><p>目标对象中有一个 @Transactional 注解的任意连接点 (在Spring AOP中只是方法执行)<br><code>@target(org.springframework.transaction.annotation.Transactional)</code><br>‘@target’在绑定表单中更加常用：- 请参见后面的通知一节中了解如何使得注解对象在通知体内可用。</p>
</li>
<li><p>任何一个目标对象声明的类型有一个 @Transactional 注解的连接点 (在Spring AOP中只是方法执行)：<br><code>@within(org.springframework.transaction.annotation.Transactional)</code><br>‘@within’在绑定表单中更加常用：- 请参见后面的通知一节中了解如何使得注解对象在通知体内可用。</p>
</li>
<li><p>任何一个执行的方法有一个 @Transactional 注解的连接点 (在Spring AOP中只是方法执行)<br><code>@annotation(org.springframework.transaction.annotation.Transactional)</code><br>‘@annotation’在绑定表单中更加常用：- 请参见后面的通知一节中了解如何使得注解对象在通知体内可用。</p>
</li>
<li><p>任何一个只接受一个参数，并且运行时所传入的参数类型具有@Classified 注解的连接点(在Spring AOP中只是方法执行)<br><code>@args(com.xyz.security.Classified)</code><br><code>@args</code>在绑定表单中更加常用：- 请参见后面的通知一节中了解如何使得注解对象在通知体内可用。</p>
</li>
<li><p>任何一个在名为’tradeService’的Spring bean之上的连接点 (在Spring AOP中只是方法执行)：<br><code>bean(tradeService)</code><br>任何一个在名字匹配通配符表达式’*Service’的Spring bean之上的连接点 (在Spring AOP中只是方法执行)：<br>bean(*Service)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>aop</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot war包</title>
    <url>/2018/11/21/spring/springBoot-war/</url>
    <content><![CDATA[<p>主要内容</p>
<p>spring boot 构建war包</p>
<p>本文以 <code>spring boot</code> V2.1.0 版本为例说明。</p>
<p><em>更新历史</em><br>无</p>
<hr>
<span id="more"></span>

<p><code>spring boot</code> 默认是 可执行的 JAR 包，如果需要构建 war包， 仅需修改如下2个文件</p>
<ul>
<li><p>POM.xml<br>在原有基础下 增加 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>Application.java<br>继承 <code>SpringBootServletInitializer</code>， 实现方法 <code>configure(SpringApplicationBuilder application)</code><br>类似如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableJpaAuditing</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder application)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>spring boot</tag>
        <tag>war</tag>
      </tags>
  </entry>
  <entry>
    <title>spring CORS</title>
    <url>/2015/08/19/spring/springCors/</url>
    <content><![CDATA[<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>跨域资源共享(CORS): 访问不同域站点上的资源；比如a.com上的某页面可以访问b.com上的资源，c.com上的某页面可以访问a.com上资源。</p>
<p>不转载了，链接： <a href="http://blog.csdn.net/hfahe/article/details/7730944">CORS（跨域资源共享）简介 </a></p>
<h2 id="Spring-framework-对-CORS-的支持"><a href="#Spring-framework-对-CORS-的支持" class="headerlink" title="Spring framework 对 CORS 的支持"></a>Spring framework 对 CORS 的支持</h2><h3 id="controller上对类和方法的配置"><a href="#controller上对类和方法的配置" class="headerlink" title="controller上对类和方法的配置"></a>controller上对类和方法的配置</h3><p>Spring通过<code>@CrossOrigin</code>注解来实现对CORS的功能支持。</p>
<ol>
<li><p>方法级</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/account&quot;)</span><br><span class="line">public class AccountController &#123;</span><br><span class="line"></span><br><span class="line">	@CrossOrigin</span><br><span class="line">	@RequestMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="line">	public Account retrieve(@PathVariable Long id) &#123;</span><br><span class="line">		// ...</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@RequestMapping(method = RequestMethod.DELETE, path = &quot;/&#123;id&#125;&quot;)</span><br><span class="line">	public void remove(@PathVariable Long id) &#123;</span><br><span class="line">		// ...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>类级</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@CrossOrigin(origins = &quot;http://domain2.com&quot;, maxAge = 3600)</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/account&quot;)</span><br><span class="line">public class AccountController &#123;</span><br><span class="line"></span><br><span class="line">	@RequestMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="line">	public Account retrieve(@PathVariable Long id) &#123;</span><br><span class="line">		// ...</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@RequestMapping(method = RequestMethod.DELETE, path = &quot;/&#123;id&#125;&quot;)</span><br><span class="line">	public void remove(@PathVariable Long id) &#123;</span><br><span class="line">		// ...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>混合<br>Spring结合类和方法的注解内容生成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@CrossOrigin(maxAge = 3600)</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/account&quot;)</span><br><span class="line">public class AccountController &#123;</span><br><span class="line"></span><br><span class="line">	@CrossOrigin(&quot;http://domain2.com&quot;)</span><br><span class="line">	@RequestMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="line">	public Account retrieve(@PathVariable Long id) &#123;</span><br><span class="line">		// ...</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@RequestMapping(method = RequestMethod.DELETE, path = &quot;/&#123;id&#125;&quot;)</span><br><span class="line">	public void remove(@PathVariable Long id) &#123;</span><br><span class="line">		// ...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>默认是GET，HEAD和POST有效</p>
<ul>
<li>java 配置</li>
</ul>
<ol>
<li><p><code> /**</code>路径， 全部默认属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebMvc</span><br><span class="line">public class WebConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">		registry.addMapping(&quot;/**&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义路径和属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">		registry.addMapping(<span class="string">&quot;/api/**&quot;</span>)</span><br><span class="line">			.allowedOrigins(<span class="string">&quot;http://domain2.com&quot;</span>)</span><br><span class="line">			.allowedMethods(<span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>)</span><br><span class="line">			.allowedHeaders(<span class="string">&quot;header1&quot;</span>, <span class="string">&quot;header2&quot;</span>, <span class="string">&quot;header3&quot;</span>)</span><br><span class="line">			.exposedHeaders(<span class="string">&quot;header1&quot;</span>, <span class="string">&quot;header2&quot;</span>)</span><br><span class="line">			.allowCredentials(<span class="literal">false</span>).maxAge(<span class="number">3600</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>XML 配置</li>
</ul>
<ol>
<li><p><code> /**</code>路径， 全部默认属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mvc:cors&gt;</span><br><span class="line">	&lt;mvc:mapping path=&quot;/**&quot; /&gt;</span><br><span class="line">&lt;/mvc:cors&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mvc:cors&gt;</span><br><span class="line"></span><br><span class="line">	&lt;mvc:mapping path=&quot;/api/**&quot;</span><br><span class="line">		allowed-origins=&quot;http://domain1.com, http://domain2.com&quot;</span><br><span class="line">		allowed-methods=&quot;GET, PUT&quot;</span><br><span class="line">		allowed-headers=&quot;header1, header2, header3&quot;</span><br><span class="line">		exposed-headers=&quot;header1, header2&quot; allow-credentials=&quot;false&quot;</span><br><span class="line">		max-age=&quot;123&quot; /&gt;</span><br><span class="line"></span><br><span class="line">	&lt;mvc:mapping path=&quot;/resources/**&quot;</span><br><span class="line">		allowed-origins=&quot;http://domain1.com&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mvc:cors&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring JMS (一)</title>
    <url>/2015/08/26/spring/springJms-1/</url>
    <content><![CDATA[<h2 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h2><p>JMS（Java Messaging Service）是Java平台上有关面向消息中间件(MOM)的技术规范.</p>
<ul>
<li>组成<br>JMS提供者<br>连接面向消息中间件的，JMS接口的一个实现。提供者可以是Java平台的JMS实现，也可以是非Java平台的面向消息中间件的适配器。</li>
</ul>
<p>JMS客户<br>生产或消费基于消息的Java的应用程序或对象。</p>
<p>JMS生产者（Message Producer）<br>创建并发送消息的JMS客户。</p>
<p>JMS消费者（Message Consumer）<br>接收消息的JMS客户。</p>
<p>JMS消息<br>包括可以在JMS客户之间传递的数据的对象</p>
<p>JMS队列<br>一个容纳那些被发送的等待阅读的消息的区域。与队列名字所暗示的意思不同，消息的接受顺序并不一定要与消息的发送顺序相同。一旦一个消息被阅读，该消息将被从队列中移走。</p>
<p>JMS主题<br>一种支持发送消息给多个订阅者的机制。</p>
<ul>
<li>对象模型<br>连接工厂。连接工厂（ConnectionFactory）是由管理员创建，并绑定到JNDI树中。客户端使用JNDI查找连接工厂，然后利用连接工厂创建一个JMS连接。</li>
</ul>
<p>JMS连接。JMS连接（Connection）表示JMS客户端和服务器端之间的一个活动的连接，是由客户端通过调用连接工厂的方法建立的。</p>
<p>JMS会话。JMS会话（Session）表示JMS客户与JMS服务器之间的会话状态。JMS会话建立在JMS连接上，表示客户与服务器之间的一个会话线程。</p>
<p>JMS目的。JMS目的（ Destination ），又称为消息队列，是实际的消息源。可以是 queue 或 topic 。</p>
<p>JMS生产者和消费者。生产者（Message Producer）和消费者（Message Consumer）对象由Session对象创建，用于发送和接收消息。</p>
<ul>
<li>消息模型<br>点对点（Point-to-Point）。在点对点的消息系统中，消息分发给一个单独的使用者。点对点消息往往与队列（javax.jms.Queue）相关联。<br>发布&#x2F;订阅（Publish&#x2F;Subscribe）。发布&#x2F;订阅消息系统支持一个事件驱动模型，消息生产者和消费者都参与消息的传递。生产者发布事件，而使用者订阅感兴趣的事件，并使用事件。该类型消息一般与特定的主题（javax.jms.Topic）关联。</li>
</ul>
<h2 id="Spring-JMS"><a href="#Spring-JMS" class="headerlink" title="Spring JMS"></a>Spring JMS</h2><p>Spring 提供类似JDBC的 JMS集成框架来简单得使用 JMS API。</p>
<h3 id="JmsTemplate"><a href="#JmsTemplate" class="headerlink" title="JmsTemplate"></a>JmsTemplate</h3><p><code>JmsTemplate</code> 是 JMS 核心包的中心类。它简化了JMS的使用，因为它处理了发送或<strong>同步接收消息</strong>时资源的创建和释放。</p>
<h3 id="Connections"><a href="#Connections" class="headerlink" title="Connections"></a>Connections</h3><p>JmsTemplate的需要一个ConnectionFactory的引用。ConnectionFactory是JMS规范的一部分，并作为JMS切入点。</p>
<ul>
<li><p>SingleConnectionFactory<br>SingleConnectionFactory会在所有 createConnection() 调用时返回相同的 Connection 。</p>
</li>
<li><p>CachingConnectionFactory<br>CachingConnectionFactory继承SingleConnectionFactory，并增加了会话，MessageProducer，和MessageConsumers的缓存</p>
</li>
</ul>
<h3 id="Destination-Management"><a href="#Destination-Management" class="headerlink" title="Destination Management"></a>Destination Management</h3><h3 id="Message-Listener-Containers"><a href="#Message-Listener-Containers" class="headerlink" title="Message Listener Containers"></a>Message Listener Containers</h3><p>用来从JMS消息队列接收消息并驱动已经注入的 <code>MessageListener</code>，负责所有线程消息的接收和分发到监听器的进程，是MDP和消息提供者之间的中介，并注册接收的消息，参与事务，资源获取和释放，异常转换等等。使程序开发人员可以编写和接收消息相关的（可能比较复杂）业务逻辑。<br>有以下两种监听器</p>
<ul>
<li><p>SimpleMessageListenerContainer<br>简单，但不兼容JavaEE的JMS规范</p>
</li>
<li><p>DefaultMessageListenerContainer<br>最常用的。XA transaction（JtaTransactionManager）， 可以自定义缓存，可以回复（默认是每5秒，可以自己实现<code>BackOff</code>来制定更细的粒度，参考<code>ExponentialBackOff</code>）</p>
</li>
</ul>
<h3 id="Transaction-management"><a href="#Transaction-management" class="headerlink" title="Transaction management"></a>Transaction management</h3><p>Spring提供了JmsTransactionManager来为单独的ConnectionFactory管理事务。<br>JmsTransactionManager 来管理本地事务和资源。</p>
<p>JtaTransactionManager 来处理分布式事务。</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>JMS</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring JMS （二）</title>
    <url>/2015/09/06/spring/springJms-2/</url>
    <content><![CDATA[<h2 id="发送-JMS-消息"><a href="#发送-JMS-消息" class="headerlink" title="发送 JMS 消息"></a>发送 JMS 消息</h2><h3 id="简单的使用默认destination"><a href="#简单的使用默认destination" class="headerlink" title="简单的使用默认destination"></a>简单的使用默认destination</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import javax.jms.ConnectionFactory;</span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.Message;</span><br><span class="line">import javax.jms.Queue;</span><br><span class="line">import javax.jms.Session;</span><br><span class="line"></span><br><span class="line">import org.springframework.jms.core.MessageCreator;</span><br><span class="line">import org.springframework.jms.core.JmsTemplate;</span><br><span class="line"></span><br><span class="line">public class JmsQueueSender &#123;</span><br><span class="line"></span><br><span class="line">    private JmsTemplate jmsTemplate;</span><br><span class="line">    private Queue queue;</span><br><span class="line"></span><br><span class="line">    public void setConnectionFactory(ConnectionFactory cf) &#123;</span><br><span class="line">        this.jmsTemplate = new JmsTemplate(cf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setQueue(Queue queue) &#123;</span><br><span class="line">        this.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void simpleSend() &#123;</span><br><span class="line">        this.jmsTemplate.send(this.queue, new MessageCreator() &#123;</span><br><span class="line">            public Message createMessage(Session session) throws JMSException &#123;</span><br><span class="line">                return session.createTextMessage(&quot;hello queue world&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Message-Converters"><a href="#Message-Converters" class="headerlink" title="Message Converters"></a>Message Converters</h3><p> Message Converters 提供Java 对象 message‘s 数据间的转换。Spring的默认实现 SimpleMessageConverter 可以支持String 和 TextMessage, byte[] 和 BytesMesssage,  java.util.Map 和 MapMessage 之间的转换。<br>下面是个Map的发送：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void sendWithConversion() &#123;</span><br><span class="line">    Map map = new HashMap();</span><br><span class="line">    map.put(&quot;Name&quot;, &quot;Mark&quot;);</span><br><span class="line">    map.put(&quot;Age&quot;, new Integer(47));</span><br><span class="line">    jmsTemplate.convertAndSend(&quot;testQueue&quot;, map, new MessagePostProcessor() &#123;</span><br><span class="line">        public Message postProcessMessage(Message message) throws JMSException &#123;</span><br><span class="line">            message.setIntProperty(&quot;AccountID&quot;, 1234);</span><br><span class="line">            message.setJMSCorrelationID(&quot;123-00001&quot;);</span><br><span class="line">            return message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//This results in a message of the form:</span><br><span class="line">//MapMessage=&#123;</span><br><span class="line">//	Header=&#123;</span><br><span class="line">//		... standard headers ...</span><br><span class="line">//		CorrelationID=&#123;123-00001&#125;</span><br><span class="line">//	&#125;</span><br><span class="line">//	Properties=&#123;</span><br><span class="line">//		AccountID=&#123;Integer:1234&#125;</span><br><span class="line">//	&#125;</span><br><span class="line">//	Fields=&#123;</span><br><span class="line">//		Name=&#123;String:Mark&#125;</span><br><span class="line">//		Age=&#123;Integer:47&#125;</span><br><span class="line">//	&#125;</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure>
<p>SessionCallback 回调和 ProducerCallback 回调</p>
<h2 id="接收-JMS-消息"><a href="#接收-JMS-消息" class="headerlink" title="接收 JMS 消息"></a>接收 JMS 消息</h2><h3 id="同步接收-Synchronous"><a href="#同步接收-Synchronous" class="headerlink" title="同步接收 Synchronous"></a>同步接收 Synchronous</h3><p>同步接收 JMS 消息会堵塞， 可设置 <code>receiveTimeout</code> 。</p>
<h3 id="异步接收-Asynchronous-Message-Driven-POJOs"><a href="#异步接收-Asynchronous-Message-Driven-POJOs" class="headerlink" title="异步接收 Asynchronous - Message-Driven POJOs"></a>异步接收 Asynchronous - Message-Driven POJOs</h3><p>类似于 EJB 里的  Message-Driven Bean (MDB) ，Spring 定义了 Message-Driven POJO (MDP) 来作为 JMS 的接收者。<br>一个 Message-Driven POJO (MDP) 必须实现 <code>javax.jms.MessageListener</code> （或者 MessageListenerAdapter， SessionAwareMessageListener），而且必须是线程安全，它会被多线程调用。<br> MDP的一个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.Message;</span><br><span class="line">import javax.jms.MessageListener;</span><br><span class="line">import javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line">public class ExampleListener implements MessageListener &#123;</span><br><span class="line"></span><br><span class="line">    public void onMessage(Message message) &#123;</span><br><span class="line">        if (message instanceof TextMessage) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                System.out.println(((TextMessage) message).getText());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (JMSException ex) &#123;</span><br><span class="line">                throw new RuntimeException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;Message must be of type TextMessage&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- this is the Message Driven POJO (MDP) --&gt;</span><br><span class="line">&lt;bean id=&quot;messageListener&quot; class=&quot;jmsexample.ExampleListener&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- and this is the message listener container --&gt;</span><br><span class="line">&lt;bean id=&quot;jmsContainer&quot; class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;destination&quot; ref=&quot;destination&quot;/&gt;</span><br><span class="line">    ---&lt;property name=&quot;messageListener&quot; ref=&quot;messageListener&quot; /&gt;---</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<h3 id="事务-transaction"><a href="#事务-transaction" class="headerlink" title="事务 transaction"></a>事务 transaction</h3><p>本地事务只需要简单配置 <code>sessionTransacted</code> 就可以激活。发送响应是该本地事务的一部分，但其他所有资源（如数据库操作）的操作都是独立的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;jmsContainer&quot; class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;destination&quot; ref=&quot;destination&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;messageListener&quot; ref=&quot;messageListener&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;sessionTransacted&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>分布式事务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.transaction.jta.JtaTransactionManager&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;jmsContainer&quot; class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;destination&quot; ref=&quot;destination&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;messageListener&quot; ref=&quot;messageListener&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="注解驱动的监听端点"><a href="#注解驱动的监听端点" class="headerlink" title="注解驱动的监听端点"></a>注解驱动的监听端点</h2><p>@JmsListener</p>
<h3 id="开启监听端点-注解"><a href="#开启监听端点-注解" class="headerlink" title="开启监听端点 注解"></a>开启监听端点 注解</h3><p>在<code>@Configuration</code>类中加入<code>@EnableJms</code>来使<code>@JmsListener</code>生效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableJms</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultJmsListenerContainerFactory jmsListenerContainerFactory() &#123;   //default name</span><br><span class="line">        DefaultJmsListenerContainerFactory factory =</span><br><span class="line">                new DefaultJmsListenerContainerFactory();</span><br><span class="line">        factory.setConnectionFactory(connectionFactory());</span><br><span class="line">        factory.setDestinationResolver(destinationResolver());</span><br><span class="line">        factory.setConcurrency(&quot;3-10&quot;); //pool size 3～10 threads</span><br><span class="line">        return factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注册监听端点"><a href="#注册监听端点" class="headerlink" title="注册监听端点"></a>注册监听端点</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableJms</span><br><span class="line">public class AppConfig implements JmsListenerConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureJmsListeners(JmsListenerEndpointRegistrar registrar) &#123;</span><br><span class="line">        SimpleJmsListenerEndpoint endpoint = new SimpleJmsListenerEndpoint();</span><br><span class="line">        endpoint.setId(&quot;myJmsEndpoint&quot;);</span><br><span class="line">        endpoint.setDestination(&quot;anotherQueue&quot;);</span><br><span class="line">        endpoint.setMessageListener(message -&gt; &#123;</span><br><span class="line">            // processing</span><br><span class="line">        &#125;);</span><br><span class="line">        registrar.registerEndpoint(endpoint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="端点方法-签名"><a href="#端点方法-签名" class="headerlink" title="端点方法 签名"></a>端点方法 签名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MyService &#123;</span><br><span class="line"></span><br><span class="line">    @JmsListener(destination = &quot;myDestination&quot;)</span><br><span class="line">    public void processOrder(Order order, @Header(&quot;order_type&quot;) String orderType) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="响应管理"><a href="#响应管理" class="headerlink" title="响应管理"></a>响应管理</h3><p><code>@SendTo</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@JmsListener(destination = &quot;myDestination&quot;)</span><br><span class="line">@SendTo(&quot;status&quot;)</span><br><span class="line">public OrderStatus processOrder(Order order) &#123;</span><br><span class="line">    // order processing</span><br><span class="line">    return status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//or</span><br><span class="line"></span><br><span class="line">@JmsListener(destination = &quot;myDestination&quot;)</span><br><span class="line">@SendTo(&quot;status&quot;)</span><br><span class="line">public Message&lt;OrderStatus&gt; processOrder(Order order) &#123;</span><br><span class="line">    // order processing</span><br><span class="line">    return MessageBuilder</span><br><span class="line">            .withPayload(status)</span><br><span class="line">            .setHeader(&quot;code&quot;, 1234)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>运行时响应destination</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@JmsListener(destination = &quot;myDestination&quot;)</span><br><span class="line">public JmsResponse&lt;Message&lt;OrderStatus&gt;&gt; processOrder(Order order) &#123;</span><br><span class="line">    // order processing</span><br><span class="line">    Message&lt;OrderStatus&gt; response = MessageBuilder</span><br><span class="line">            .withPayload(status)</span><br><span class="line">            .setHeader(&quot;code&quot;, 1234)</span><br><span class="line">            .build();</span><br><span class="line">    return JmsResponse.forQueue(response, &quot;status&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="JMS-命名空间"><a href="#JMS-命名空间" class="headerlink" title="JMS 命名空间"></a><a href="http://docs.spring.io/spring/docs/4.2.2.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#jms-namespace">JMS 命名空间</a></h2><h2 id="Spring-集成-ActiveMq"><a href="#Spring-集成-ActiveMq" class="headerlink" title="Spring 集成 ActiveMq"></a><a href="http://giveme5.top/2015/09/25/mq/activemq3/">Spring 集成 ActiveMq</a></h2>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>JMS</tag>
      </tags>
  </entry>
  <entry>
    <title>spring WebService JAX-WS</title>
    <url>/2015/08/25/spring/springWebService/</url>
    <content><![CDATA[<p>spring提供完整的对标准 Java web services 的支持。有2种方式 SpringBeanAutowiringSupport 和 SimpleJaxWsServiceExporter 。</p>
<p>SpringBeanAutowiringSupport没实验成功 ：（ ， 下面只说 SimpleJaxWsServiceExporter 的方式。我是直接混合springMVC使用的。</p>
<ul>
<li><p>EndPoint</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component(&quot;UserService&quot;) // auto scan</span><br><span class="line">@WebService(serviceName=&quot;UserService&quot;)</span><br><span class="line">public class UrUserEndpoint</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    IUrUserService        userService;</span><br><span class="line">    </span><br><span class="line">    @WebMethod</span><br><span class="line">    public UrAbsUserEntity getUser(String username)&#123;</span><br><span class="line">        </span><br><span class="line">      return userService.findByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>xml config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean class=&quot;org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;baseAddress&quot; value=&quot;http://localhost:8081/&quot;/&gt; //注意，如果是直接混合springMVC使用的，不能和servlet容器端口冲突</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>java config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ApplicationConfiguration </span><br><span class="line">&#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public SimpleJaxWsServiceExporter jaxms()</span><br><span class="line">    &#123;</span><br><span class="line">        SimpleJaxWsServiceExporter jaxws = new SimpleJaxWsServiceExporter();</span><br><span class="line">        jaxws.setBaseAddress(&quot;http://localhost:8081/&quot;); //注意，如果是直接混合springMVC使用的，不能和servlet容器端口冲突</span><br><span class="line">        //此处可以有更多设置</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        return jaxws;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>wsdl<br>启动容器，在浏览器中访问 <a href="http://localhost:8081/UserService?wsdl">http://localhost:8081/UserService?wsdl</a> , 就能看到wsdl的内容了</p>
</li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>WebService</tag>
        <tag>JAX-WS</tag>
      </tags>
  </entry>
  <entry>
    <title>spring 流服务</title>
    <url>/2018/07/03/spring/spring_file/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>spring boot (Spring Mvc) 提供文件流服务，最简单方式。</p>
<p><em>更新历史</em><br>无</p>
<p>环境：spring 4.2 以上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;file/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity <span class="title function_">getFile</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">UrlResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        resource = <span class="keyword">new</span> <span class="title class_">UrlResource</span>(Paths.get($&#123;Path of file id&#125;).toUri());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(resource == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.badRequest().body(<span class="string">&quot;无对应资源&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.PARTIAL_CONTENT)  <span class="comment">//断点续传</span></span><br><span class="line">            .contentType(MediaTypeFactory</span><br><span class="line">                    .getMediaType(resource)</span><br><span class="line">                    .orElse(MediaType.APPLICATION_OCTET_STREAM)) <span class="comment">// MediaType</span></span><br><span class="line">            .body(resource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>file</tag>
        <tag>image</tag>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title>spring Transaction 事务</title>
    <url>/2017/11/03/spring/spring_transaction/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>spring Transaction 事务；Transaction 事务绑定事件</p>
<p><em>更新历史</em><br>无</p>
<p>环境：spring 4.2 以上</p>
<p>spring 的 事务分为 <code>编程式事务</code> 和 <code>声明式事务</code> 。<br>对此， spring 官方的建议是： 除非你只有很少数目的事务操作， 你可以选择 <code>编程式事务</code> ；否则都建议用 <code>声明式事务</code></p>
<span id="more"></span>

<hr>
<h2 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h2><p>spring 提供2种方式：</p>
<ul>
<li><code>TransactionTemplate</code></li>
<li>直接使用 <code>PlatformTransactionManager</code></li>
</ul>
<h3 id="TransactionTemplate"><a href="#TransactionTemplate" class="headerlink" title="TransactionTemplate"></a>TransactionTemplate</h3><h3 id="直接-PlatformTransactionManager"><a href="#直接-PlatformTransactionManager" class="headerlink" title="直接 PlatformTransactionManager"></a>直接 PlatformTransactionManager</h3><p>实例化 <code>PlatformTransactionManager</code> 的实现类(比如 <code>DataSourceTransactionManager</code>) 得到 <code>txManager</code> , 需要一个 datasource；<br>然后 <code>DefaultTransactionDefinition</code> 定义事务， <code>TransactionStatus</code> 操作具体SQL。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DefaultTransactionDefinition</span> <span class="variable">def</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultTransactionDefinition</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// explicitly setting the transaction name is something that can only be done programmatically</span></span><br><span class="line">def.setName(<span class="string">&quot;SomeTxName&quot;</span>);</span><br><span class="line">def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class="line"></span><br><span class="line"><span class="type">TransactionStatus</span> <span class="variable">status</span> <span class="operator">=</span> txManager.getTransaction(def);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// execute your business logic here</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (MyException ex) &#123;</span><br><span class="line">        txManager.rollback(status);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">txManager.commit(status);</span><br></pre></td></tr></table></figure>

<h3 id="TransactionTemplate-1"><a href="#TransactionTemplate-1" class="headerlink" title="TransactionTemplate"></a>TransactionTemplate</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleService</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleService</span><span class="params">(PlatformTransactionManager transactionManager)</span> &#123;</span><br><span class="line">        Assert.notNull(transactionManager, <span class="string">&quot;The &#x27;transactionManager&#x27; argument must not be null.&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.transactionTemplate = <span class="keyword">new</span> <span class="title class_">TransactionTemplate</span>(transactionManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the transaction settings can be set here explicitly if so desired</span></span><br><span class="line">        <span class="built_in">this</span>.transactionTemplate.setIsolationLevel(TransactionDefinition.ISOLATION_READ_UNCOMMITTED);</span><br><span class="line">        <span class="built_in">this</span>.transactionTemplate.setTimeout(<span class="number">30</span>); <span class="comment">// 30 seconds</span></span><br><span class="line">        <span class="comment">// and so forth...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//有返回值</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">someServiceMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> transactionTemplate.execute(<span class="keyword">new</span> <span class="title class_">TransactionCallback</span>() &#123;</span><br><span class="line">                <span class="comment">// the code in this method executes in a transactional context</span></span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">doInTransaction</span><span class="params">(TransactionStatus status)</span> &#123;</span><br><span class="line">                        updateOperation1();</span><br><span class="line">                        <span class="keyword">return</span> resultOfUpdateOperation2();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//无返回值</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">someServiceMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        transactionTemplate.execute(<span class="keyword">new</span> <span class="title class_">TransactionCallbackWithoutResult</span>() &#123;</span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span> &#123;</span><br><span class="line">                        updateOperation1();</span><br><span class="line">                        updateOperation2();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p>注解方式的 声明式事务 主要涉及 <code>@Transactional</code> 和 <code>@EnableTransactionManagement</code> (需要配合 <code>@Configuration</code>)。<br>声明式事务 主要通过 事务代理 来实现，如下图：</p>
<p><img src="/images/spring_tx.png"></p>
<blockquote>
<p>Transaction Advisor 可由 Spring 提供默认实现；Custom Advisor(s) 可借 Spring 事务绑定事件<code>@TransactionalEventListener</code> 触发自定义。</p>
</blockquote>
<h3 id="Transactional"><a href="#Transactional" class="headerlink" title="Transactional"></a>Transactional</h3><ul>
<li>属性</li>
</ul>
<style>
table th:first-of-type {
    width: 20%;
}
table th:nth-of-type(2) {
    width: 20%;
}
</style>

<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>String</td>
<td>Optional , 指定transaction manager</td>
</tr>
<tr>
<td>propagation</td>
<td>enum: Propagation</td>
<td>Optional， 指定 传播propagation</td>
</tr>
<tr>
<td>isolation</td>
<td>enum: Isolation</td>
<td>Optional 可选隔离级别</td>
</tr>
<tr>
<td>readOnly</td>
<td>boolean</td>
<td>读&#x2F;写与只读事务</td>
</tr>
<tr>
<td>timeout</td>
<td>int (in seconds granularity)</td>
<td>事务超时</td>
</tr>
<tr>
<td>rollbackFor</td>
<td>Class</td>
<td>触发事务回滚的类, Throwable 或 Throwable的子类，默认是对unchecked异常（ERORR和RuntimeException）起作用</td>
</tr>
<tr>
<td>rollbackFor<br>ClassName</td>
<td>String</td>
<td>设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚</td>
</tr>
<tr>
<td>noRollbackFor</td>
<td>Class</td>
<td>设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚。Throwable 或 Throwable的子类</td>
</tr>
<tr>
<td>noRollbackFor<br>ClassName</td>
<td>String</td>
<td>设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。</td>
</tr>
</tbody></table>
<h4 id="propagation-事务传播"><a href="#propagation-事务传播" class="headerlink" title="propagation 事务传播"></a>propagation 事务传播</h4><ul>
<li><p>PROPAGATION_REQUIRED 默认设置<br>如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。<br>Support a current transaction, create a new one if none exists.<br><img src="/images/spring_tx_prop_required.png"></p>
</li>
<li><p>PROPAGATION_REQUIRES_NEW<br>创建一个新的事务，如果当前存在事务，则把当前事务挂起。<br>Create a new transaction, and suspend the current transaction if one exists.<br><img src="/images/spring_tx_prop_requires_new.png"></p>
</li>
<li><p>PROPAGATION_SUPPORTS<br>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</p>
</li>
<li><p>PROPAGATION_NOT_SUPPORTED<br>以非事务方式运行，如果当前存在事务，则把当前事务挂起。</p>
</li>
<li><p>PROPAGATION_MANDATORY<br>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</p>
</li>
<li><p>PROPAGATION_NEVER<br>以非事务方式运行，如果当前存在事务，则抛出异常</p>
</li>
<li><p>PROPAGATION_NESTED<br>如果当前存在事务，则创建一个事务作为当前事务的嵌套事务（一个事务中可以包括多个保存点，每一个保存点嵌套子事务）来运行； 如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</p>
</li>
</ul>
<h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><ul>
<li><p>ISOLATION_DEFAULT<br>这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是READ_COMMITTED, MySQL是REPEATABLE_READ。</p>
</li>
<li><p>ISOLATION_READ_UNCOMMITTED<br>该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。</p>
</li>
<li><p>ISOLATION_READ_COMMITTED<br>该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</p>
</li>
<li><p>ISOLATION_REPEATABLE_READ<br>该隔离级别表示一个事务在整个过程中可以多次重复执 行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。</p>
</li>
<li><p>ISOLATION_SERIALIZABLE<br>所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</p>
</li>
</ul>
<h3 id="Transactional注意点"><a href="#Transactional注意点" class="headerlink" title="Transactional注意点"></a>Transactional注意点</h3><p>特殊，单独提高等级来写</p>
<h4 id="Transactional特性"><a href="#Transactional特性" class="headerlink" title="Transactional特性"></a>Transactional特性</h4><ul>
<li><p>service实现类标签<br>在service实现类 类头(一般不建议在接口上)上添加@Transactional，可以将整个类纳入spring事务管理，在每个业务方法执行时都会开启一个事务，不过这些事务采用相同的管理方式。</p>
</li>
<li><p>可见度<br>@Transactional 注解只能应用到 public 可见度的方法上。 如果应用在protected、private或者 package可见度的方法上，也不会报错，不过事务设置不会起作用。</p>
</li>
<li><p>回滚<br>默认情况下，spring会对unchecked异常进行事务回滚；如果是checked异常则不回滚。<br>通俗一点：你写代码出现的空指针等异常，会被回滚，文件读写，网络出问题，spring就没法回滚了。</p>
<blockquote>
<p>java里面将派生于Error或者RuntimeException（比如空指针，1&#x2F;0）的异常称为unchecked异常，其他继承自java.lang.Exception得异常统称为Checked Exception，如IOException、TimeoutException </p>
</blockquote>
</li>
<li><p>只读事务<br>只读标志只在事务启动时应用，否则即使配置也会被忽略。<br>启动事务会增加线程开销，数据库因共享读取而锁定(具体跟数据库类型和事务隔离级别有关)。通常情况下，仅是读取数据时，不必设置只读事务而增加额外的系统开销。</p>
</li>
</ul>
<h4 id="解决Transactional不回滚"><a href="#解决Transactional不回滚" class="headerlink" title="解决Transactional不回滚"></a>解决Transactional不回滚</h4><ul>
<li><p>检查方法是否是<code>public</code>的。</p>
</li>
<li><p>异常类型是否是<code>unchecked</code>异常。<br>如果想check异常也想回滚怎么办，注解上面写明异常类型即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor=Exception.class)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>spring</code>是否开启对注解的解析<br><code>@EnableTransactionManagement</code><br>还有例如SpringDataJPA 事务容器声明：<br>transactionManager(JpaTransactionManager) -&gt; entityManagerFactory(EntityManagerFactory) -&gt; dataSource</p>
</li>
<li><p><code>spring</code>是否扫描到包</p>
</li>
<li><p>数据库引擎是否支持事务</p>
</li>
</ul>
<h3 id="事务绑定事件"><a href="#事务绑定事件" class="headerlink" title="事务绑定事件"></a>事务绑定事件</h3><p><code>@TransactionalEventListener</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionEventTestService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TestMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTestModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">TestModel</span> <span class="variable">model</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestModel</span>();</span><br><span class="line">        model.setName(<span class="string">&quot;haogrgr&quot;</span>);</span><br><span class="line">        mapper.insert(model);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果model没有继承ApplicationEvent, 则内部会包装为PayloadApplicationEvent</span></span><br><span class="line">        <span class="comment">//对于@TransactionalEventListener, 会在事务提交后才执行Listener处理逻辑.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//发布事件, 事务提交后, 记录日志, 或发送消息等操作</span></span><br><span class="line">        publisher.publishEvent(model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当事务提交后, 才会真正的执行@TransactionalEventListener配置的Listener, 如果Listener抛异常, 方法返回失败, 但事务不会回滚.</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionEventListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TransactionalEventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(PayloadApplicationEvent&lt;TestModel&gt; event)</span> &#123;</span><br><span class="line">        System.out.println(event.getPayload().getName());</span><br><span class="line">        <span class="comment">//这里可以记录日志, 发送消息等操作.</span></span><br><span class="line">        <span class="comment">//这里抛出异常, 会导致addTestModel方法异常, 但不会回滚事务.</span></span><br><span class="line">        <span class="comment">//注意, ApplicationEventPublisher不能使用线程池, 否则不会执行到这里</span></span><br><span class="line">        <span class="comment">//因为, 包装类是通过ThreadLocal来判断当前是否有活动的事务信息.</span></span><br><span class="line">        <span class="comment">//TransactionalEventListener.fallbackExecution就是为了决定当当前线程没有事务上下文时,</span></span><br><span class="line">        <span class="comment">//是否还调用 handle 方法, 默认不调用.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li><p><code>phase</code><br>BEFORE_COMMIT, AFTER_COMMIT (default), AFTER_ROLLBACK and AFTER_COMPLETION</p>
</li>
<li><p>condition</p>
</li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>transaction</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式批处理框架 - spring boot quartz 集群</title>
    <url>/2020/03/30/spring/springbootquartzs/</url>
    <content><![CDATA[<p>主要内容</p>
<p>分布式批处理框架, 采用 <code>spring boot</code> 2,   <code>quartz</code> 2 集群</p>
<p>本文以 <code>spring boot</code> V2.2.5 版本为例说明。</p>
<p><em>更新历史</em><br>无</p>
<hr>
<span id="more"></span>

<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>POM文件大体如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">    <span class="attr">job-store-type:</span> <span class="string">jdbc</span></span><br><span class="line">    <span class="attr">jdbc:</span></span><br><span class="line">      <span class="attr">initialize-schema:</span> <span class="string">never/embedded/always</span>   <span class="comment"># 第一次必须使用 always, 生成表</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">org:</span></span><br><span class="line">        <span class="attr">quartz:</span></span><br><span class="line">          <span class="attr">jobStore:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line">            <span class="attr">driverDelegateClass:</span> <span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line">            <span class="attr">clusterCheckinInterval:</span> <span class="number">5000</span></span><br><span class="line">            <span class="attr">tablePrefix:</span> <span class="string">QRTZ_</span>  <span class="comment"># 辅助表, 表名开头</span></span><br><span class="line">            <span class="attr">isClustered:</span> <span class="literal">true</span> <span class="comment"># 打开集群模式</span></span><br><span class="line">          <span class="attr">scheduler:</span></span><br><span class="line">            <span class="attr">instanceId:</span> <span class="string">AUTO</span></span><br><span class="line">          <span class="attr">threadPool:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line">            <span class="attr">threadCount:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">threadPriority:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">threadsInheritContextClassLoaderOfInitializingThread:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h2><ul>
<li><p>job</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mandalat.ehealth.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cc.giveme5.common.service.ComSystemParameterService;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Job;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ComSystemParameterService parameterService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext context)</span> &#123;</span><br><span class="line">        parameterService.findAll();</span><br><span class="line"></span><br><span class="line">        System.out.println(port + <span class="string">&quot;--------------------&quot;</span> + LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>job config</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mandalat.ehealth.common.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mandalat.ehealth.job.AJob;</span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">jobADetails</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(AJob.class).withIdentity(<span class="string">&quot;sampleJobA&quot;</span>)</span><br><span class="line">                .storeDurably().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">jobATrigger</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger()</span><br><span class="line"></span><br><span class="line">                .forJob(jobADetails())</span><br><span class="line">                .withIdentity(<span class="string">&quot;sampleTriggerA&quot;</span>)</span><br><span class="line">                .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/2 * * ? * * *&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>分别在 8080 和 8081 上 启动服务；<br>可以看到只有一台服务调用到了 <code>AJob</code> 中的方法；<br>把这台服务关闭, 5秒后可以看到另一台服务调用到了 <code>AJob</code> 中的方法；<br>说明Quartz 的集群分布式部署成功.</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>spring boot</tag>
        <tag>quartzs</tag>
      </tags>
  </entry>
  <entry>
    <title>swagger springfox rest接口文档</title>
    <url>/2018/11/04/spring/springfox-md/</url>
    <content><![CDATA[<p>主要内容</p>
<p><code>swagger</code>(<code>springfox</code>) 可帮助开发人员设计，构建，记录和使用RESTful Web服务, 使后台开发人员与移动端开发人员更好的对接.<br>大多数用户通过Swagger UI工具可很简单识别和使用Swagger。</p>
<p>最大优点： 接口开发人员不用另外写接口文档，代码注释中写上swagger相关的注释就可以自动生成接口文档；<br>最大缺点： 对源代码侵入比较严重。</p>
<p>本文以 <code>springfox-swagger2</code> V2.9.2 版本为例说明。</p>
<p>末了，还有个稍重量级竞品 <a href="https://github.com/thx/rap2-delos">RAP(阿里妈妈出品) </a> ， 感兴趣的可以去玩玩。</p>
<p><em>更新历史</em><br>+2018-11-04: 增加swagger注解具体说明</p>
<span id="more"></span>

<h2 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="swagger2-配置文件"><a href="#swagger2-配置文件" class="headerlink" title="swagger2 配置文件"></a>swagger2 配置文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@ConditionalOnExpression(&quot;$&#123;giveme5.swagger.enable:true&#125;&quot;)</span> <span class="comment">//是否启用Swagger的判断</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟接口的认证授权</span></span><br><span class="line"><span class="comment">     * 配合 <span class="doctag">@ApiOperation</span>(authorizations = &#123; <span class="doctag">@Authorization</span>(value=&quot;apiKey&quot;) &#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ApiKey <span class="title function_">apiKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiKey</span>(<span class="string">&quot;apiKey&quot;</span>, <span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .securitySchemes(Arrays.asList(apiKey()))</span><br><span class="line">                .select()</span><br><span class="line">                    .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class="line">                    .paths(PathSelectors.ant(<span class="string">&quot;/app/**&quot;</span>)) <span class="comment">// 只对 url 匹配 /app/** 的生效</span></span><br><span class="line">                    .build()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;springfox 大标题&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;http://giveme5.cc/&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;springmvc swagger2&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;sam&quot;</span>, <span class="string">&quot;http://giveme5.cc/&quot;</span>, <span class="string">&quot;xxxxxxxxxxxx@163.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-配置"><a href="#Spring-配置" class="headerlink" title="Spring 配置"></a>Spring 配置</h2><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><p>Springboot 可以直接使用</p>
<h3 id="SpringMvc-配置"><a href="#SpringMvc-配置" class="headerlink" title="SpringMvc 配置"></a>SpringMvc 配置</h3><ul>
<li><p>java based config</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@EnableSpringDataWebSupport</span></span><br><span class="line"><span class="meta">@Import(</span></span><br><span class="line"><span class="meta">&#123; SwaggerConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Maps resources path to webapp/resources</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span></span><br><span class="line">    &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;swagger-ui.html&quot;</span>).addResourceLocations(</span><br><span class="line">                <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META&quot;</span> +</span><br><span class="line">                <span class="string">&quot;-INF/resources/webjars/&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>xml based config</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;bean class=&quot;com.springfox.config.SwaggerConfig&quot; /&gt; 使用bean申明可以去掉@configuration--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描@configuration注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.springfox.config&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置静态资源访问--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;swagger-ui.html&quot;</span> <span class="attr">location</span>=<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/webjars/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="接口举例"><a href="#接口举例" class="headerlink" title="接口举例"></a>接口举例</h2><ul>
<li><p>controller</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类功能说明：注册用户 controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/app&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &#123;&quot;用户接口&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerAppController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第三方登录 - 刷新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     QQ授权后的access_token 或 微信的 refresh_token 或 微博的 refresh_token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginType 1: QQ； 2: 微信； 3：微博</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 手机号码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> valid 校验码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/s/login/refresh&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;第三方登录 - 刷新&quot;, response = ThirdLoginToken.class,</span></span><br><span class="line"><span class="meta">            notes = &quot;刷新成功后 返回 Map &#123;jwt: jwt token, accessToken, refreshToken&#125; \n 成功后 在http header中添加 域: Authorization=jwt的值 &quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;token&quot;,  required = true, value = &quot;授权后 QQ的 或 微信的 或 微博的 refresh_token&quot;),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;loginType&quot;, allowableValues = &quot;1,2,3&quot;, dataType = &quot;int&quot;, required = true, value = &quot;第三方登陆类型  1: QQ； 2: 微信； 3：微博&quot;),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;phone&quot;, dataType = &quot;int&quot;, value = &quot;初次授权，需要绑定的 手机&quot;),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;valid&quot;, dataType = &quot;int&quot;, value = &quot;初次授权，需要绑定的 手机校验码&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ThirdLoginToken&gt; <span class="title function_">refresh</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam</span> String token,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam</span> <span class="type">int</span> loginType,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> String phone,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> String valid</span></span><br><span class="line"><span class="params">        )</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> thirdLogin(token, loginType, LOGIN_REFRESH.REFRESH.ordinal(), phone, valid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/customer&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;获取用户信息&quot;, authorizations = &#123; @Authorization(value=&quot;apiKey&quot;) &#125;, response = CustomerEntity.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;CustomerEntity&gt; <span class="title function_">getCustomer</span><span class="params">()</span>&#123;</span><br><span class="line">        。。。</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定 qq, 微信，微博等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(value = &quot;/customer/third&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;绑定 qq, 微信，微博等 &quot;, response = ThirdLoginToken.class, authorizations = &#123; @Authorization(value=&quot;apiKey&quot;) &#125;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;token&quot;,  required = true, value = &quot;QQ授权后的access_token 或 微信的 authorization_code 或 微博的 authorization_code&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;loginType&quot;, allowableValues = &quot;1,2,3&quot;, dataType = &quot;int&quot;, required = true, value = &quot;第三方登陆类型  1: QQ； 2: 微信； 3：微博&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity <span class="title function_">updateCustomerThirdLogin</span><span class="params">(<span class="meta">@RequestParam</span> String token, <span class="meta">@RequestParam</span> <span class="type">int</span> loginType)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ThirdLoginToken</span> <span class="variable">loginToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThirdLoginToken</span>();</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(loginToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>entity</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第三方登陆返回 VO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiModel</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ThirdLoginToken</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;jwt token, 获取后 在http header中添加 域: Authorization=jwt的值&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String jwt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;第三方授权的 access token&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String accessToken;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;第三方授权的 refresh token&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String refreshToken;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;第三方授权的 openId&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String openId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThirdLoginToken</span><span class="params">(String jwt, String accessToken, String refreshToken, String openId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jwt = jwt;</span><br><span class="line">        <span class="built_in">this</span>.accessToken = accessToken;</span><br><span class="line">        <span class="built_in">this</span>.refreshToken = refreshToken;</span><br><span class="line">        <span class="built_in">this</span>.openId = openId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>@Api:标志这个类为Swagger资源，根据config， 没标注的不会生成 swagger 的接口文档</p>
</li>
<li><p>@ApiImplicitParams，@ApiImplicitParam: 对参数进行说明, 其中dataType一定为小写； allowableValues 可限制 合法值得列表； required 指定该参数是否必须</p>
</li>
<li><p>@ApiOperation:描述了一种操作或通常针对特定的路径的HTTP方法。 response 指定返回值类型；authorizations 指定改接口的认证条件， apiKey 需要和 config的一致；</p>
</li>
<li><p>@ApiModel: 描述一个实体</p>
</li>
<li><p>@ApiModelProperty：描述一个字段</p>
</li>
</ul>
<blockquote>
<p><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X">更多注解 官方说明</a></p>
</blockquote>
<h3 id="泛型返回值-response"><a href="#泛型返回值-response" class="headerlink" title="泛型返回值 response"></a>泛型返回值 response</h3><p><code>ComResultVo&lt;UserEntity&gt;</code> 这种带泛型的返回值，想要正常完全显示，需要注意如下：</p>
<ul>
<li><code>ComResultVo</code> 内需要正确的 <code>get/set</code> 方法</li>
<li>controller 返回值 <code>ComResultVo&lt;UserEntity&gt;</code> 一定要 标明泛型的具体值 <code>UserEntity</code></li>
</ul>
<p>达到如下效果<br><img src="/images/swagger_model.png"><br><img src="/images/swagger_model2.png"></p>
<h3 id="接口认证"><a href="#接口认证" class="headerlink" title="接口认证"></a>接口认证</h3><p><code>Authorize</code> 按钮， 填入合法的认证值，模拟授权。</p>
<h2 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h2><p>打开 <a href="http://localhost:8080/swagger-ui.html#">http://localhost:8080/project_name&#x2F;swagger-ui.html</a> ,project_name表示你启动项目的名称,如果你以根目录启动则没有project_name,当你看到如下界面就表示配置成功了<br><img src="/images/swagger.png"></p>
<p>点开具体接口， 有惊喜 哈哈。<br><code>Try it out！</code> 可以实时测试接口</p>
<blockquote>
<p><a href="https://springfox.github.io/springfox/docs/snapshot/#getting-started">完整官方文档</a></p>
</blockquote>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>springfox</tag>
        <tag>swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>spring shardingSphere 多数据源</title>
    <url>/2022/03/21/spring/srpingShardingSphere/</url>
    <content><![CDATA[<p>主要内容</p>
<p>Apache ShardingSphere<br>Apache ShardingSphere 是一套开源的分布式数据库解决方案组成的生态圈。Spring集成Apache ShardingSphere 是一套目前比较好的分库分表的方案。<br>Apache ShardingSphere JDBC 目前只支持同构数据库，本文通用自定义数据源实现异构数据库（spring boot + jpa + oracle + mysql）的分库分表。</p>
<p>版本：<br><code>spring boot</code> V2.6.1<br><code>Apache ShardingSphere</code> V5.1.0</p>
<p><em>更新历史</em><br>无</p>
<hr>
<span id="more"></span>

<p>Apache ShardingSphere JDBC 目前只支持同构数据库, 可通用自定义数据源实现异构数据库（oracle + mysql）的分库分表。<br>以 oracle 数据库 作为 ShardingSphere JDBC 支持的主数据库。</p>
<p>主要步骤：</p>
<ul>
<li><code>DataSource</code> (javax.sql.DataSource)</li>
<li><code>EntityManagerFactory</code> (javax.persistence.EntityManagerFactory)</li>
<li><code>EntityManager</code> ( javax.persistence.EntityManager)</li>
<li><code>TransactionManager</code> (org.springframework.transaction.TransactionManager)</li>
<li><code>JdbcTemplate</code> (org.springframework.jdbc.core.JdbcTemplate)</li>
</ul>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc-core-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude = JtaAutoConfiguration.class)</span> <span class="comment">//使用ShardingSphere的分布式管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(XgfyBridgeApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h3><p>Apache ShardingSphere 的数据源作为主DataSource</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;shardingSphereDataSource&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DataSource shardingSphereDataSource;  <span class="comment">// 使用ShardingSphere 自动装载的 DataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;primaryDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;primaryDataSource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">primaryDatasource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> shardingSphereDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多数据源配置"><a href="#多数据源配置" class="headerlink" title="多数据源配置"></a>多数据源配置</h3><ul>
<li><p>优先数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(</span></span><br><span class="line"><span class="meta">        entityManagerFactoryRef = &quot;entityManagerFactoryPrimary&quot;,</span></span><br><span class="line"><span class="meta">        transactionManagerRef = &quot;transactionManagerPrimary&quot;,</span></span><br><span class="line"><span class="meta">        basePackages = &#123;&quot;xxx.xxxx&quot;&#125;)</span> <span class="comment">//设置Repository所在位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimaryConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JpaProperties jpaProperties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;primaryDataSource&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DataSource primaryDataSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2) EntityManagerFactory</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;entityManagerFactoryPrimary&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> EntityManagerFactory <span class="title function_">entityManagerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HibernateJpaVendorAdapter</span> <span class="variable">vendorAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HibernateJpaVendorAdapter</span>();</span><br><span class="line">        vendorAdapter.setDatabase(Database.ORACLE);</span><br><span class="line">        vendorAdapter.setGenerateDdl(<span class="literal">false</span>);</span><br><span class="line">        vendorAdapter.setShowSql(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">LocalContainerEntityManagerFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalContainerEntityManagerFactoryBean</span>();</span><br><span class="line">        factory.setJpaVendorAdapter(vendorAdapter);</span><br><span class="line">        factory.setPersistenceUnitName(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">        factory.setPackagesToScan(<span class="string">&quot;xxxxxxxxx.entity&quot;</span>);</span><br><span class="line">        factory.setDataSource(primaryDataSource);</span><br><span class="line">        factory.setJpaPropertyMap(jpaProperties.getProperties());</span><br><span class="line">        factory.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> factory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3） EntityManager</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;entityManagerPrimary&quot;)</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="keyword">public</span> EntityManager <span class="title function_">entityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;entityManagerFactoryPrimary&quot;)</span> EntityManagerFactory entityManagerFactory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SharedEntityManagerCreator.createSharedEntityManager(entityManagerFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4） TransactionManager</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;transactionManagerPrimary&quot;)</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(<span class="meta">@Qualifier(&quot;entityManagerFactoryPrimary&quot;)</span> EntityManagerFactory entityManagerFactory)</span>&#123;</span><br><span class="line">        <span class="type">JpaTransactionManager</span> <span class="variable">txManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JpaTransactionManager</span>();</span><br><span class="line">        txManager.setEntityManagerFactory(entityManagerFactory);</span><br><span class="line">        <span class="keyword">return</span> txManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 5） JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;jdbcTemplateSharding&quot;)</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplateSharding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(primaryDataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>其他数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(</span></span><br><span class="line"><span class="meta">        entityManagerFactoryRef = &quot;entityManagerFactoryYixing&quot;,</span></span><br><span class="line"><span class="meta">        transactionManagerRef = &quot;transactionManagerYixing&quot;,</span></span><br><span class="line"><span class="meta">        basePackages = &#123;&quot;xx.xxxx&quot;&#125;)</span> <span class="comment">//设置Repository所在位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JpaProperties jpaProperties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;yixingDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.yixing&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">yixingDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;entityManagerYixing&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> EntityManager <span class="title function_">entityManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> entityManagerFactoryyixing().createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;entityManagerFactoryYixing&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> EntityManagerFactory <span class="title function_">entityManagerFactoryyixing</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HibernateJpaVendorAdapter</span> <span class="variable">vendorAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HibernateJpaVendorAdapter</span>();</span><br><span class="line">        vendorAdapter.setDatabase(Database.MYSQL);</span><br><span class="line">        vendorAdapter.setGenerateDdl(<span class="literal">false</span>);</span><br><span class="line">        vendorAdapter.setShowSql(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">LocalContainerEntityManagerFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalContainerEntityManagerFactoryBean</span>();</span><br><span class="line">        factory.setJpaVendorAdapter(vendorAdapter);</span><br><span class="line">        factory.setPersistenceUnitName(<span class="string">&quot;yixing&quot;</span>);</span><br><span class="line">        factory.setPackagesToScan(<span class="string">&quot;xxxx.entity&quot;</span>);</span><br><span class="line">        factory.setDataSource(yixingDataSource());</span><br><span class="line">        factory.setJpaPropertyMap(jpaProperties.getProperties());</span><br><span class="line">        factory.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> factory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;transactionManageryixing&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManageryixing</span><span class="params">(<span class="meta">@Qualifier(&quot;entityManagerFactoryYixing&quot;)</span> EntityManagerFactory entityManagerFactory)</span>&#123;</span><br><span class="line">        <span class="type">JpaTransactionManager</span> <span class="variable">txManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JpaTransactionManager</span>();</span><br><span class="line">        txManager.setEntityManagerFactory(entityManagerFactory);</span><br><span class="line">        <span class="keyword">return</span> txManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;jdbcTemplateYixing&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplateYixing</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(yixingDataSource());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="yml文件"><a href="#yml文件" class="headerlink" title="yml文件"></a>yml文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  thymeleaf:</span><br><span class="line">    cache: false</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: none</span><br><span class="line">      database-platform: org.hibernate.dialect.Oracle12cDialect</span><br><span class="line">    open-in-view: false</span><br><span class="line">    show-sql: true</span><br><span class="line"></span><br><span class="line">  datasource:</span><br><span class="line">    yixing:</span><br><span class="line">      database-platform: org.hibernate.dialect.MySQL8Dialect</span><br><span class="line">      type: com.zaxxer.hikari.HikariDataSource</span><br><span class="line">      jdbc-url: jdbc:mysql://192.168.1.x:3306/qz?serverTimezone=UTC&amp;useSSL=false</span><br><span class="line">      driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">      username: &quot;xxx&quot;</span><br><span class="line">      password: &quot;xxx&quot;</span><br><span class="line">      hikari:</span><br><span class="line">        maximumPoolSize: 50</span><br><span class="line">        poolName: yixing_HikariPool</span><br><span class="line"></span><br><span class="line">  shardingsphere:</span><br><span class="line">    enabled: true</span><br><span class="line">    datasource:</span><br><span class="line">      names: ds-master, ds-dr</span><br><span class="line">      ds-master:</span><br><span class="line">        type: com.zaxxer.hikari.HikariDataSource</span><br><span class="line">        jdbc-url: jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.x)(PORT = 1521) )  (CONNECT_DATA =(SERVICE_NAME = orcl)) )</span><br><span class="line">        driver-class-name: oracle.jdbc.OracleDriver</span><br><span class="line">        username: xxx</span><br><span class="line">        password: xxx</span><br><span class="line">        hikari:</span><br><span class="line">          maximumPoolSize: 50</span><br><span class="line">          poolName: master_HikariPool</span><br><span class="line">      ds-dr:</span><br><span class="line">        type: com.zaxxer.hikari.HikariDataSource</span><br><span class="line">        jdbc-url: jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.x)(PORT = 1521) )  (CONNECT_DATA =(SERVICE_NAME = ORCL)) )</span><br><span class="line">        driver-class-name: oracle.jdbc.OracleDriver</span><br><span class="line">        username: &quot;xxx&quot;</span><br><span class="line">        password: &quot;xxx&quot;</span><br><span class="line">        hikari:</span><br><span class="line">          maximumPoolSize: 50</span><br><span class="line">          poolName: dr_HikariPool</span><br><span class="line">    rules:</span><br><span class="line">      sharding:</span><br><span class="line">        # tables -----------------------------------------------------</span><br><span class="line">        tables:</span><br><span class="line">          t_acid_result_dr:</span><br><span class="line">            actual-data-nodes: ds-master.t_acid_result_dr_$-&gt;&#123;0..31&#125;</span><br><span class="line">            table-strategy:</span><br><span class="line">              standard:</span><br><span class="line">                sharding-column: id_card_hash</span><br><span class="line">                sharding-algorithm-name: acid-inline</span><br><span class="line">            key-generate-strategy:</span><br><span class="line">              column: id</span><br><span class="line">              key-generator-name: mysnowflake</span><br><span class="line">          t_acid_result_yx:</span><br><span class="line">            actual-data-nodes: ds-master.t_acid_result_yx_$-&gt;&#123;0..31&#125;</span><br><span class="line">            table-strategy:</span><br><span class="line">              standard:</span><br><span class="line">                sharding-column: id_card_hash</span><br><span class="line">                sharding-algorithm-name: acid-yx-inline</span><br><span class="line">            key-generate-strategy:</span><br><span class="line">              column: id</span><br><span class="line">              key-generator-name: yxsnowflake</span><br><span class="line">          t_machan_check_dr:</span><br><span class="line">            actual-data-nodes: ds-master.t_machan_check_dr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # key-generators ------------------------</span><br><span class="line">        key-generators:</span><br><span class="line">          mysnowflake:</span><br><span class="line">            type: SNOWFLAKE</span><br><span class="line">            props:</span><br><span class="line">              worker-id: 11</span><br><span class="line">          yxsnowflake:</span><br><span class="line">            type: SNOWFLAKE</span><br><span class="line">            props:</span><br><span class="line">              worker-id: 12</span><br><span class="line">        # sharding-algorithms ------------------------------------------------</span><br><span class="line">        sharding-algorithms:</span><br><span class="line">          acid-inline:</span><br><span class="line">            type: INLINE</span><br><span class="line">            props:</span><br><span class="line">              algorithm-expression: t_acid_result_dr_$-&gt;&#123;id_card_hash % 32&#125;</span><br><span class="line">          acid-yx-inline:</span><br><span class="line">            type: INLINE</span><br><span class="line">            props:</span><br><span class="line">              algorithm-expression: t_acid_result_yx_$-&gt;&#123;id_card_hash % 32&#125;</span><br></pre></td></tr></table></figure>


<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p>主数据源<br>和普通jpa 一样， 无区别</p>
</li>
<li><p>其他数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class, transactionManager = &quot;transactionManageryixing&quot;)</span>  <span class="comment">//特别指定 transactionManager</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YxUploadService</span> &#123;</span><br><span class="line">xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>多数据源</tag>
        <tag>spring</tag>
        <tag>spring boot</tag>
        <tag>jpa</tag>
        <tag>Apache ShardingSphere</tag>
      </tags>
  </entry>
  <entry>
    <title>spring Validator</title>
    <url>/2021/11/24/spring/srpingValidator/</url>
    <content><![CDATA[<p>主要内容</p>
<p>JSR-303 Validation<br>JSR-303 是 JAVA EE 中的一项子规范，叫做 Bean Validation，官方参考实现是Hibernate Validator。</p>
<p>本文以 <code>spring boot</code> V2.4.6 版本为例说明如何使用。</p>
<p><em>更新历史</em><br>无</p>
<hr>
<span id="more"></span>

<h2 id="JSR-303-基本的校验规则"><a href="#JSR-303-基本的校验规则" class="headerlink" title="JSR 303 基本的校验规则"></a>JSR 303 基本的校验规则</h2><p>常用的</p>
<ul>
<li><p>空检查<br><code>@Null</code>  验证对象是否为null<br><code>@NotNull</code>  验证对象是否不为null, 无法查检长度为0的字符串<br><code>@NotBlank</code>  检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.<br><code>@NotEmpty</code>  检查约束元素是否为NULL或者是EMPTY.</p>
</li>
<li><p>Booelan检查<br><code>@AssertTrue</code>  验证 Boolean 对象是否为 true<br><code>@AssertFalse</code>  验证 Boolean 对象是否为 false</p>
</li>
<li><p>长度检查<br><code>@Size(min=, max=)</code>  验证对象（Array,Collection,Map,String）长度是否在给定的范围之内<br><code>@Length(min=, max=)</code>  验证约束字符串是否包含在最小和最大之间。</p>
</li>
<li><p>日期检查<br><code>@Past</code>  验证 Date 和 Calendar 对象是否在当前时间之前，验证成立的话被注释的元素一定是一个过去的日期<br><code>@Future</code>  验证 Date 和 Calendar 对象是否在当前时间之后，验证成立的话被注释的元素一定是一个将来的日期<br><code>@Pattern</code>  验证 String 对象是否符合正则表达式的规则，被注释的元素符合制定的正则表达式，regexp:正则表达式 flags: 指定Pattern.Flag 的数组，表示正则表达式的相关选项。</p>
</li>
<li><p>数值检查<br><em><strong>建议使用在Stirng,Integer类型，不建议使用在 int 类型上，因为表单值为 空 时无法转换为 int，</strong></em><br><code>@Min</code>  验证 Number 和 String 对象是否大等于指定的值<br><code>@Max</code>  验证 Number 和 String 对象是否小等于指定的值<br><code>@DecimalMax</code>  被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度（ Double, float, BigDecimal ）<br><code>@DecimalMin</code>  被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度<br><code>@Digits</code>  验证 Number 和 String 的构成是否合法<br><code>@Digits(integer=,fraction=)</code>  验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。<br><code>@Range(min=, max=)</code>  被指定的元素必须在合适的范围内<br><code>@Range(min=10000,max=50000,message=”range.bean.wage”)</code><br><code>@Valid</code>  递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)<br><code>@CreditCardNumber</code>  信用卡验证<br><code>@Email</code>  验证是否是邮件地址，如果为null,不进行验证，算通过验证。<br><code>@ScriptAssert(lang= ,script=, alias=) </code><br><code>@URL(protocol=,host=, port=,regexp=, flags=)  </code></p>
</li>
</ul>
<h2 id="spring-结合"><a href="#spring-结合" class="headerlink" title="spring 结合"></a>spring 结合</h2><h3 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a>自动触发</h3><ul>
<li><p>controller<br>在 controller 中搭配 <code>@Valid</code> <code>BindingResult</code> 使用， 校验entity的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;app&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity <span class="title function_">add</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@ModelAttribute</span> AppEntity entity , BindingResult result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.badRequest().body(result.getAllErrors().stream()</span><br><span class="line">                .map(DefaultMessageSourceResolvable::getDefaultMessage)</span><br><span class="line">                .reduce((m1, m2) -&gt; m1 + <span class="string">&quot;；&quot;</span> + m2)</span><br><span class="line">                .orElse(<span class="string">&quot;参数输入有误！&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Spring data jpa<br>Spring data jpa 在事务提交前也会触发，如果数据没通过校验会出现如下类似的异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.transaction.TransactionSystemException: Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error <span class="keyword">while</span> committing the transaction</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Caused by: javax.validation.ConstraintViolationException: Validation failed <span class="keyword">for</span> classes [xxx.xxx.xxxEntity] during update time <span class="keyword">for</span> groups [javax.validation.groups.Default, ]</span><br><span class="line">List of constraint violations:[</span><br><span class="line">	ConstraintViolationImpl&#123;interpolatedMessage=<span class="string">&#x27;不是金额形式&#x27;</span>, propertyPath=mobile, rootBeanClass=<span class="keyword">class</span> <span class="title class_">xxx</span>.xxx.xxxEntity, messageTemplate=<span class="string">&#x27;不是金额形式&#x27;</span>&#125;</span><br><span class="line">	ConstraintViolationImpl&#123;interpolatedMessage=<span class="string">&#x27;个数必须在0和16之间&#x27;</span>, propertyPath=mobile, rootBeanClass=<span class="keyword">class</span> <span class="title class_">xxx</span>.xxx.xxxEntity, messageTemplate=<span class="string">&#x27;&#123;javax.validation.constraints.Size.message&#125;&#x27;</span>&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这是异常，应该要避免出现。</p>
</li>
</ul>
<h3 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h3><p>Bean Validation 还可自定义规划并且手动触发校验。<br>注意 <code>MoneyValidator</code> 和 <code>Money</code> 相互一致</p>
<ul>
<li><p>自定义Validation注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx.MoneyValidator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy= MoneyValidator.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Money &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span><span class="string">&quot;不是金额形式&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>自定义Validation校验</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx.Money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MoneyValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;Money, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">moneyReg</span> <span class="operator">=</span> <span class="string">&quot;^\\d+(\\.\\d&#123;1,2&#125;)?$&quot;</span>;<span class="comment">//表示金额的正则表达式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Pattern</span> <span class="variable">moneyPattern</span> <span class="operator">=</span> Pattern.compile(moneyReg);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(Money constraintAnnotation)</span> &#123;</span><br><span class="line">        ConstraintValidator.<span class="built_in">super</span>.initialize(constraintAnnotation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> moneyPattern.matcher(value).matches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>手动触发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Validator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.groups.Default;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest(classes = Application.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceTest</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动注入 validator</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">UrUserEntity</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrUserEntity</span>();</span><br><span class="line"></span><br><span class="line">        user.setVersion(<span class="number">0</span>);</span><br><span class="line">        user.setMobile(<span class="string">&quot;123456789012345678s&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 手动触发</span></span><br><span class="line">        Set&lt;ConstraintViolation&lt;UrUserEntity&gt;&gt; violationSet = validator.validate(user, Default.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != violationSet) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">messages</span> <span class="operator">=</span> violationSet.stream()</span><br><span class="line">                    .map(ConstraintViolation::getMessage)</span><br><span class="line">                    .reduce((m1, m2) -&gt; m1 + <span class="string">&quot;；&quot;</span> + m2)</span><br><span class="line">                    .orElse(<span class="string">&quot;参数输入有误！&quot;</span>);</span><br><span class="line">            System.out.println(messages);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrUserEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;mobile&quot;, length = 16, nullable = false)</span></span><br><span class="line">    <span class="meta">@Size(max = 16)</span></span><br><span class="line">    <span class="meta">@Money</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@Money 给 mobile校验仅仅是玩笑</p>
</li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>spring boot</tag>
        <tag>Validator</tag>
      </tags>
  </entry>
  <entry>
    <title>免费https - Let&#39;s Encrypt</title>
    <url>/2020/03/30/web%20server/https/</url>
    <content><![CDATA[<p>主要内容<br>免费的Https.</p>
<p>Let’s Encrypt是一个于2015年三季度推出的数字证书认证机构，旨在以自动化流程消除手动创建和安装证书的复杂流程，并推广使万维网服务器的加密连接无所不在，为安全网站提供免费的SSL&#x2F;TLS证书。</p>
<p>本文以 <code>Cent OS 7</code> 版本为例说明, 使用 <code>certbot</code> 提供Let’s Encrypt服务 。</p>
<p><em>更新历史</em><br>无</p>
<hr>
<span id="more"></span>

<h2 id="安装-x2F-初始化"><a href="#安装-x2F-初始化" class="headerlink" title="安装&#x2F;初始化"></a>安装&#x2F;初始化</h2><p><a href="https://certbot.eff.org/">certbot</a><br>选择对应web 服务和 操作系统</p>
<p>按照说明 一步一步 操作就行.</p>
<strike>
注意 :
在 centos 7 中, 安装 certbot 之前 需要 先安装
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install python-urllib3</span><br><span class="line">yum -y install python-requests</span><br></pre></td></tr></table></figure>
新版 不需要了
</strike>

<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">certbot</span><br></pre></td></tr></table></figure>

<p>可以修改域名证书</p>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>Let&#39;s Encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx + Tomcat + HTTPS</title>
    <url>/2017/02/22/web%20server/nginxTomcatSSL/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>环境</li>
<li>证书</li>
<li>nginx</li>
<li>tomcat</li>
</ul>
<p>……</p>
<p>本文基本参照 <a href="https://www.oschina.net/question/12_213459"> oschina 红薯 大大的文章 </a> 。<br>基本思路是 Nginx 上启用了 HTTPS，而 Nginx 和 Tomcat 之间走的却是普通的 HTTP 连接。</p>
<p><img src="http://amadis.qiniudn.com/nginx_tomcat_ssl.png"></p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>主要以Centos为例。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS release 5.4 (Final)</span><br></pre></td></tr></table></figure>

<h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><p>阿里云提供免费的<code>Symantec DV 证书</code>， 生成好后下载nginx的证书，包含 <code>xxxxxxx.pem</code> 和 <code>xxxxxxxxx.key</code></p>
<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><h3 id="证书上传"><a href="#证书上传" class="headerlink" title="证书上传"></a>证书上传</h3><p>将 <code>xxxxxxx.pem</code> 和 <code>xxxxxxxxx.key</code> 上传到 ngixn 的配置根目录 <code>/etc/nginx</code>。</p>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight nginxconf"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span> ;</span><br><span class="line">        <span class="attribute">server_name</span>  ssl.test.com  ;                                                                                                                                                                    </span><br><span class="line">                                                                                                                                                                                                                  </span><br><span class="line">        <span class="attribute">proxy_intercept_errors</span> <span class="literal">on</span>;                                                                                                                                                                                </span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;                                                                                                                                                                                            </span><br><span class="line">                                                                                                                                                                                                                  </span><br><span class="line">        <span class="comment"># ssl                                                                                                                                                                                                     </span></span><br><span class="line">        <span class="attribute">ssl_certificate</span>   xxxxxxxxx.pem;                                                                                                                                                                    </span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  xxxxxxxxx.key;                                                                                                                                                                 </span><br><span class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;                                                                                                                                                                                   </span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span> AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">                <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /status</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">access_log</span>   <span class="literal">off</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#  让http请求重定向到https请求   </span></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">497</span>  https://<span class="variable">$host</span><span class="variable">$uri</span>?<span class="variable">$args</span>;  </span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">404</span>              /<span class="number">404</span>.html;</span><br><span class="line">        <span class="section">location</span> = /<span class="number">404</span>.html &#123;</span><br><span class="line">          <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">          internal;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>497</code> 是nginx 内置 http 状态。<br>可参考<a href="http://blog.csdn.net/vfush/article/details/51086274">nginx强制使用https访问</a></p>
<h2 id="tomcat配置"><a href="#tomcat配置" class="headerlink" title="tomcat配置"></a>tomcat配置</h2><p>主要配置 <code>server.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;443&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">proxyPort</span>=<span class="string">&quot;443&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.RemoteIpValve&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">remoteIpHeader</span>=<span class="string">&quot;x-forwarded-for&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">remoteIpProxiesHeader</span>=<span class="string">&quot;x-forwarded-by&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">protocolHeader</span>=<span class="string">&quot;x-forwarded-proto&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>特别特别注意的是必须有 <span style="color:red"> proxyPort&#x3D;”443”  redirectPort&#x3D;”443” </span>。<br>同时 <code>&lt;Value&gt;</code> 节点的配置也非常重要，否则你在 Tomcat 中的应用在读取 getScheme() 方法以及在 web.xml 中配置的一些安全策略会不起作用。</p>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>https</tag>
        <tag>nginx</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>linux server 配置选项</title>
    <url>/2016/11/18/web%20server/serverInit/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>环境准备</li>
<li>用户管理</li>
<li>sshd管理</li>
<li>防暴力破解</li>
</ul>
<p>主要以 Centos 7 为主。</p>
<p><em>更新历史</em></p>
<ul>
<li>2017-8-29 增加 SELinux 内容 </li>
<li>2020-3-30 add time synchronize</li>
</ul>
<p>……<span id="more"></span></p>
<h2 id="安装Centos"><a href="#安装Centos" class="headerlink" title="安装Centos"></a>安装Centos</h2><h3 id="U盘安装。"><a href="#U盘安装。" class="headerlink" title="U盘安装。"></a>U盘安装。</h3><p><code>df -l</code> U盘挂载设备路径<br><code>umount sdb1</code><br><code>dd if=iso镜像文件 of=U盘挂载设备名称sdx (一定不要加上数字) bs=8M </code></p>
<p>恢复<br><code>umount U盘挂载设备路径</code><br><code>mkfs.ntfs U盘挂载设备路径</code>  (mkfs.vfat)</p>
<h3 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h3><p>为了方便管理，可以设置服务器的机器名称</p>
<pre><code>    hostnamectl set-hostname `your hostname`
    reboot
</code></pre>
<p>修改 <code>/etc/hosts</code> 将 <code>your hostname</code> 写入到 ipv4 和 ipv6</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-enp2s0 <span class="comment"># ifcfg-enp2s0 文件根据你实际情况</span></span><br><span class="line"></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=no</span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">NAME=enp2s0</span><br><span class="line">UUID=xxxxx-cf21-4b6f-bac5-3f1a0930ee74</span><br><span class="line">DEVICE=enp2s0</span><br><span class="line"></span><br><span class="line">HWADDR=40:8D:5C:A7:40:08</span><br><span class="line"></span><br><span class="line">IPV6_PEERDNS=<span class="built_in">yes</span></span><br><span class="line">IPV6_PEERROUTES=<span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">IPADDR=192.168.xx.xx</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=192.168.11.1</span><br><span class="line">DNS1=221.228.xx.xx</span><br><span class="line">DNS2=114.114.114.114</span><br></pre></td></tr></table></figure>

<p>特别注意 <code>ONBOOT</code> 到最后， DNS 不配置是不能上外网的。</p>
<h3 id="yum源"><a href="#yum源" class="headerlink" title="yum源"></a>yum源</h3><p><a href="https://developer.aliyun.com/mirror/centos">阿里CentOS 镜像</a></p>
<ul>
<li>下载yum源</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo </span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果不是阿里ECS服务器， 替换源URL</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;/mirrors.cloud.aliyuncs.com/d&#x27;</span> -e <span class="string">&#x27;/mirrors.aliyuncs.com/d&#x27;</span> /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成缓存</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line"></span><br><span class="line">yum makecache </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h3><p><a href="/2016/05/05/other/shadowsocks">SS</a></p>
<h3 id="git-git-flow"><a href="#git-git-flow" class="headerlink" title="git (git-flow)"></a>git (git-flow)</h3><pre><code>    yum -y install git
</code></pre>
<p><a href="/2016/05/03/devEnv/git/git/">git的后悔药</a></p>
<p><code>git-flow</code> 看情况安装。</p>
<h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $SHELL  #查看系统当前的shell</span><br><span class="line"></span><br><span class="line">yum install zsh</span><br><span class="line"></span><br><span class="line">cat /etc/shells #查看本地所有的shell</span><br><span class="line"></span><br><span class="line">chsh -s /bin/zsh #切换到zsh</span><br></pre></td></tr></table></figure>

<h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br><span class="line">  </span><br><span class="line">#修改主题，非必须</span><br><span class="line">vim ~/.zshrc</span><br><span class="line">ZSH_THEME=&quot;bira&quot;</span><br><span class="line"></span><br><span class="line">#插件</span><br><span class="line">plugins=(git git-flow git-flow-completion )</span><br></pre></td></tr></table></figure>

<h3 id="服务器时间同步"><a href="#服务器时间同步" class="headerlink" title="服务器时间同步"></a>服务器时间同步</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*/20  * * * * root /usr/sbin/ntpdate pool.ntp.org&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/crontab &gt; /dev/null</span><br></pre></td></tr></table></figure>

<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ul>
<li>增加一root组用户</li>
<li>禁止root登录</li>
</ul>
<h2 id="sshd管理"><a href="#sshd管理" class="headerlink" title="sshd管理"></a>sshd管理</h2><ul>
<li>公钥登录</li>
<li>修改服务端口</li>
<li>禁止密码登录<br><a href="/2016/01/26/linux/service/2-1%20sshd/">ssh</a></li>
</ul>
<h2 id="firewall"><a href="#firewall" class="headerlink" title="firewall"></a>firewall</h2><p><a href="http://giveme5.cc/2017/03/28/linux/Firewalld-md/">firewall</a></p>
<h2 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h2><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/sbin/sestatus -v </span><br><span class="line">SELinux status:                 enabled ##如果SELinux status参数为enabled即为开启状态</span><br><span class="line">  </span><br><span class="line">##或者</span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure>

<h3 id="关闭-SELinux"><a href="#关闭-SELinux" class="headerlink" title="关闭 SELinux"></a>关闭 SELinux</h3><h4 id="临时关闭"><a href="#临时关闭" class="headerlink" title="临时关闭"></a>临时关闭</h4><p><code>setenforce 0</code></p>
<h4 id="临时开启"><a href="#临时开启" class="headerlink" title="临时开启"></a>临时开启</h4><p><code>setenforce 1</code></p>
<h4 id="永久关闭"><a href="#永久关闭" class="headerlink" title="永久关闭"></a>永久关闭</h4><p>修改 <code>/etc/selinux/config</code><br>将 <code>SELINUX=enforcing</code> 改为 <code>SELINUX=disabled</code><br><code>sed -i &#39;s/SELINUX=enforcing/SELINUX=disabled/g&#39; /etc/selinux/config</code><br>重启机器</p>
<h2 id="防暴力破解"><a href="#防暴力破解" class="headerlink" title="防暴力破解"></a>防暴力破解</h2><p>使用 <code>fail2ban</code> 防止暴力破解， 将对方IP放入防火墙.<br><a href="http://giveme5.cc/2017/03/28/linux/fail2ban-md/">fail2ban</a></p>
<h2 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h2><p><a href="/2016/10/10/linux/vnc/">VNC</a></p>
<h2 id="Sonatype-nexus"><a href="#Sonatype-nexus" class="headerlink" title="Sonatype nexus"></a>Sonatype nexus</h2><p><a href="/">nexus</a></p>
<h2 id="gitlab"><a href="#gitlab" class="headerlink" title="gitlab"></a>gitlab</h2><p><a href="/tags/gitlab/">gitlab</a></p>
<h2 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h2><p><a href="/tags/jenkins/">jenkins</a></p>
<h2 id="nginx-x2F-2016-x2F-01-x2F-22-x2F-web-server-x2F-nginx-x2F-nginx-x2F"><a href="#nginx-x2F-2016-x2F-01-x2F-22-x2F-web-server-x2F-nginx-x2F-nginx-x2F" class="headerlink" title="[nginx](&#x2F;2016&#x2F;01&#x2F;22&#x2F;web server&#x2F;nginx&#x2F;nginx&#x2F;)"></a>[nginx](&#x2F;2016&#x2F;01&#x2F;22&#x2F;web server&#x2F;nginx&#x2F;nginx&#x2F;)</h2><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a><a href="/categories/mysql/">mysql</a></h2>]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>web 服务器</title>
    <url>/2015/09/16/web%20server/servers/</url>
    <content><![CDATA[<p>整理一些常用的服务器知识，配置和使用实例。这里仅作简单介绍。<br>陆续更新。。。</p>
<ul>
<li><p>tomcat<br>使用最广泛的 Web 应用服务器和 servlet 容器，不多说了。</p>
</li>
<li><p>tomEE（发音同“tommy”）<br>完全兼容tomcat，从名字看就知道和tomcat关系密切。TomEE仅仅是Tomcat的一个扩展版本，任何能在Tomcat上使用的工具，如像Eclipse WTP一样的IDE工具，全部都能用在TomEE上。 TomEE&#x3D;Tomcat+java EE，TomEE嵌入了EJB、CDI和其他JavaEE特征到Tomcat里，是一个完整符合Web Profile的服务器。</p>
</li>
<li><p>[nginx](&#x2F;2016&#x2F;01&#x2F;22&#x2F;web server&#x2F;nginx&#x2F;nginx&#x2F;)<br>是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP&#x2F;POP3&#x2F;SMTP 服务器。基本用的是前面的功能 ：)</p>
</li>
<li><p>wildfly（Jboss as）<br>JBoss Application Server(JBoss AS) 改名成 wildfly， 版本升级真快。提供完整的Java EE 栈。开源免费。</p>
</li>
<li><p>jetty<br>开源的servlet容器</p>
</li>
</ul>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins 管理项目权限</title>
    <url>/2017/03/03/devEnv/ci/jenkinsRole/</url>
    <content><![CDATA[<p>主要内容</p>
<p>利用 插件<code>Role-based Authorization Strategy</code> 管理项目权限</p>
<span id="more"></span>

<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>安装插件<code>Role-based Authorization Strategy</code></p>
<p><img src="/images/jenkins_role_1.png" alt="Role-based Authorization Strategy"></p>
<h2 id="授权策略"><a href="#授权策略" class="headerlink" title="授权策略"></a>授权策略</h2><p><code>Manage Jenkins</code> -&gt; <code>Configure Global Security</code> -&gt; <code>Access Control</code> -&gt; <code>Authorization</code> -&gt; 选择“Role-Based Strategy”</p>
<p><img src="/images/jenkins_role_2.png"></p>
<p>注意下拉到最后 <code>保存</code></p>
<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p><code>Manage Jenkins</code> -&gt; <code>Manage Users</code> -&gt; <code>Create User</code>，<br>创建用户<code>productManager</code><br><img src="/images/jenkins_role_3.png"></p>
<h2 id="管理角色"><a href="#管理角色" class="headerlink" title="管理角色"></a>管理角色</h2><h3 id="创建角色"><a href="#创建角色" class="headerlink" title="创建角色"></a>创建角色</h3><p><code>Manage Jenkins</code> -&gt; <code>Manage and Assign Roles</code> -&gt; <code>Manage Roles</code>，<br>需要分别在 <code>Global roles</code> 全局级别， <code>Project roles</code> 项目级别 操作</p>
<p><img src="/images/jenkins_role_4.png"></p>
<p>2个级别：</p>
<ul>
<li><p><code>Global roles</code> 全局级别<br>创建角色<code>member</code>，给<code>member</code>角色 赋予 <code>Overall.Read</code>  <code>Job.Create</code> 这2个全局权限。<code>Overall.Read</code> 必须要赋予。</p>
</li>
<li><p><code>Project roles</code> 项目级别<br>创建角色<code>pm</code>，例如定义<code>pm</code>角色为该项目管理员，所以赋予其项目的全部权限， 看你们的实际情况。</p>
</li>
</ul>
<p>注意下拉到最后 <code>保存</code></p>
<h3 id="赋予角色"><a href="#赋予角色" class="headerlink" title="赋予角色"></a>赋予角色</h3><p><code>Manage Jenkins</code> -&gt; <code>Manage and Assign Roles</code> -&gt; <code>Assign Roles</code>，<br>为上面创建的用户<code>productManager</code> 赋予角色， 这里也需要分别在 <code>Global roles</code> 全局级别， <code>Project roles</code> 项目级别 操作。<br><img src="/images/jenkins_role_5.png"></p>
<p>2个级别：</p>
<ul>
<li><p><code>Global roles</code> 全局级别<br>用户<code>productManager</code> 赋予角色<code>member</code></p>
</li>
<li><p><code>Project roles</code> 项目级别<br>用户<code>productManager</code> 赋予角色<code>pm</code>。</p>
</li>
</ul>
<p>注意下拉到最后 <code>保存</code></p>
<h2 id="验证角色"><a href="#验证角色" class="headerlink" title="验证角色"></a>验证角色</h2><ul>
<li><p>管理员视图：<br><img src="/images/jenkins_role_6.png"></p>
</li>
<li><p>用户<code>productManager</code> 视图：<br><img src="/images/jenkins_role_7.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>developEnv</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2017/08/18/devEnv/git/git/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>git , github, gitlab 相关</p>
<p><em>更新历史</em><br>2017-08-18 增加 删除&#x2F;回滚 多次远程提交<br>2020-04-28 git摘樱桃 cherry-pick</p>
<hr>
<span id="more"></span>

<h2 id="git-的后悔药"><a href="#git-的后悔药" class="headerlink" title="git 的后悔药"></a>git 的后悔药</h2><h3 id="场景1：直接丢弃工作区的修改（还没有add）"><a href="#场景1：直接丢弃工作区的修改（还没有add）" class="headerlink" title="场景1：直接丢弃工作区的修改（还没有add）"></a>场景1：直接丢弃工作区的修改（还没有add）</h3><p><code>git checkout -- file</code></p>
<h3 id="场景2：-丢弃暂存区（已经add，未commit）"><a href="#场景2：-丢弃暂存区（已经add，未commit）" class="headerlink" title="场景2： 丢弃暂存区（已经add，未commit）"></a>场景2： 丢弃暂存区（已经add，未commit）</h3><p>分两步，第一步用命令 <code>git reset HEAD file</code> ，就回到了场景1，第二步按场景1操作。</p>
<h3 id="场景3：已经提交了不合适的修改到版本库（已经commit，-未push）"><a href="#场景3：已经提交了不合适的修改到版本库（已经commit，-未push）" class="headerlink" title="场景3：已经提交了不合适的修改到版本库（已经commit， 未push）"></a>场景3：已经提交了不合适的修改到版本库（已经commit， 未push）</h3><p><code>git reset --hard HEAD^ #还原到上个</code><br><code>git reset --hard commitId</code></p>
<h3 id="场景4：已经推送到远程（已经push）"><a href="#场景4：已经推送到远程（已经push）" class="headerlink" title="场景4：已经推送到远程（已经push）"></a>场景4：已经推送到远程（已经push）</h3><ul>
<li><p>删除某一次远程提交<br><code>git revert commitId</code><br><code>git push origin master</code></p>
</li>
<li><p>删除&#x2F;回滚 多次远程提交<br><code> git rebase -i &quot;commit id&quot;</code><br><img src="/images/git1.jpg"><br>在编辑框中删除相关commit，如pick 5b3ba7a test2，然后保存退出（如果遇到冲突需要先解决冲突）！<br><code>git push origin master -f</code><br>这里需要强制推送， 如果是保护branch， 需要临时解除保护。</p>
</li>
</ul>
<h2 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h2><p>将代码从一个分支转移到另一个分支，是多分支代码库的常见需求。<br>一种情况是，你需要另一个分支的所有代码变动，那么就采用合并<code>git merge</code>。另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用 <code>Cherry pick</code>。</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="指定提交commit"><a href="#指定提交commit" class="headerlink" title="指定提交commit"></a>指定提交commit</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git cherry-pick &lt;commitHash&gt;</span><br></pre></td></tr></table></figure>
<p>会将指定的提交commitHash，应用于当前分支。这会在当前分支产生一个新的提交，当然哈希值不一样。</p>
<p>比如，</p>
<ul>
<li><p>代码仓库有 <code>master</code> 和 <code>develop</code> 两个分支</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">a - b - c - d           Master</span><br><span class="line">         \</span><br><span class="line">           e - f - g    develop</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在将提交f应用到master分支</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到 master 分支</span></span><br><span class="line">$ git checkout master</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cherry pick 操作</span></span><br><span class="line">$ git cherry-pick f</span><br></pre></td></tr></table></figure>
</li>
<li><p>操作完成以后，代码库就变成</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">a - b - c - d - f          Master</span><br><span class="line">         \</span><br><span class="line">           e - f - g       develop</span><br></pre></td></tr></table></figure>
<p>注意： Master 的 f 和 develop 的 f hash值不同</p>
</li>
</ul>
<h4 id="最近一次提交"><a href="#最近一次提交" class="headerlink" title="最近一次提交"></a>最近一次提交</h4><pre><code>git cherry-pick feature
</code></pre>
<p>将feature分支的最近一次提交，转移到当前分支。</p>
<h4 id="多个提交"><a href="#多个提交" class="headerlink" title="多个提交"></a>多个提交</h4><ul>
<li><p>多个<br>  <code>git cherry-pick &lt;HashA&gt; &lt;HashB&gt;</code><br>将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。</p>
</li>
<li><p>连续<br>  <code>git cherry-pick A..B </code><br>转移从 A 到 B 的所有提交。它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错。<br>注意，使用上面的命令，提交 A 将不会包含在 Cherry pick 中。如果要包含提交 A，可以使用下面的语法。</p>
<p>  <code>git cherry-pick A^..B </code></p>
</li>
</ul>
<h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] [--ff] [-S[&lt;keyid&gt;]] &lt;commit&gt;...</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>-e，--edit</code><br>打开外部编辑器，编辑提交信息</p>
</li>
<li><p><code>-n，--no-commit</code><br>只更新工作区和暂存区，不产生新的提交。</p>
</li>
<li><p><code>-x</code><br>在提交信息的末尾追加一行(cherry picked from commit …)，方便以后查到这个提交是如何产生的。</p>
</li>
<li><p><code>-s，--signoff</code><br>在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作。</p>
</li>
<li><p><code>-m parent-number，--mainline parent-number</code><br>如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。<br><code>-m</code> 配置项告诉 Git，应该采用哪个分支的变动。它的参数parent-number是一个从1开始的整数，代表原始提交的父分支编号。<br><code>git cherry-pick -m 1 &lt;commitHash&gt;</code> Cherry pick 采用提交commitHash来自编号1的父分支的变动。<br>一般来说，1号父分支是接受变动的分支（the branch being merged into），2号父分支是作为变动来源的分支（the branch being merged from）。</p>
</li>
</ul>
<h3 id="后续命令"><a href="#后续命令" class="headerlink" title="后续命令"></a>后续命令</h3><p>如果操作过程中发生代码冲突，Cherry pick 会停下来，让用户决定如何继续操作。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Cherry pick 过程继续执行</span></span><br><span class="line">git cherry-pick --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 放弃合并，回到操作前</span></span><br><span class="line">git cherry-pick --abort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出 Cherry pick，但是不回到操作前</span></span><br><span class="line">git cherry-pick --quit</span><br></pre></td></tr></table></figure>






















]]></content>
      <categories>
        <category>developEnv</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab</title>
    <url>/2016/06/20/devEnv/gitlab/gitlab/</url>
    <content><![CDATA[<p>gitlab 一个开源的版本管理系统,实现一个自托管的Git项目仓库,可通过Web界面进行访问公开的或者私人项目。基本拥有GitHub类似的功能。</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://about.gitlab.com/downloads/">免费开源的CE版本</a><br>请选择需要的版本， 这里有个 <a href="https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/">大中国专用的mirror</a></p>
<p>然后按照提示执行就ok。</p>
<p>初始账户： <code>root</code><br>password： <code>5iveL!fe</code></p>
<h2 id="管理和配置"><a href="#管理和配置" class="headerlink" title="管理和配置"></a>管理和配置</h2><p><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md">官方文档</a></p>
<ul>
<li>配置</li>
</ul>
<p>GitLab 7.6 以后， 默认的配置文件 <code>/etc/gitlab/gitlab.rb</code>， 修改后，使用 <code>sudo gitlab-ctl reconfigure</code> 使配置生效并启动gitlab。</p>
<p>配置文件的内容有点像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Disable the built-in nginx</span><br><span class="line">#nginx[&#x27;enable&#x27;] = false</span><br><span class="line">#web_server[&#x27;external_users&#x27;] = [&#x27;nginx&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># # Disable the built-in unicorn</span><br><span class="line">#unicorn[&#x27;enable&#x27;] = false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Check and change the external_url to the address your users will type in their browser</span><br><span class="line">external_url &#x27;http://IP:70&#x27;</span><br><span class="line"></span><br><span class="line">#port</span><br><span class="line">#redis[&#x27;port&#x27;] = 7001</span><br><span class="line">#postgresql[&#x27;port&#x27;] = 7002</span><br><span class="line">unicorn[&#x27;port&#x27;] = 7004</span><br><span class="line"></span><br><span class="line">#git data path</span><br><span class="line">git_data_dir &quot;/data/git-data&quot;</span><br><span class="line">gitlab_rails[&#x27;backup_path&#x27;] = &#x27;/data/git-data-backups&#x27;</span><br><span class="line"></span><br><span class="line"># limit backup lifetime to 7 days - 604800 seconds</span><br><span class="line">gitlab_rails[&#x27;backup_keep_time&#x27;] = 604800</span><br></pre></td></tr></table></figure>
<p>重点关注 <code>external_url</code> <code>port</code> <code>git data path</code>。</p>
<ul>
<li>管理命令<br>启动所有gitlab组件：<br>gitlab-ctl start<br>停止所有gitlab组件：<br>gitlab-ctl stop<br>重启所有gitlab组件：<br>gitlab-ctl restart</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h3><p>如图可以进入admin特别区域。多用于管理 <code>group</code>， <code>project</code>， <code>user</code>， 更高级的话管理 <code>job</code> 和 <code>hook</code><br><img src="http://blog.nicejour.com/gitlab1.png"></p>
<h3 id="普通用户"><a href="#普通用户" class="headerlink" title="普通用户"></a>普通用户</h3><ul>
<li>SSH KEY<br>统一使用ssh协议类操作git repository， 所以登陆以后，请将自己的public key添加到gitlab账户。</li>
</ul>
<p><img src="http://blog.nicejour.com/gitlab2.png"><br><img src="http://blog.nicejour.com/gitlab3.png"><br><img src="http://blog.nicejour.com/gitlab4.png"></p>
<p>ssh key 可由管理员方式发送到各位，<br>包括2个文件，一个是.pub结尾的，这个就是public key，另一个无后缀名的，这是各位的private key，请妥善保管，以后将凭这个文件来获得对git服务器的访问权。</p>
<p>private key需要存放在办公电脑路径：<br>Linux ： <code>/home/你的用户/.ssh</code><br>Windows: <code>C:\Users\你的用户\.ssh</code></p>
<p>如需自己生成：<code>ssh-keygen -t rsa -C &quot;your_email@your_email.com&quot;</code></p>
<ul>
<li>操作<br>每个人在自己的dashborad里可以看到自己加入的project<br>有权限的人，可以自己创建project</li>
</ul>
<p><img src="http://blog.nicejour.com/gitlab5.png"></p>
<p>版本操作完全是git的内容。Linux的话直接命令行就很好了； Windows的话 推荐 <a href="https://www.sourcetreeapp.com/">SourceTree</a> or <a href="http://www.syntevo.com/smartgithg/">smartgit</a></p>
<h2 id="备份迁移"><a href="#备份迁移" class="headerlink" title="备份迁移"></a>备份迁移</h2><p>下面都是yum方式安装gitlab的用法, 工作目录都是 <code>gitlab.rb</code> 设置的 <code>gitlab_rails[&#39;backup_path&#39;]</code>； 完整的参考<a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/raketasks/backup_restore.md">官方指南</a>.</p>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><pre><code>    sudo gitlab-rake gitlab:backup:create
</code></pre>
<h3 id="自动备份"><a href="#自动备份" class="headerlink" title="自动备份"></a>自动备份</h3><p>使用<code>crontab</code>每日自动备份</p>
<ul>
<li><p>schedule a cron job<br>  sudo su -<br>  crontab -e</p>
</li>
<li><p>backup (每天凌晨2点)<br>  0 2 * * * &#x2F;usr&#x2F;bin&#x2F;gitlab-rake gitlab:backup:create CRON&#x3D;1</p>
</li>
<li><p>备份有效时间<br><code>/etc/gitlab/gitlab.rb</code>内配置<br>  # limit backup lifetime to 7 days - 604800 seconds<br>  gitlab_rails[‘backup_keep_time’] &#x3D; 604800</p>
</li>
</ul>
<h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1 copy 备份文件</span><br><span class="line">sudo cp 1393513186_gitlab_backup.tar /var/opt/gitlab/backups/</span><br><span class="line">  </span><br><span class="line"># 2 Stop the processes that are connected to the database. Leave the rest of GitLab running</span><br><span class="line">sudo gitlab-ctl stop unicorn</span><br><span class="line">sudo gitlab-ctl stop sidekiq</span><br><span class="line"># Verify</span><br><span class="line">sudo gitlab-ctl status</span><br><span class="line">  </span><br><span class="line"># 3 restore</span><br><span class="line">#will overwrite the contents of your GitLab database!!!!!</span><br><span class="line">sudo gitlab-rake gitlab:backup:restore BACKUP=1393513186</span><br><span class="line">  </span><br><span class="line"># 4 Restart and check GitLab</span><br><span class="line">sudo gitlab-ctl start</span><br><span class="line">sudo gitlab-rake gitlab:check SANITIZE=true</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>developEnv</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins集合</title>
    <url>/2015/07/29/devEnv/ci/o-jenkins/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>jenkins-2.235.3-1.1 安装 使用 </p>
<p><em>更新历史</em><br><del>2020-08-04 增加jenkins的清华镜像设置</del><br>2020-11-14 国内镜像源设置</p>
<span id="more"></span>


<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions">官方指南</a></p>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>JDK1.8以上 安装</p>
<h3 id="RedHat系-YUM安装"><a href="#RedHat系-YUM安装" class="headerlink" title="RedHat系 YUM安装"></a>RedHat系 YUM安装</h3><p>centOS 8 安装稳定版本如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line">rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class="line">yum install jenkins</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果网络慢， 可以手工安装 清华镜像, 如下 安装版本jenkins-xxxx.noarch.rpm</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat-stable/jenkins-xxx.noarch.rpm</span><br><span class="line">yum install -y jenkins-xxxx.noarch.rpm</span><br></pre></td></tr></table></figure>

<h3 id="安装结果"><a href="#安装结果" class="headerlink" title="安装结果"></a>安装结果</h3><ul>
<li>daemon ： &#x2F;etc&#x2F;init.d&#x2F;jenkins </li>
<li>user ： jenkins （查看passwd，获得工作路径）</li>
<li>Log file ： &#x2F;var&#x2F;log&#x2F;jenkins&#x2F;jenkins.log</li>
<li>configuration ： &#x2F;etc&#x2F;sysconfig&#x2F;jenkins  (建议修改JENKINS_HOME到空间较大的路径)</li>
<li>初始密码 ：查看 &#x2F;var&#x2F;log&#x2F;jenkins&#x2F;jenkins.log</li>
</ul>
<h3 id="启动-x2F-停止"><a href="#启动-x2F-停止" class="headerlink" title="启动&#x2F;停止"></a>启动&#x2F;停止</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start/stop/restart jenkins</span><br><span class="line">systemctl enable jenkins ##开机自动启动</span><br></pre></td></tr></table></figure>

<p>ps: 别忘了关闭防火墙或者设置防火墙</p>
<p><img src="/images/jenkins0.png"><br><img src="/images/jenkins1.png"><br>选推荐插件<br><img src="/images/jenkins2.png"><br><img src="/images/jenkins3.png"><br><img src="/images/jenkins4.png"><br><img src="/images/jenkins5.png"></p>
<h3 id="插件管理-升级站点-设置"><a href="#插件管理-升级站点-设置" class="headerlink" title="插件管理 升级站点 设置"></a>插件管理 升级站点 设置</h3><p>由于长城的原因， 建议把插件站点设置成国内的。</p>
<p><img src="/images/jenkins6.png"><br><img src="/images/jenkins7.png"><br><img src="/images/jenkins8.png"><br><img src="/images/jenkins9.png"></p>
<p><strong>特别注意</strong><br>如果是操作系统是<code>CentOS 8</code> 执行如下命令， 重启 jenkins</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">update-crypto-policies --<span class="built_in">set</span> LEGACY</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="/images/jenkins10.png"></p>
<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>一般yum安装的 JAVA_HOME 为 <code>/usr/lib/jvm/java</code></p>
<h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><p>安装maven<br>yum安装的 M2_HOME 为 <code>/usr/share/maven</code></p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>这些必须安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Git plugin</span><br><span class="line">Git client plugin</span><br><span class="line">GitLab Plugin</span><br><span class="line">maven plugin</span><br></pre></td></tr></table></figure>

<h3 id="Manage-Jenkins-–-gt-Configure-Global-Security"><a href="#Manage-Jenkins-–-gt-Configure-Global-Security" class="headerlink" title="Manage Jenkins –&gt; Configure Global Security"></a>Manage Jenkins –&gt; Configure Global Security</h3><h3 id="Manage-Jenkins-–-gt-Configure-System"><a href="#Manage-Jenkins-–-gt-Configure-System" class="headerlink" title="Manage Jenkins –&gt; Configure System"></a>Manage Jenkins –&gt; Configure System</h3><p>配置 JDK， Jenkins Location， Git plugin， Gitlab</p>
<h3 id="ssh-key"><a href="#ssh-key" class="headerlink" title="ssh-key"></a>ssh-key</h3><p>如果连接 Source Code Management 采用 ssh 连接， 需要先生成 ssh-key</p>
<pre><code>ssh-keygen -t rsa -C &quot;your_email@your_email.com&quot; -b 4096
</code></pre>
<p>注意生成目录， jenkins ssh-key的默认目录为： <code>/var/lib/jenkins/</code>下的 <code>.ssh/</code> , 以 jenkins 用户的home目录 为准。</p>
<h2 id="New-Item"><a href="#New-Item" class="headerlink" title="New Item"></a>New Item</h2><p>mavne project</p>
<h3 id="root-project"><a href="#root-project" class="headerlink" title="root project"></a>root project</h3><p>Maven project name<br>Description</p>
<p>Discard Old Builds<br>Source Code Management</p>
<p>Build<br>    Root POM：pom.xml<br>    Goals and options： clean deploy -N</p>
<h3 id="sub-project"><a href="#sub-project" class="headerlink" title="sub project"></a>sub project</h3><p>其他 参照上方，<br>Post Steps –&gt; Excute shell (启动tomcat等Web server)<br>shell可能长的像下面这样</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash -ex</span></span><br><span class="line">JAVA_OPTS=<span class="string">&quot;-Xms768m -Xmx1000m -XX:PermSize=512m -XX:MaxPermSize=1024m&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /data/apache-tomcat/</span><br><span class="line">bin/catalina.sh stop 35 -force</span><br><span class="line"><span class="built_in">rm</span> -rf /data/apache-tomcat/webapps/xxxxxxxx.war /data/apache-tomcat/webapps/xxxxxxxx</span><br><span class="line"><span class="built_in">cp</span> <span class="variable">$WORKSPACE</span>/target/xxxxxxxx.war /data/apache-tomcat/webapps</span><br><span class="line"><span class="comment">## required, or tomcat will be killed by jenkins. The value can be set to anything.</span></span><br><span class="line">BUILD_ID=please_do_not_kill_me </span><br><span class="line"><span class="built_in">sleep</span> 20s</span><br><span class="line">bin/catalina.sh start</span><br></pre></td></tr></table></figure>


<h2 id="项目权限"><a href="#项目权限" class="headerlink" title="项目权限"></a>项目权限</h2><p><a href="/2017/03/03/devEnv/ci/jenkinsRole/">项目权限</a></p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p><img src="/images/jenkins/root1.png"><br><img src="/images/jenkins/root2.png"><br><img src="/images/jenkins/root3.png"><br><img src="/images/jenkins/root4.png"></p>
<p><img src="/images/jenkins/c1.png"><br><img src="/images/jenkins/c2.png"><br><img src="/images/jenkins/c3.png"><br><img src="/images/jenkins/c4.png"><br><img src="/images/jenkins/c5.png"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash -ex</span></span><br><span class="line">PID=`ps -ef|grep jenkins|grep /bin/java|grep -v grep|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PID</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;&quot;</span> != <span class="string">&quot;<span class="variable">$PID</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;killing <span class="variable">$PID</span>&quot;</span></span><br><span class="line"> <span class="built_in">kill</span> -9 <span class="variable">$PID</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;leyun not running!&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash -ex</span></span><br><span class="line"><span class="comment">## JAVA_OPTS=&quot;-Xms768m -Xmx1000m -XX:PermSize=512m -XX:MaxPermSize=1024m&quot;</span></span><br><span class="line"><span class="comment"># sleep 3s</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /data/leyun/apache-tomcat-8.5.60/</span><br><span class="line"><span class="comment"># bin/catalina.sh stop 35 -force</span></span><br><span class="line"><span class="built_in">rm</span> -rf /data/leyun/apache-tomcat-8.5.60/webapps/ROOT.war /data/leyun/apache-tomcat-8.5.60/webapps/ROOT </span><br><span class="line"><span class="built_in">cp</span> <span class="variable">$WORKSPACE</span>/target/leyun-server-center-service.war /data/leyun/apache-tomcat-8.5.60/webapps/ROOT.war</span><br><span class="line"><span class="comment">## required, or tomcat will be killed by jenkins. The value can be set to anything.</span></span><br><span class="line">BUILD_ID=please_do_not_kill_me </span><br><span class="line"><span class="built_in">sleep</span> 10s</span><br><span class="line"></span><br><span class="line">bin/catalina.sh start</span><br></pre></td></tr></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="第一次ssh连接-gitServer"><a href="#第一次ssh连接-gitServer" class="headerlink" title="第一次ssh连接 gitServer"></a>第一次ssh连接 gitServer</h3><p>Source Code Management 中 git 第一次ssh连接， 会有 <code>host error</code><br>解决方法： </p>
<ul>
<li>jenkins 用户登录， <code>/etc/passwd</code> 中 jenkins用户的默认shell 需要修改成 <code>bin/bash</code></li>
<li>执行命令 <code>ssh git@gitServerIP</code>, 接受yes</li>
<li>还原 jenkins用户的默认shell为 <code>bin/false</code></li>
</ul>
<h3 id="ssh-非默认22端口"><a href="#ssh-非默认22端口" class="headerlink" title="ssh 非默认22端口"></a>ssh 非默认22端口</h3><p><code>vim /var/lib/jenkins/.ssh/config</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Host gitlab.xianzhongwang.com</span><br><span class="line">Port 34</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 644 /var/lib/jenkins/.ssh/config</span><br></pre></td></tr></table></figure>



<h3 id="网络导致日志疯狂增长"><a href="#网络导致日志疯狂增长" class="headerlink" title="网络导致日志疯狂增长"></a>网络导致日志疯狂增长</h3><p>一旦jenkins所在的服务器的网络出现问题， jenkins的日志文件（&#x2F;var&#x2F;log&#x2F;jenkins&#x2F;jenkins.log）大小会疯狂快速增长，直到撑爆硬盘<br>日志内容大概为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jul 29, 2015 5:04:59 AM javax.jmdns.impl.constants.DNSRecordClass classForIndex</span><br><span class="line">WARNING: Could not find record class <span class="keyword">for</span> index: -1</span><br><span class="line">Jul 29, 2015 5:04:59 AM javax.jmdns.impl.DNSIncoming<span class="variable">$MessageInputStream</span> readName</span><br><span class="line">SEVERE: bad domain name: possible circular name detected. Bad offset: 0xffffffff at 0xb6</span><br><span class="line">Jul 29, 2015 5:04:59 AM javax.jmdns.impl.constants.DNSRecordType typeForIndex</span><br><span class="line">SEVERE: Could not find record <span class="built_in">type</span> <span class="keyword">for</span> index: -1</span><br><span class="line">Jul 29, 2015 5:04:59 AM javax.jmdns.impl.DNSIncoming readQuestion</span><br><span class="line">SEVERE: Could not find record <span class="built_in">type</span>: dns[query,108.61.99.169:53227, length=184, <span class="built_in">id</span>=0x5c78, flags=0x3030, questions=6</span><br><span class="line">questions:</span><br><span class="line">        [DNSQuestion@84075318 <span class="built_in">type</span>: TYPE_IGNORE index 0, class: CLASS_UNKNOWN index 0, name: 0\x00\x01\x00\x00\x00\x00\x00\x00\x09\x5F\x73\x6.\x72\x76\x69\x63\x65\x73\x07\x5F\x64\x6E\x73\x2D\x73\.4\x04\x5F\x75\x64\x70\x05\x6C\x6F\x63\x61\x6C\x00\x00\.C\x00\x01ϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿ.]</span><br><span class="line">        [DNSQuestion@9629900 <span class="built_in">type</span>: TYPE_IGNORE index 0, class: CLASS_UNKNOWN index 0, name: ]</span><br><span class="line">        [DNSQuestion@788455775 <span class="built_in">type</span>: TYPE_IGNORE index 0, class: CLASS_UNKNOWN index 0, name: ]</span><br><span class="line">        [DNSQuestion@1602108435 <span class="built_in">type</span>: TYPE_IGNORE index 0, class: CLASS_UNKNOWN index 0, name: ]</span><br><span class="line">        [DNSQuestion@1486500959 <span class="built_in">type</span>: TYPE_IGNORE index 0, class: CLASS_UNKNOWN index 0, name: ]</span><br><span class="line">        [DNSQuestion@1944352362 <span class="built_in">type</span>: TYPE_IGNORE index 0, class: CLASS_UNKNOWN index 0, name: ]]</span><br><span class="line">        question:      [DNSQuestion@84075318 <span class="built_in">type</span>: TYPE_IGNORE index 0, class: CLASS_UNKNOWN index 0, name: 0\x00\x01\x00\x00\x00\x00\x00\x00\x09\x5F\x73\x6.\x72\x76\x69\x63\x65\x73\x07\x5F\x64\x6E\x73\x2D\x73\.4\x04\x5F\x75\x64\x70\x05\x6C\x6F\x63\x61\x6C\x00\x00\.C\x00\x01ϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿ.]</span><br><span class="line">        question:      [DNSQuestion@9629900 <span class="built_in">type</span>: TYPE_IGNORE index 0, class: CLASS_UNKNOWN index 0, name: ]</span><br><span class="line">        question:      [DNSQuestion@788455775 <span class="built_in">type</span>: TYPE_IGNORE index 0, class: CLASS_UNKNOWN index 0, name: ]</span><br><span class="line">        question:      [DNSQuestion@1602108435 <span class="built_in">type</span>: TYPE_IGNORE index 0, class: CLASS_UNKNOWN index 0, name: ]</span><br><span class="line">        question:      [DNSQuestion@1486500959 <span class="built_in">type</span>: TYPE_IGNORE index 0, class: CLASS_UNKNOWN index 0, name: ]</span><br><span class="line">        question:      [DNSQuestion@1944352362 <span class="built_in">type</span>: TYPE_IGNORE index 0, class: CLASS_UNKNOWN index 0, name: ]</span><br><span class="line">   0: 5c7830305c783030 5c7830305c783030 5c7830305c783031 5c7830305c783030     \x00\x00 \x00\x00 \x00\x01 \x00\x00</span><br><span class="line">  20: 5c7830305c783030 5c7830305c783030 5c7830395c783546 5c7837335c783635     \x00\x00 \x00\x00 \x09\x5F \x73\x65</span><br><span class="line">  40: 5c7837325c783736 5c7836395c783633 5c7836355c783733 5c7830375c783546     \x72\x76 \x69\x63 \x65\x73 \x07\x5F</span><br><span class="line">  60: 5c7836345c783645 5c7837335c783244 5c7837335c783634 5c7830345c783546     \x64\x6E \x73\x2D \x73\x64 \x04\x5F</span><br><span class="line">  80: 5c7837355c783634 5c7837305c783035 5c7836435c783646 5c7836335c783631     \x75\x64 \x70\x05 \x6C\x6F \x63\x61</span><br><span class="line">  a0: 5c7836435c783030 5c7830305c783043 5c7830305c783031                      \x6C\x00 \x00\x0C \x00\x01</span><br></pre></td></tr></table></figure>

<p>jenkins官方的issue，目前尚未fixed</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://issues.jenkins-ci.org/browse/JENKINS-10160</span><br></pre></td></tr></table></figure>

<p>临时解决方案：<br>修改jenkins的java启动参数，编辑 &#x2F;etc&#x2F;sysconfig&#x2F;jenkins， 看看效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JENKINS_JAVA_OPTIONS=<span class="string">&quot;-Djava.awt.headless=true -Dhudson.DNSMultiCast.disabled=true -Dhudson.udp=-1&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>developEnv</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Sonatype nexus</title>
    <url>/2016/06/20/devEnv/nexus/nexus/</url>
    <content><![CDATA[<p>永久免费的 Sonatype Nexus Repository Manager OSS版本，<br>可以帮助你与其他开发人员和最终用户共享组件。它大大简化了内部存储库的维护和访问外部存储库，可以从单一地点完全控制访问和部署每个组件。<br>主要配合maven 和 gradle 工作。   </p>
<p>版本 OSS 3.25.1-04</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>前提要JRE7以上</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a><a href="https://help.sonatype.com/repomanager3/download">下载</a></h3><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a><a href="https://help.sonatype.com/repomanager3/installation">安装</a></h3><p>主要步骤像这样滴</p>
<ul>
<li>文件</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">cp</span> nexus-3.25.1-04-unix.tar.gz /opt</span><br><span class="line">$ <span class="built_in">cd</span> /opt</span><br><span class="line">$ sudo tar xvzf nexus-3.25.1-04-unix.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加用户 nexus</span></span><br><span class="line">useradd nexus</span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s nexus-3.25.1-04 nexus</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改nexus的权限</span></span><br><span class="line"><span class="built_in">chown</span> -R nexus:nexus nexus-3.25.1-04</span><br><span class="line"><span class="built_in">chown</span> -R nexus:nexus sonatype-work </span><br><span class="line"><span class="built_in">chown</span> -R nexus:nexus nexus</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">cd</span> nexus/bin</span><br><span class="line">sudo -u nexus ./nexus run</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>sonatype-work</li>
</ul>
<p>安装同级目录有<code>sonatype-work</code>文件夹（$data-dir），用来保存 repository and configuration data；和安装文件分离，方便升级。</p>
<ul>
<li><a href="https://help.sonatype.com/repomanager3/installation/run-as-a-service">系统服务</a></li>
</ul>
<p><code>vim /etc/systemd/system/nexus.service</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nexus service</span><br><span class="line">After=network.target</span><br><span class="line">  </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">ExecStart=/opt/nexus/bin/nexus start</span><br><span class="line">ExecStop=/opt/nexus/bin/nexus stop</span><br><span class="line">User=nexus</span><br><span class="line">Restart=on-abort</span><br><span class="line">TimeoutSec=600</span><br><span class="line">  </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> nexus.service</span><br><span class="line">systemctl start nexus.service</span><br></pre></td></tr></table></figure>



<h2 id="配置和管理"><a href="#配置和管理" class="headerlink" title="配置和管理"></a><a href="https://help.sonatype.com/repomanager3/installation/configuring-the-runtime-environment">配置和管理</a></h2><ul>
<li><p>JVM配置<br>$install-dir&#x2F;bin&#x2F;nexus.vmoptions</p>
</li>
<li><p>主配置<br>$install-dir&#x2F;etc</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -1 nexus-&lt;version&gt;/etc</span><br><span class="line">fabric</span><br><span class="line">jetty</span><br><span class="line">karaf</span><br><span class="line">logback</span><br><span class="line">nexus-default.properties</span><br><span class="line">ssl</span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>nexus-default.properties</code> 是模块文件，不能修改， 第一次启动后会生成 实际使用的配置 <code>$data-dir/etc/nexus.properties</code>， </p>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p><a href="https://help.sonatype.com/repomanager3/installation/run-behind-a-reverse-proxy">官方文档</a></p>
<h3 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h3><ul>
<li><p>地址账户<br>地址    ：端口和context 参照 你自己配置的 <code>$data-dir/etc/nexus.properties</code><br>初始账户 ：<code>admin</code><br>初始密码 ：参考 &#x2F;opt&#x2F;sonatype-work&#x2F;nexus3&#x2F;admin.password</p>
</li>
<li><p>Repository<br><a href="/2015/10/15/devEnv/nexus/restlet/">参照</a></p>
</li>
</ul>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p><a href="">参照Maven配置</a></p>
]]></content>
      <categories>
        <category>developEnv</category>
      </categories>
      <tags>
        <tag>nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>nexus 不能自动下载 restlet jars 的解决方案</title>
    <url>/2015/10/15/devEnv/nexus/restlet/</url>
    <content><![CDATA[<p>今天用到了 activiti 5.16；它依赖 <code>org.restlet.jee:org.restlet:2.2.1</code> 等 jar。奇怪的事情发现了， 一向运行良好的 nexus 出问题，<code>org.restlet.jee:org.restletxxx:2.2.1</code> 一系列的jars都无法下载。这里吐草下，<code>org.restlet.jee:org.restletxxx</code> 看着就别扭，so nexus 也找不到它，自然也无法下载。<br>解决方案如下：</p>
<ul>
<li><p>增加restlet的Repository<br>管理员账户登录nexus 控制台， 增加restlet的Repository，类型为proxy<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/nexus1.png"><br>具体内容参照下图，重要 <code>Remote Storage Location</code> 设置为 <code>http://maven.restlet.com/</code><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/nexus2.png"></p>
</li>
<li><p>restlet 加入 Public repositories group<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/nexus3.png" alt="加入前"><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/nexus4.png" alt="加入后"></p>
</li>
<li><p>清除本地 Repositories<br>别忘了删除 maven 的本地 repositories 里的 restlet 文件夹。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>developEnv</category>
      </categories>
      <tags>
        <tag>nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>maven</title>
    <url>/2015/10/30/devEnv/maven/maven/</url>
    <content><![CDATA[<p>管理系统依赖<br>统一依赖的来源和版本，保持开发环境一致，避免莫名错误</p>
<p>管理项目生命周期<br>构建，编译，测试，发布，更新版本。。。。</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>前提<br>确保已经安装好了jdk，并且配置好了环境变量JAVA_HOME</p>
</li>
<li><p><a href="http://maven.apache.org/download.cgi">下载</a></p>
</li>
<li><p>解压<br>解压下载的maven到你想要的目录</p>
<pre><code>tar xzvf apache-maven-3.3.9-bin.tar.gz
</code></pre>
</li>
<li><p>环境变量<br>新增 环境变量<code>M2_HOME</code>，其值为Maven的家目录，即上步maven解压的目录；<br>修改 环境变量<code>PATH</code>， 在末尾加入 <code>:$M2_HOME/bin</code></p>
</li>
<li><p>测试</p>
<p>  mvn -v</p>
</li>
</ul>
<h2 id="setting-xml"><a href="#setting-xml" class="headerlink" title="setting.xml"></a>setting.xml</h2><p>定义Maven的全局环境信息。有2个地址：</p>
<p><code>$M2_HOME/conf/setting.xml</code> : 全局的配置<br><code>$User_HOME/.m2/setting.xml</code> : 当前用户的配置<br>当这两个文件同时存在的时候，那么对于相同的配置信息用户家目录下面的settings.xml中定义的会覆盖Maven安装目录下面的settings.xml中的定义。</p>
<p>setting.xml有点像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span><br><span class="line">   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">   xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0</span><br><span class="line">     http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line"> &lt;!-- dev --&gt;</span><br><span class="line"> &lt;profile&gt;</span><br><span class="line">     &lt;id&gt;dev&lt;/id&gt;</span><br><span class="line">     &lt;properties&gt;</span><br><span class="line">  &lt;profile.id&gt;dev&lt;/profile.id&gt;</span><br><span class="line">  &lt;packagingExcludes&gt; *.html</span><br><span class="line">  &lt;/packagingExcludes&gt;</span><br><span class="line">     &lt;/properties&gt;</span><br><span class="line">     &lt;!-- local repositories of dependencies --&gt;</span><br><span class="line">     &lt;repositories&gt;</span><br><span class="line">  &lt;repository&gt;</span><br><span class="line">      &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">      &lt;url&gt;http://IP:8081/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">      &lt;releases&gt;</span><br><span class="line">	  &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">      &lt;/releases&gt;</span><br><span class="line">      &lt;snapshots&gt;</span><br><span class="line">	  &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">      &lt;/snapshots&gt;</span><br><span class="line">  &lt;/repository&gt;</span><br><span class="line">     &lt;/repositories&gt;</span><br><span class="line">     &lt;!-- local Repositories of plugins --&gt;</span><br><span class="line">     &lt;pluginRepositories&gt;</span><br><span class="line">  &lt;pluginRepository&gt;</span><br><span class="line">    &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">    &lt;url&gt;http://IP:8081/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">    &lt;releases&gt;</span><br><span class="line">      &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">    &lt;/releases&gt;</span><br><span class="line">    &lt;snapshots&gt;</span><br><span class="line">      &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">    &lt;/snapshots&gt;</span><br><span class="line">  &lt;/pluginRepository&gt;</span><br><span class="line">     &lt;/pluginRepositories&gt;</span><br><span class="line"> &lt;/profile&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;!-- test --&gt;</span><br><span class="line"> &lt;profile&gt;</span><br><span class="line">     &lt;id&gt;test&lt;/id&gt;</span><br><span class="line">     &lt;properties&gt;</span><br><span class="line">  &lt;profile.id&gt;test&lt;/profile.id&gt;</span><br><span class="line">  &lt;packagingExcludes&gt; *.html</span><br><span class="line">  &lt;/packagingExcludes&gt;</span><br><span class="line">     &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/profile&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;!-- prod --&gt;</span><br><span class="line"> &lt;profile&gt;</span><br><span class="line">     &lt;id&gt;prod&lt;/id&gt;</span><br><span class="line">     &lt;properties&gt;</span><br><span class="line">  &lt;profile.id&gt;prod&lt;/profile.id&gt;</span><br><span class="line">  &lt;packagingExcludes&gt; *.html</span><br><span class="line">  &lt;/packagingExcludes&gt;</span><br><span class="line">     &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/profile&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 发布到nexus --&gt;</span><br><span class="line"> &lt;profile&gt;</span><br><span class="line">     &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">     &lt;properties&gt;</span><br><span class="line">  &lt;profile.id&gt;nexus&lt;/profile.id&gt;</span><br><span class="line">  &lt;!-- 打包不传递依赖 --&gt;</span><br><span class="line">  &lt;packagingExcludes&gt;WEB-INF/lib/*, assets/**, *.html&lt;/packagingExcludes&gt;</span><br><span class="line">     &lt;/properties&gt;</span><br><span class="line"> &lt;/profile&gt;</span><br><span class="line">    &lt;/profiles&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;activeProfiles&gt;</span><br><span class="line"> &lt;activeProfile&gt;dev&lt;/activeProfile&gt;</span><br><span class="line">    &lt;/activeProfiles&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- in mirrors section --&gt;</span><br><span class="line">    &lt;mirrors&gt;</span><br><span class="line"> &lt;mirror&gt;</span><br><span class="line">     &lt;id&gt;mirrorOfAll&lt;/id&gt;</span><br><span class="line">     &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">     &lt;url&gt;http://IP:8081/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line"> &lt;/mirror&gt;</span><br><span class="line">    &lt;/mirrors&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- in servers section --&gt;</span><br><span class="line">    &lt;servers&gt;</span><br><span class="line"> &lt;server&gt;</span><br><span class="line">     &lt;id&gt;snapshots&lt;/id&gt;</span><br><span class="line">     &lt;username&gt;user&lt;/username&gt;</span><br><span class="line">     &lt;password&gt;password&lt;/password&gt;</span><br><span class="line"> &lt;/server&gt;</span><br><span class="line"> &lt;server&gt;</span><br><span class="line">     &lt;id&gt;releases&lt;/id&gt;</span><br><span class="line">     &lt;username&gt;user&lt;/username&gt;</span><br><span class="line">     &lt;password&gt;password&lt;/password&gt;</span><br><span class="line"> &lt;/server&gt;</span><br><span class="line">    &lt;/servers&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>

<p><code>IP</code> <code>user</code> <code>password</code> 都是本地资源库（nexus）相关的配置。</p>
<p><a href="http://blog.csdn.net/jinshuaiwang/article/details/23686099">参考资源</a></p>
<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>maven 管理 java 工程都是使用 <code>pom.xml</code>, 它长得有点像这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;top.giveme5.base&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;gm5-base-root&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--项目的名称, Maven产生的文档用--&gt;</span><br><span class="line">    &lt;name&gt;gm5-base-root&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 项目的详细描述, Maven 产生的文档用。  当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。--&gt;</span><br><span class="line">    &lt;description&gt;giveme5-base-root&lt;/description&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- SCM：Software Configuration Management --&gt;</span><br><span class="line">    &lt;scm&gt;</span><br><span class="line"> &lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。--&gt;</span><br><span class="line"> &lt;connection&gt;scm:git:git@IP/giveme5-base/giveme5-base-root.git&lt;/connection&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读--&gt;</span><br><span class="line"> &lt;developerConnection&gt;scm:git:git@IP:giveme5-base/giveme5-base-root.git&lt;/developerConnection&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。--&gt;</span><br><span class="line"> &lt;url&gt;http://IP/giveme5-base-root&lt;/url&gt;</span><br><span class="line">    &lt;/scm&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- local repositories of dependencies --&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line"> &lt;repository&gt;</span><br><span class="line">     &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">     &lt;url&gt;http://IP:8081/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">     &lt;releases&gt;</span><br><span class="line">  &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">     &lt;/releases&gt;</span><br><span class="line">     &lt;snapshots&gt;</span><br><span class="line">  &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">     &lt;/snapshots&gt;</span><br><span class="line"> &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line">    &lt;!-- local Repositories of plugins --&gt;</span><br><span class="line">    &lt;pluginRepositories&gt;</span><br><span class="line"> &lt;pluginRepository&gt;</span><br><span class="line">   &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">   &lt;url&gt;http://IP:8081/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">   &lt;releases&gt;</span><br><span class="line">     &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">   &lt;/releases&gt;</span><br><span class="line">   &lt;snapshots&gt;</span><br><span class="line">     &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">   &lt;/snapshots&gt;</span><br><span class="line"> &lt;/pluginRepository&gt;</span><br><span class="line">    &lt;/pluginRepositories&gt;</span><br><span class="line">    &lt;distributionManagement&gt;</span><br><span class="line"> &lt;snapshotRepository&gt;</span><br><span class="line">     &lt;id&gt;snapshots&lt;/id&gt;</span><br><span class="line">     &lt;url&gt;http://IP:8081/nexus/content/repositories/snapshots/&lt;/url&gt;</span><br><span class="line"> &lt;/snapshotRepository&gt;</span><br><span class="line"> &lt;repository&gt;</span><br><span class="line">     &lt;id&gt;releases&lt;/id&gt;</span><br><span class="line">     &lt;url&gt;http://IP:8081/nexus/content/repositories/releases/&lt;/url&gt;</span><br><span class="line"> &lt;/repository&gt;</span><br><span class="line">    &lt;/distributionManagement&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 项目属性 --&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line"> &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line"> &lt;jdk.version&gt;1.8&lt;/jdk.version&gt;</span><br><span class="line"> &lt;jdbc.driver.groupId&gt;mysql&lt;/jdbc.driver.groupId&gt;</span><br><span class="line"> &lt;jdbc.driver.artifactId&gt;mysql-connector-java&lt;/jdbc.driver.artifactId&gt;</span><br><span class="line"> &lt;jdbc.driver.version&gt;$&#123;mysql-connector-java.version&#125;&lt;/jdbc.driver.version&gt;</span><br><span class="line"></span><br><span class="line"> &lt;spring-framework-bom.version&gt;4.2.1.RELEASE&lt;/spring-framework-bom.version&gt;</span><br><span class="line">   。。。</span><br><span class="line"> &lt;freemarker.version&gt;2.3.23&lt;/freemarker.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- build --&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line"> &lt;pluginManagement&gt;</span><br><span class="line">     &lt;!-- define plubins&#x27;s version and common config which will be shared with</span><br><span class="line">  all subprojects --&gt;</span><br><span class="line">     &lt;plugins&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--  based on and is a replacement for the maven-release-plugin enabling support for git-flow style releases via maven. --&gt;</span><br><span class="line">  &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;external.atlassian.jgitflow&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jgitflow-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0-m5.1&lt;/version&gt;</span><br><span class="line">      &lt;configuration&gt;</span><br><span class="line">	  &lt;flowInitContext&gt;</span><br><span class="line">	      &lt;masterBranchName&gt;master&lt;/masterBranchName&gt;</span><br><span class="line">	      &lt;developBranchName&gt;develop&lt;/developBranchName&gt;</span><br><span class="line">	      &lt;featureBranchPrefix&gt;feature-&lt;/featureBranchPrefix&gt;</span><br><span class="line">	      &lt;releaseBranchPrefix&gt;release-&lt;/releaseBranchPrefix&gt;</span><br><span class="line">	      &lt;hotfixBranchPrefix&gt;hotfix-&lt;/hotfixBranchPrefix&gt;</span><br><span class="line">	      &lt;versionTagPrefix&gt;giveme5-&lt;/versionTagPrefix&gt;</span><br><span class="line">	  &lt;/flowInitContext&gt;</span><br><span class="line">      &lt;/configuration&gt;</span><br><span class="line">  &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- compiler插件, 设定JDK版本 --&gt;</span><br><span class="line">  &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.1&lt;/version&gt;</span><br><span class="line">      &lt;configuration&gt;</span><br><span class="line">	  &lt;source&gt;$&#123;jdk.version&#125;&lt;/source&gt;</span><br><span class="line">	  &lt;target&gt;$&#123;jdk.version&#125;&lt;/target&gt;</span><br><span class="line">	  &lt;showWarnings&gt;true&lt;/showWarnings&gt;</span><br><span class="line">      &lt;/configuration&gt;</span><br><span class="line">  &lt;/plugin&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">     &lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/pluginManagement&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- dependencyManagement --&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line"> &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &lt;!-- spring --&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-framework-bom&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;$&#123;spring-framework-bom.version&#125;&lt;/version&gt;</span><br><span class="line">  &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">  &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">     ...</span><br><span class="line">     </span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>



<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li><a href="/2015/10/30/devEnv/maven/maven/#maven-war-plugin">maven-war-plugin</a></li>
</ul>
<h2 id="maven-war-plugin"><a href="#maven-war-plugin" class="headerlink" title="maven-war-plugin"></a>maven-war-plugin</h2><p>此插件多用于web工程打包时使用，多工程依赖时很好用，很好用，很好用！<a href="https://maven.apache.org/plugins/maven-war-plugin/">官网</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root 工程 pom</span><br><span class="line">  &lt;!-- war打包插件, 设定war包名称不带版本号 --&gt;</span><br><span class="line">  &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.6&lt;/version&gt;</span><br><span class="line">      &lt;configuration&gt;</span><br><span class="line">	  &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;</span><br><span class="line">	  &lt;warName&gt;$&#123;project.artifactId&#125;&lt;/warName&gt;</span><br><span class="line">      &lt;/configuration&gt;</span><br><span class="line">  &lt;/plugin&gt;</span><br></pre></td></tr></table></figure>

<p>被依赖的工程 pom</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;artifactId&gt;gm5-base-common-web&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;</span><br><span class="line">                &lt;!--  把class额外打包jar,默认：artifactId-classes.jar--&gt;</span><br><span class="line">                &lt;attachClasses&gt;true&lt;/attachClasses&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!--  把class打包jar,jar包放入WEB-INF/lib下，WEB-INF/classes下将无类文件  jrebel使用是注释掉--&gt;</span><br><span class="line">                &lt;!--&lt;archiveClasses&gt;true&lt;/archiveClasses&gt;--&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!--&lt;packagingExcludes&gt;WEB-INF/classes/conf/account.properties&lt;/packagingExcludes&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;packagingExcludes&gt;WEB-INF/lib/&lt;/packagingExcludes&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;warSourceExcludes&gt;**/conf/account.properties&lt;/warSourceExcludes&gt;--&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>

<p>最终工程 pom</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;artifactId&gt;gm5-base-security&lt;/artifactId&gt;</span><br><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;!--&lt;finalName&gt;gm5-base-security&lt;/finalName&gt;--&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;!-- 合并多个war --&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;useCache&gt;false&lt;/useCache&gt;</span><br><span class="line">                &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;</span><br><span class="line">                &lt;overlays&gt;</span><br><span class="line">                    &lt;overlay&gt;</span><br><span class="line">                        &lt;groupId&gt;top.giveme5.base&lt;/groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;gm5-base-common-web&lt;/artifactId&gt;</span><br><span class="line">                    &lt;/overlay&gt;</span><br><span class="line">                &lt;/overlays&gt;</span><br><span class="line">                &lt;dependentWarExcludes&gt;WEB-INF/lib/*&lt;/dependentWarExcludes&gt;</span><br><span class="line">                &lt;packagingExcludes&gt;WEB-INF/lib/gm5-base-common-web-*-classes.jar&lt;/packagingExcludes&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>

<h3 id="configuration-说明"><a href="#configuration-说明" class="headerlink" title="configuration 说明"></a>configuration 说明</h3><ul>
<li>failOnMissingWebXml ： 校验是否有web.xml ，默认true，没发现web.xml的话，打包失败。servlet 3.0以后 可以没有web.xml, 我使用这个特性，所以设置为false。</li>
<li>archiveClasses ： 把class打包jar,jar包放入WEB-INF&#x2F;lib下，WEB-INF&#x2F;classes下将无类文件</li>
<li>attachClasses  ： 把class额外打包jar,默认：artifactId-classes.jar，WEB-INF&#x2F;classes下仍然有类文件</li>
<li>packagingExcludes ： 复制webapp目录完成后打包时忽略target&#x2F;artifactId-version 制定 文件夹的文件， 注意 文件夹必须以 <code>/</code> 结束</li>
<li>warSourceExcludes ： 在编译周期进行完成后从src&#x2F;main&#x2F;webapp目录复制文件时忽略</li>
<li>overlays&#x2F;overlay ： 能够在目标WAR本身覆盖除了原生WAR构件以外的所有文件，并在WEB-INF&#x2F;lib目录下收集原生WAR项目的依赖， 目标war中已经存在的文件不会被覆盖。Overlays采用第一直达者优先的策略(因此，如果一个文件被某一个副本覆盖过，则它不会被另一个副本继续覆盖)。(详细)[<a href="http://jdonee.iteye.com/blog/794226]">http://jdonee.iteye.com/blog/794226]</a></li>
</ul>
<h3 id="多依赖使用"><a href="#多依赖使用" class="headerlink" title="多依赖使用"></a>多依赖使用</h3><ul>
<li><p>最终目标工程编译不需要被依赖项目<br>只需要在目标工程 pom 加入依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;top.giveme5.base&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;gm5-base-common-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;type&gt;war&lt;/type&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最终目标工程编译需要被依赖项目<br>为避免 <code>overlays</code> 同时使用，重复引入被依赖项目的类文件，如下设置：</p>
</li>
</ul>
<p>目标工程 pom </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;artifactId&gt;gm5-base-security&lt;/artifactId&gt;</span><br><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;!--&lt;finalName&gt;gm5-base-security&lt;/finalName&gt;--&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;!-- 合并多个war --&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;useCache&gt;false&lt;/useCache&gt;</span><br><span class="line">                &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;</span><br><span class="line">                &lt;overlays&gt;</span><br><span class="line">                    &lt;overlay&gt;</span><br><span class="line">                        &lt;groupId&gt;top.giveme5.base&lt;/groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;gm5-base-common-web&lt;/artifactId&gt;</span><br><span class="line">                    &lt;/overlay&gt;</span><br><span class="line">                &lt;/overlays&gt;</span><br><span class="line">                &lt;dependentWarExcludes&gt;WEB-INF/lib/*&lt;/dependentWarExcludes&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!--避免overlays重复引入--&gt;</span><br><span class="line">                &lt;packagingExcludes&gt;WEB-INF/lib/gm5-base-common-web-*-classes.jar&lt;/packagingExcludes&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- give me five --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;top.giveme5.base&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;gm5-base-common-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;top.giveme5.base&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;gm5-base-common-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;type&gt;war&lt;/type&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- compile 时依赖， 最终 package 时 使用 overlays --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;top.giveme5.base&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;gm5-base-common-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">        &lt;classifier&gt;classes&lt;/classifier&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    。。。</span><br></pre></td></tr></table></figure>


<p>被依赖工程 pom</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">    &lt;artifactId&gt;gm5-base-common-web&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;</span><br><span class="line">                    &lt;!--  把class额外打包jar,默认：artifactId-classes.jar--&gt;</span><br><span class="line">                    &lt;attachClasses&gt;true&lt;/attachClasses&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>

<p>以上是为了 <code>overlays</code>， 如果不需要 <code>overlays</code>， 可以使用 archiveClasses 简单处理。</p>
]]></content>
      <categories>
        <category>developEnv</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>1-1 测试环境- rhel7 安装</title>
    <url>/2015/11/24/linux/base/godLinux1-1/</url>
    <content><![CDATA[<h2 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h2><p>vmware workstation 10 以上<br>创建空的虚拟机，一路next，网络建议选择桥接， 注意选择好系统类型。</p>
<span id="more"></span>
<h2 id="rhel7-安装"><a href="#rhel7-安装" class="headerlink" title="rhel7 安装"></a>rhel7 安装</h2><ul>
<li><p>加载rhel7系统镜像, 启动虚拟机<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_1.jpg"></p>
</li>
<li><p>启动成功，开始安装<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/rhel.png"><br>第一项正常安装。回车， 开始安装。<br>需要时可以选择第二项，检查镜像完整性；第三项可以用来恢复系统。</p>
</li>
<li><p>选择系统语言<br>中文在最下面， 正式环境建议选择英文<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_2.jpg"></p>
</li>
<li><p>详细配置<br>rhel7的详细配置都在一个界面上， 需要把所有 <code>！</code> 图案都解决才能继续<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_3.jpg"></p>
<ol>
<li><p>software selection<br>根据自己需要选择，新手建议 最后的 <code>server with GUI</code><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_5.jpg"></p>
</li>
<li><p>kdump<br>异常日志，可以把这个关闭<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_6.jpg"></p>
</li>
<li><p>INSTALLATION DESTINATION 分区<br>可以根据需要手动分区。 虚拟机安装时 <code>+</code> 可能会出不来， <code>Done</code> 按钮确认， 重新分区，多刷几次应该能把 <code>+</code> 显示出来。<br>建议<code>/home</code> 分区 和 系统分区分开。<br>分区大小：<br><code>/boot</code>： 256M 或 512M<br><code>swap</code> ： 物理内存的1.5～2倍， 最大4G， 再大完全没意义。<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_7.jpg"><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_8.jpg"><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_9.jpg"></p>
</li>
</ol>
<p>接受 改变：<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_10.jpg"></p>
<p>所有 <code>！</code> 图案都解决， 点击 <code>Begin installtion</code> ， 开始安装<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_11.jpg"></p>
</li>
<li><p>管理员密码和一般用户<br>安装过程中，可以设置 管理员root密码和建立一个一般用户<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_14.jpg"><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_12.jpg"><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_13.jpg"></p>
</li>
<li><p>安装完成<br>安装完成，系统会自动重启，用刚刚设置的账户密码进入，第一次会要求激活<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_15.jpg"></p>
</li>
<li><p>启动网络<br>第一次似乎网络似乎是关闭的， 点击右上角 小电脑 图案，启用网络。<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_16.jpg"></p>
</li>
</ul>
<h2 id="虚拟机快照"><a href="#虚拟机快照" class="headerlink" title="虚拟机快照"></a>虚拟机快照</h2><p>为防止测试破坏， 可以建立虚拟机快照，可在虚拟机关闭的情况下做快照，一个快照大概2G大小。一旦虚拟机被破坏，可以快速恢复。<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/2015-11-24_17.jpg"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-10 RHEL7 进程管理</title>
    <url>/2015/12/07/linux/base/godLinux1-10/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="./#%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86">Linux进程管理</a></li>
<li><a href="./#screen">screen 实战</a></li>
</ul>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>程序与进程：<br>程序是静态的（文件），进程是动态的（运行的程序）。</p>
<p>进程和线程：<br>一个程序至少有一个进程,一个进程至少有一个线程.<br>进程之间内存是独立<br>线程之前内存共享 ，高并发好一些 。 安全性差一些。</p>
<span id="more"></span>

<h3 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h3><ul>
<li><p>作用： 查看进程树</p>
</li>
<li><p>用法： pstree [-p]<br>显示进程号 -p</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pstree -p | more  # | more 是将结果分页显示，参考 more 命令</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h3><ul>
<li><p>作用： 显示目录树形结构</p>
</li>
<li><p>用法： tree 目录名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">╰─$ tree /home/sam/back  | more</span><br><span class="line">/home/sam/back</span><br><span class="line">├── 1_soft</span><br><span class="line">│ ├── QIpmsg_32_121019.tar.gz</span><br><span class="line">│ ├── vmware11</span><br><span class="line">│ │ ├── key</span><br><span class="line">│ │ └── VMware-Workstation-Full-11.0.0-2305329.x86_64.bundle</span><br><span class="line">│ └── xp.iso</span><br><span class="line">└── text</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><ul>
<li>作用： 列出目前所有的正在内存当中的进程</li>
<li>用法： ps -aux # BSD的格式来显示进程 <br>       ps -ef # 是用标准的格式显示进程</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ps -aux</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root         1  0.0  0.0  36040  6028 ?        Ss   09:27   0:01 /usr/lib/systemd/systemd --swit</span><br><span class="line">root         2  0.0  0.0      0     0 ?        S    09:27   0:00 [kthreadd]</span><br><span class="line">root         3  0.0  0.0      0     0 ?        S    09:27   0:00 [ksoftirqd/0]</span><br><span class="line">root         5  0.0  0.0      0     0 ?        S&lt;   09:27   0:00 [kworker/0:0H]</span><br><span class="line">root       434  0.0  0.3  74048 31784 ?        Ss   09:27   0:00 /usr/lib/systemd/systemd-journa</span><br><span class="line">root       444  0.0  0.0  19656  1508 ?        Ss   09:27   0:00 /sbin/dmeventd</span><br><span class="line">root       452  0.0  0.0  17596   168 ?        Ss   09:27   0:00 /sbin/lvmetad</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>USER</td>
<td>运行此进程的用户名</td>
</tr>
<tr>
<td>PID</td>
<td>该 process 的号码。</td>
</tr>
<tr>
<td>%CPU</td>
<td>该 process 使用掉的 CPU资源百分比</td>
</tr>
<tr>
<td>%MEM</td>
<td>该 process 所占用的物理内存百分比</td>
</tr>
<tr>
<td>VSZ</td>
<td>该 process 使用掉的虚拟内存量 (Kbytes)</td>
</tr>
<tr>
<td>RSS</td>
<td>该 process 占用的固定的内存量 (Kbytes)</td>
</tr>
<tr>
<td>TTY</td>
<td>该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts&#x2F;0等等的，则表示为由网络连接进主机的程序。</td>
</tr>
<tr>
<td>STAT</td>
<td>该程序目前的状态，Linux进程有5种基本状态： <br> <code>R</code> :(正在运行或在运行队列中等待)；<br> <code>S</code> :该程序目前正在睡眠当中 ，但可被某些讯号 (signal) 唤醒。<br> <code>T</code> :该程序目前暂停了  <br> <code>Z</code> ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态 <br> <code>D</code> ：不可中断状态.  <br><br> <code>&lt;</code> : 高优先级的 <code>N</code> : 低优先级的 <code>s</code> : 包含子进程 <code>l</code> : 多线程 <code>+</code> : 前台程序</td>
</tr>
<tr>
<td>START</td>
<td>该 process 被触发启动的时间</td>
</tr>
<tr>
<td>TIME</td>
<td>该 process 实际使用 CPU运作的时间</td>
</tr>
<tr>
<td>COMMAND</td>
<td>该程序的实际指令</td>
</tr>
</tbody></table>
<p>  注：</p>
<ul>
<li>正常先关闭子进程，再关闭父进程；一旦父进程先关闭而子进程没关闭，则子进程变成 zombie (疆尸) 状态</li>
<li><code>ctrl-c</code> 是发送 SIGINT 信号，终止一个进程，<code>ctrl-z</code> 是发送 SIGSTOP信号，挂起一个进程</li>
</ul>
<h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><ul>
<li>作用 ：查看系统内存量</li>
<li>用法 : free ;  free [-m] #单位为M<br><code>buffers</code> ： #缓存从磁盘读出的内容<br><code>cached</code> ： #缓存需要写入磁盘的内容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">╭─sam@sam  ~  </span><br><span class="line">╰─$ free</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:       8080868    5240964    2839904     375964       1144    2930824</span><br><span class="line">-/+ buffers/cache:    2308996    5771872</span><br><span class="line">Swap:      4193276          0    4193276</span><br><span class="line">╭─sam@sam  ~  </span><br><span class="line">╰─$ free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          7891       5109       2782        367          1       2862</span><br><span class="line">-/+ buffers/cache:       2245       5645</span><br><span class="line">Swap:         4094          0       4094</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><ul>
<li>作用： 动态查看进程，统计信息区前五行是系统整体的统计信息。</li>
<li>用法： top ; top [-p] 进程号<br>默认3s刷新一次<br><code>空格</code> ：立即刷新。<br><code>q</code> ：退出<br><code>M</code> ：按内存排序<br><code>P</code> ： 按CPU排序<br><code>&lt;&gt;</code> ： 翻页</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">╭─sam@sam  ~</span><br><span class="line">╰─$ top</span><br><span class="line">  </span><br><span class="line">top - 15:44:29 up  6:17,  5 users,  load average: 0.28, 0.26, 0.31</span><br><span class="line">Tasks: 271 total,   1 running, 270 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  1.0 us,  0.9 sy,  0.0 ni, 98.1 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem:   8080868 total,  5044804 used,  3036064 free,     1144 buffers</span><br><span class="line">KiB Swap:  4193276 total,        0 used,  4193276 free.  2920332 cached Mem</span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                      </span><br><span class="line"> 4590 sam       20   0 2918736 393244  56052 S 8.333 4.866  18:32.24 QQ.exe                                                                       </span><br><span class="line"> 2499 sam       20   0   18164   9620   1848 S 4.667 0.119  11:35.91 wineserver                                                                   </span><br><span class="line"> 2523 sam       20   0 1890980 447352 115104 S 1.667 5.536  20:57.55 firefox                                                                      </span><br><span class="line"> 8299 sam       20   0  662880  62120  48428 S 1.667 0.769   0:06.35 konsole                                                                      </span><br><span class="line"> 7989 sam       20   0 1354276 265240 169776 S 1.333 3.282   2:17.21 plugin-containe                                                              </span><br><span class="line"> 1054 root      20   0  854140 226432 197212 S 1.000 2.802   4:10.21 Xorg                                                                         </span><br><span class="line"> 2245 sam       20   0 3615704 218240 104364 S 1.000 2.701   4:18.24 plasma-desktop                                                               </span><br><span class="line"> 2341 sam        9 -11  516700  13032   9456 S 1.000 0.161   0:38.15 pulseaudio                                                                   </span><br><span class="line"> 2235 sam       20   0 3115760 111524  67328 S 0.333 1.380   2:11.33 kwin                                                                         </span><br><span class="line">    1 root      20   0   36040   6028   3564 S 0.000 0.075   0:01.84 systemd                                                                      </span><br><span class="line">    2 root      20   0       0      0      0 S 0.000 0.000   0:00.00 kthreadd                                                                     </span><br><span class="line">    3 root      20   0       0      0      0 S 0.000 0.000   0:00.22 ksoftirqd/0         </span><br></pre></td></tr></table></figure>

<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><ul>
<li>前五行，系统整体的统计信息</li>
</ul>
<table>
<thead>
<tr>
<th>行数</th>
<th>内容</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>第一行</td>
<td>top - 15:44:29 up  6:17,  5 users,  load average: 0.28, 0.26, 0.31</td>
<td>第一行是任务队列信息 <br>  <code>15:44:29 up  6:17</code> : 当前时间  系统运行时间，格式为时:分 <br> <code>5 users,</code>: 当前登录用户数 <br> <code>load average: 0.28, 0.26, 0.31</code>: 系统负载，即任务队列的平均长度。 三个数值分别为  1分钟、5分钟、15分钟前到现在的平均值。</td>
</tr>
<tr>
<td>第二行</td>
<td>Tasks: 271 total,   1 running, 270 sleeping,   0 stopped,   0 zombie</td>
<td>第二行为进程信息  <br>  <code>271 total</code> : 进程总数 <br> <code>1 running</code> :正在运行的进程数 <br> <code>270 sleeping</code> : 睡眠的进程数 <br> <code>0 stopped</code> : 停止的进程数 <br> <code>0 zombie</code> : 僵尸进程数</td>
</tr>
<tr>
<td>第三行</td>
<td>%Cpu(s):  1.0 us,  0.9 sy,  0.0 ni, 98.1 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</td>
<td>第三行为CPU的信息  <br>  <code>1.0% us</code> : 系统用户进程使用CPU百分比。 不包括调高优先级的进程。 CPU%是由每个核的CPU占用律之和算出来的。如果你是4核CPU，核1，CPU使用率为100%，核2，CPU使用率为100%。 则会出会CPU 高于100%的现象，最终为200% <br> <code>0.9% sy</code> : 内核中的进程占用CPU百分比 <br> <code>0.0% ni</code> : 用户进程空间内改变过优先级的进程占用CPU百分比 <br> <code>98.1% id</code> : 空闲CPU百分比</td>
</tr>
<tr>
<td>第四行</td>
<td>KiB Mem:   8080868 total,  5044804 used,  3036064 free,     1144 buffers</td>
<td>物理内存信息（KB） <br> <code>8080868 total</code> : 物理内存总量  <br> <code>5044804 used</code> : 使用的物理内存总量  <br> <code>3036064 free</code> : 空闲内存总量  <br> <code>2920332 buff/cache</code> : 用作内核缓存的内存量。</td>
</tr>
<tr>
<td>第五行</td>
<td>KiB Swap:  4193276 total,        0 used,  4193276 free.  2920332 cached Mem</td>
<td>交换区信息（KB） <br> <code>4193276 total</code> : 交换区总量  <br> <code>0k used</code> : 使用的交换区总量  <br> <code>4193276 free</code> : 空闲交换区总量  <br> <code>2920332 avail Mem</code> : 总的可利用内存是多少</td>
</tr>
</tbody></table>
<ul>
<li>具体进程信息</li>
</ul>
<table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>PID</td>
<td>进程id</td>
</tr>
<tr>
<td>USER</td>
<td>进程所有者的用户名</td>
</tr>
<tr>
<td>NI</td>
<td>进程优先级。 <a href="./#nice_renice">nice</a>值。负值表示高优先级，正值表示低优先级</td>
</tr>
<tr>
<td>RES</td>
<td>实际使用内存大小。</td>
</tr>
<tr>
<td>S</td>
<td>进程状态。<br>  D&#x3D;不可中断的睡眠状态<br>  R&#x3D;运行<br>  S&#x3D;睡眠<br>  T&#x3D;跟踪&#x2F;停止<br>  Z&#x3D;僵尸进程</td>
</tr>
<tr>
<td>%CPU</td>
<td>上次更新到现在的CPU时间占用百分比</td>
</tr>
<tr>
<td>%MEM</td>
<td>进程使用的物理内存百分比</td>
</tr>
<tr>
<td>TIME+</td>
<td>进程使用的CPU时间总计，单位1&#x2F;100秒</td>
</tr>
<tr>
<td>COMMAND</td>
<td>命令名&#x2F;命令行</td>
</tr>
</tbody></table>
<h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><ul>
<li>作用 ： 控制（关闭）进程</li>
<li>用法 ： kill  给进程发送信号（停止进程） ； kill -9 pid； killall 服务名； pkill 服务名<br>常用信号：<br><code>1</code>  HUP   重新加载配置文件。类似重启。<br><code>2</code>  INT   和ctrl+c一样   一般用于通知前台进程组终止进程<br><code>9</code>  KILL  强行中断<br><code>19</code> STOP  和ctrl+z一样</li>
</ul>
<h3 id="nice-renice"><a href="#nice-renice" class="headerlink" title="nice  renice"></a>nice  renice</h3><ul>
<li>作用 ： nice 控制以什么优先级运行进程 。默认优先级是0；nice值 -20 ~ 19 越小优先级越高 普通用户0－19<br>renice #修改正在运行的进程的优先级</li>
<li>用法 ：  nice -n 优先级数字 进程号</li>
</ul>
<h3 id="前后台进程切换"><a href="#前后台进程切换" class="headerlink" title="前后台进程切换"></a>前后台进程切换</h3><h4 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h4><p>列出所有后台进程</p>
<h4 id="创建后台指令"><a href="#创建后台指令" class="headerlink" title="创建后台指令"></a>创建后台指令</h4><ul>
<li>nohup</li>
<li>&amp;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup &lt;command&gt; [argument…] &amp;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="fg"><a href="#fg" class="headerlink" title="fg"></a>fg</h4><p>用法： fg 后期进程序列号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# fg 1</span><br></pre></td></tr></table></figure>

<h2 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h2><p>虽然nohup很容易使用，但还是比较“简陋”的，对于简单的命令能够应付过来，对于复杂的需要人机交互的任务就麻烦了。<br><code>screen</code> 可以恢复当时状态。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>rpm或yum方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install screen</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p>启动screen</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# screen</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行业务操作<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim 1.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存状态<br>按ctrl+a+d，出现[detached] </p>
</li>
<li><p>恢复<br>查看 -ls ； 恢复 -r id号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">╭─sam@sam  ~  </span><br><span class="line">╰─$ screen -ls</span><br><span class="line">There is a screen on:</span><br><span class="line">        13033.pts-3.sam (Detached)</span><br><span class="line">1 Socket in /run/uscreens/S-sam.</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">╭─sam@sam  ~  </span><br><span class="line">╰─$ screen -r 13033</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-11~12 - 重定向和文件查找</title>
    <url>/2015/12/09/linux/base/godLinux1-11~12/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>重定向</li>
<li>管道｜</li>
<li>文件查找</li>
</ul>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><p>文件描述符:内核（kernel）利用文件描述符（file descriptor）来访问文件。文件描述符是非负整数。打开现存文件或新建文件时，内核会返回一个文件描述符。读写文件也需要使用文件描述符来指定待读写的文件。</p>
<p>linux下一切皆文件。<br>STDIN  标准输入   文件描述符为：0  如：键盘文件<br>STDOUT 标准输出   文件描述符为：1 如：屏幕终端<br>STDERR 错误输出   文件描述符为：2 如：屏幕终端</p>
<span id="more"></span>

<h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>作用： <code>&gt;</code> <code>&gt;&gt;</code> 代表输出重定向；<br>  <code>&gt;</code> 内容覆盖。<br>  <code>&gt;&gt;</code> 内容末尾追加，<br>用法： [文件描述符][<code>&gt;</code> &#x2F; <code>&gt;&gt;</code>] 目的文件</p>
<h4 id="标准输出"><a href="#标准输出" class="headerlink" title="标准输出"></a>标准输出</h4><p><code>1&gt;</code> 表示stdout标准输出，系统默认值是1， 所以 <code>1&gt;</code> 等价 <code>&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#echo 123456 | passwd --stdin sam &gt; /dev/null  #/dev/null 代表空设备文件，就是Linux中的黑洞。放多少东西都填不满。</span><br><span class="line">[root@localhost ~]#echo 123456 | passwd --stdin sam 1&gt; /dev/null</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# ls/home/  1&gt;  a.txt</span><br><span class="line">[root@localhost ~]# cat a.txt</span><br><span class="line">sam</span><br></pre></td></tr></table></figure>

<h4 id="标准错误"><a href="#标准错误" class="headerlink" title="标准错误"></a>标准错误</h4><p><code>2&gt;</code> 表示STDERR 错误输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ls/homee  2&gt;  b.txt</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# cat b.txt</span><br><span class="line">ls: cannot access/homee: No such file or directory</span><br></pre></td></tr></table></figure>

<h4 id="混合输出"><a href="#混合输出" class="headerlink" title="混合输出"></a>混合输出</h4><p><code>&amp;&gt;</code> 表示混合输出 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ls/home/  /homee  &amp;&gt; a.txt</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# cat a.txt</span><br><span class="line">ls: cannot access/homee: No such file or directory</span><br><span class="line">  </span><br><span class="line">/home/:</span><br><span class="line">rm</span><br></pre></td></tr></table></figure>
<p>还可以 <code>&amp;</code> 来表示, &amp; 表示等同于的意思</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ls/home/  /homee  &gt; d.txt 2&gt;&amp;1 #2标准错误输出等同于1标准输出</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# cat d.txt</span><br><span class="line">ls: cannot access/homee: No such file or directory</span><br><span class="line">/home/:</span><br><span class="line">rm</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# ls/home/  /homee  2&gt; d.txt &gt;&amp;2  #1标准输出等同于2标准错误输出</span><br></pre></td></tr></table></figure>

<h3 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h3><p>功能说明：读取标准输出的数据，并将其内容输入成文件。 <code>&gt;</code> 屏幕上不会同时输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ps -aux | grep vim  | tee a.txt</span><br><span class="line">root       3597 0.0  0.1 151456  5232 pts/1   S+   21:20   0:00 vim a.txt</span><br><span class="line">root       3723 0.0  0.0 112640   956 pts/0   S+   21:29   0:00 grep --color=auto vim</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# cat a.txt</span><br><span class="line">root       3597 0.0  0.1 151456  5232 pts/1   S+   21:20   0:00 vim a.txt</span><br><span class="line">root       3723 0.0  0.0 112640   956 pts/0   S+   21:29   0:00 grep --color=auto vim</span><br></pre></td></tr></table></figure>

<h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p><code>&lt;</code> <code>&lt;&lt;</code><br><code>&lt;&lt;</code>[标志] 代表以[标志]结束</p>
<p><code>wc</code> 统计</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sam:/home/sam # wc &lt; /etc/passwd</span><br><span class="line">  32   77 1754</span><br></pre></td></tr></table></figure>

<p>向a.txt 输入， 以 <code>EOF</code> 结束， <code>EOF</code> 可以替换成其他符号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat &gt; a.txt &lt;&lt;EOF</span><br><span class="line">  &gt;**********************************</span><br><span class="line">  &gt; ****  welcome to linux ****</span><br><span class="line">  &gt;**********************************</span><br><span class="line">  &gt; EOF</span><br></pre></td></tr></table></figure>

<h2 id="管道｜"><a href="#管道｜" class="headerlink" title="管道｜"></a>管道｜</h2><p>管道 ： 前一个程序的标准输出，交给后一个程序做标准输入。<br>管道符 <code>|</code> ： <code>|</code>左边程序的标准输出，交给<code>|</code>右边程序做标准输入；可以多个 <code>|</code> 链接。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ps -aux | grep vim</span><br></pre></td></tr></table></figure>

<h2 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h2><p>常用查找命令：<br><code>which</code> ： 查看可执行文件的位置， 比 <code>whereis</code>更常用<br><code>whereis</code> ：    查看可执行文件的位置 及相关文件<br><code>grep</code> ：     过滤<br><code>locate</code> ：      配合数据库缓存，快速查看文件位置，速度快，不够准确 ； 新文件<code>update</code>后才能查到<br><code>find</code> ：        实际搜寻硬盘查询文件名称</p>
<h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><ul>
<li>作用： 查看可执行文件的位置</li>
<li>用法： which COMMAND</li>
</ul>
<h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><ul>
<li>作用：  查看可执行文件的位置 及相关文件</li>
<li>用法： whereis COMMAND</li>
</ul>
<h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><ul>
<li>作用： 配合数据库缓存，快速查看文件位置 ， 新文件需要 <code>update</code>加入 数据库</li>
<li>用法：</li>
</ul>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><ul>
<li>作用： 过滤文件内容</li>
<li>用法：grep [选项]… PATTERN [FILE]<br>常用选项：<br>  <code>-v</code>:  反转<br>  <code>-i</code>:  忽略大小写<br>常用PATTERN：<br>  <code>^#</code>:   以#开头<br>  <code>#$</code>:   以#结尾<br>  <code>^$</code>:   空行</li>
<li>例子<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-v取反，查找出文件中不带nologin的行</span><br><span class="line">[root@localhost ~]# grep  -v &quot;nologin&quot;   passwd</span><br><span class="line">  </span><br><span class="line"># -i  忽略大小写进行查找</span><br><span class="line">[root@localhost ~]# grep -i &quot;rm&quot;   passwd </span><br><span class="line">  </span><br><span class="line"># ^ 过滤文件中的所有以#号开头的行</span><br><span class="line">[root@localhost ~]#grep &quot;^#&quot;  passwd </span><br><span class="line">  </span><br><span class="line"># `$` 过滤文件中的所有以%结尾的行</span><br><span class="line">[root@localhost ~]#grep &quot;%$&quot;  passwd </span><br><span class="line">  </span><br><span class="line"># ^$ 过滤文件中的空行， -n 对过滤的内容加上行号</span><br><span class="line">[root@localhost ~]#grep &quot;^$&quot;  passwd  -n  </span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="扩展：过滤真实有效的内容"><a href="#扩展：过滤真实有效的内容" class="headerlink" title="扩展：过滤真实有效的内容"></a>扩展：过滤真实有效的内容</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#grep  -v &quot;^$&quot;  /etc/ssh/sshd_config | grep  -v &quot;^#&quot;</span><br></pre></td></tr></table></figure>

<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><ul>
<li>作用： 实际搜寻硬盘查询文件名称</li>
<li>用法： find [路径…] [条件] [动作]</li>
</ul>
<h4 id="路径…"><a href="#路径…" class="headerlink" title="[路径…]"></a>[路径…]</h4><p>不输入默认是当前目录<br>可以多个目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost test]# find t1/ tt1/ -type d</span><br></pre></td></tr></table></figure>
<p><br><br></p>
<h4 id="条件"><a href="#条件" class="headerlink" title="[条件]"></a>[条件]</h4><h5 id="用户和组：-user-group"><a href="#用户和组：-user-group" class="headerlink" title="用户和组：-user　-group"></a>用户和组：-user　-group</h5><p>例：查找home目录下所有的属于sam的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# find /home/  -user &quot;sam&quot;</span><br></pre></td></tr></table></figure>

<h5 id="类型：-type"><a href="#类型：-type" class="headerlink" title="类型：-type"></a>类型：-type</h5><p><code>type</code> :  f 文件 ， d 目录 ， l 连接 ， p 管道 ，c 字符文件 ，b 块文件，s socket文件 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# find /home/ -type f</span><br><span class="line">[root@localhost ~]# find /home/ -type d</span><br></pre></td></tr></table></figure>

<h5 id="名字：-name"><a href="#名字：-name" class="headerlink" title="名字：-name"></a>名字：-name</h5><p><code>*</code> 通配符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# find /home/ -name &#x27;*user*&#x27;</span><br></pre></td></tr></table></figure>

<h5 id="大小：-size"><a href="#大小：-size" class="headerlink" title="大小：-size"></a>大小：-size</h5><p><code>+NM</code> 大于N兆   <code>-NG</code> 小于ＮGB</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# find /boot/ -size +2M</span><br></pre></td></tr></table></figure>
<h5 id="时间：-time-min"><a href="#时间：-time-min" class="headerlink" title="时间：*time | *min"></a>时间：*time | *min</h5><p>[<code>-mtime</code>  <code>-atime</code>  <code>-ctime</code> | <code>-mmin</code> <code>-amin</code> <code>-cmin</code>]   n<br><code>*time</code> 以24小时为单位， <code>*min</code>以分钟为单位;<br><code>+n</code>: 大于n， <code>n</code>：等于n， <code>-n</code>：小于n</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# date-s  2015-12-11</span><br><span class="line">Fri Dec 11 00:00:00 CST 2015</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# find /root/  -mtime +1 | grep time.txt</span><br><span class="line">/root/time.txt</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# find /root/  -mtime 2 | grep time.txt</span><br><span class="line">/root/time.txt</span><br></pre></td></tr></table></figure>
<h5 id="权限：-perm"><a href="#权限：-perm" class="headerlink" title="权限：-perm"></a>权限：-perm</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# find /boot/ -perm 755                  #等于0775权限的文件或目录</span><br><span class="line">  </span><br><span class="line">  # super auth 4   SUID  2 SGID   1  sticky</span><br><span class="line">[root@localhost ~]# find /tmp/-perm -777                  #至少有777权限的文件或目录</span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir ccc</span><br><span class="line">[root@localhost ~]# chmod 777 ccc</span><br><span class="line">[root@localhost ~]# mkdir test</span><br><span class="line">[root@localhost ~]# chmod 1777 test/</span><br><span class="line">[root@localhost ~]# touch b.sh</span><br><span class="line">[root@localhost ~]# chmod 4777 b.sh</span><br><span class="line">  </span><br><span class="line">  ## 查找：</span><br><span class="line">[root@localhost ~]# find /root/  -perm 777</span><br><span class="line">/root/ccc</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# find /root/ -perm 1777</span><br><span class="line">/root/test</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# find /root/ -perm 4777</span><br><span class="line">/root/b.sh</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# find /root/ -perm -777</span><br><span class="line">/root/ccc</span><br><span class="line">/root/test</span><br><span class="line">/root/b.sh</span><br></pre></td></tr></table></figure>

<h5 id="目录深度：-maxdepth"><a href="#目录深度：-maxdepth" class="headerlink" title="目录深度：-maxdepth"></a>目录深度：-maxdepth</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# find /boot/ -maxdepth 2              #只查找目录第二层的文件和目录</span><br></pre></td></tr></table></figure>
<h5 id="多条件组合："><a href="#多条件组合：" class="headerlink" title="多条件组合："></a>多条件组合：</h5><p><code>-a</code>  <code>-o</code>  <code>!</code>   或  <code>-and</code>  <code>-or</code> <code>-not</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#find -type f -a -perm -002</span><br><span class="line">[root@localhost ~]#find -type f -and -perm /o+w</span><br><span class="line">./b.sh</span><br><span class="line">[root@localhost ~]# find! -type f -and -perm -001</span><br></pre></td></tr></table></figure>
<h4 id="动作"><a href="#动作" class="headerlink" title="[动作]"></a>[动作]</h4><p><code>-ls</code> <code>-ok</code> <code>-exec</code> <code>-print</code> <code>-printf</code><br>常用 <code>-exec</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#find /root/test2/  -type f -exec rm &#123;&#125; \;</span><br><span class="line">[root@localhost ~]# ls test2/</span><br><span class="line">boot</span><br><span class="line">[root@localhost ~]#find /root/test2/  -type f | xargs rm -rf</span><br><span class="line">[root@localhost ~]# ls test2/</span><br><span class="line">boot</span><br><span class="line">  </span><br><span class="line">[root@localhost findresults]# find /  -user sam   -exec cp -ra &#123;&#125; /findresults/ \;</span><br></pre></td></tr></table></figure>
<p>参数解释：<br> <code>-exec</code>： 执行命令<br> <code>rm</code>： 要执行的命令<br> <code>&#123;&#125;</code>： 表示 <code>find</code> 查找出来了文件内容<br> <code>\;</code>： <code>&#123;&#125;</code> 和 <code>\;</code> 之间要有空格。 固定语法，就是以这个结尾</p>
<h4 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -name &quot;40*&quot; -a -type f | xargs  grep &quot; not found&quot;</span><br></pre></td></tr></table></figure>
<h2 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h2><h3 id="linux中ctime-mtime-atime"><a href="#linux中ctime-mtime-atime" class="headerlink" title="linux中ctime,mtime,atime"></a>linux中ctime,mtime,atime</h3><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p><code>atime</code> ：“访问时间(accesstime)”<br><code>ctime</code> ：“改变时间(changetime)”<br><code>mtime</code> ：“修改时间(modificationtime)”<br>改变和修改之间的区别在于是改文件的属性还是更改它的内容， *min类似。<br><code>chmod a-w myfile</code>  这是一个属性改变；改变的ctime<br><code>echo  aaa &gt; bajie</code> 这是一个内容修改；同时修改mtime和ctime。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# touch time.txt</span><br><span class="line">[root@localhost ~]# stat time.txt</span><br><span class="line">  File: ‘time.txt’</span><br><span class="line">  Size: 0           Blocks:0          IO Block: 4096   regular empty file</span><br><span class="line">Device: fd01h/64769d  Inode: 35698271    Links: 1</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (   0/    root)   Gid: (   0/    root)</span><br><span class="line">Access: 2015-12-0820:59:28.293035474 +0800</span><br><span class="line">Modify: 2015-12-0820:59:28.293035474 +0800</span><br><span class="line">Change: 2015-12-0820:59:28.293035474 +0800</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#chmod u+x time.txt</span><br><span class="line">[root@localhost ~]#stat time.txt</span><br><span class="line">  File: ‘time.txt’</span><br><span class="line">  Size: 0           Blocks:0          IO Block: 4096   regular empty file</span><br><span class="line">Device: fd01h/64769d  Inode: 35698271    Links: 1</span><br><span class="line">Access:(0744/-rwxr--r--)  Uid: (    0/   root)   Gid: (    0/   root)</span><br><span class="line">Access: 2015-12-0820:59:28.293035474 +0800</span><br><span class="line">Modify: 2015-12-0820:59:28.293035474 +0800</span><br><span class="line">Change: 2015-12-08 21:02:06.612034204 +0800</span><br></pre></td></tr></table></figure>
<p>可以看到，文件的ctime发生了改变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# echo &quot;aaaaaaaaaaa&quot; &gt;&gt; time.txt</span><br><span class="line">[root@localhost ~]# stat time.txt</span><br><span class="line">  File: ‘time.txt’</span><br><span class="line">  Size: 4           Blocks:8          IO Block: 4096   regular file</span><br><span class="line">Device: fd01h/64769d  Inode: 35698271    Links: 1</span><br><span class="line">access: (0744/-rwxr--r--)  Uid: (   0/    root)   Gid: (   0/    root)</span><br><span class="line">Access: 2015-12-0820:59:28.293035474 +0800</span><br><span class="line">Modify: 2015-12-08 21:03:41.775033441 +0800</span><br><span class="line">Change: 2015-12-08 21:03:41.775033441 +0800</span><br></pre></td></tr></table></figure>
<p>可以看到文件的ctime和mtime发生了改变<br>结论：无论是文件的属性还是内容发生变化，文件的ctime都会发生改变，只有文件内容发生修改的时候，文件的mtime才会发生变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat time.txt</span><br><span class="line">[root@localhost ~]# stattime.txt</span><br><span class="line">  File: ‘time.txt’</span><br><span class="line">  Size: 4           Blocks:8          IO Block: 4096   regular file</span><br><span class="line">Device: fd01h/64769d  Inode: 35698271    Links: 1</span><br><span class="line">Access: (0744/-rwxr--r--)  Uid: (   0/    root)   Gid: (   0/    root)</span><br><span class="line">Access: 2015-12-0821:06:45.223031969 +0800</span><br><span class="line">Modify: 2015-12-0821:03:41.775033441 +0800</span><br><span class="line">Change: 2015-12-0821:03:41.775033441 +0800</span><br></pre></td></tr></table></figure>
<p>可以看到文件的atime发生了改变<br>结论：只要对文件内容进行了查看，那么atime就会发生改变</p>
<h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><p>ls(1) 命令可用来列出文件的 atime、ctime和 mtime。<br>ls -lc filename         列出文件的 ctime     ll  -c<br>ls -lu filename         列出文件的 atime          ll  -u<br>ls -l filename          列出文件的 mtime     ll</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-13 Linux 磁盘管理</title>
    <url>/2015/12/14/linux/base/godLinux1-13/</url>
    <content><![CDATA[<p>磁盘管理的一般步骤：<br>添加设备 –&gt; 分区 –&gt; 格式化（创建文件系统） –&gt; 创建挂载点 –&gt; 挂载 –&gt; 修改配置文件</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>分区</li>
<li>挂载</li>
<li>卸载</li>
<li>扩展swap</li>
</ul>
<h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><p>按磁盘的大小，采用不同的方式。磁盘容量小于4T， 建议使用MBR分区；大于等于4T，采用GPT分区。</p>
<span id="more"></span>

<h3 id="MBR-fdisk"><a href="#MBR-fdisk" class="headerlink" title="MBR  fdisk"></a>MBR  fdisk</h3><p>MBR： Master boot record  ： 主引导记录<br>硬盘的0柱面、0磁头、1扇区称为主引导扇区（也叫主引导记录MBR）,总共512字节。<br>它由三个部分组成，主引导程序、硬盘分区表DPT（Disk Partition table）和分区有效标志（55AA）。</p>
<ul>
<li>第一部分是主引导程序（boot loader）占446个字节，</li>
<li>第二部分是Partition table区（分区表），即DPT，占64个字节，16*4&#x3D;64，硬盘中分区有多少以及每一分区的大小都记在其中。</li>
<li>第三部分是magic number，占2个字节，固定为55AA。<br>magic number：·结束标志字，偏移地址01FE–01FF的2个字节值为结束标志55AA,称为“魔数”（magic number）。如果该标志错误系统就不能启动。<br>linux中 使用 <code>fdisk</code> 工具进行管理。</li>
</ul>
<br> 
#### fdisk
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#fdisk -l                                  #查看设备使用状况</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">[root@localhost ~]<span class="comment">#fdisk /dev/sda</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): m</span><br><span class="line">Command action</span><br><span class="line">   a   toggle a bootable flag                                              <span class="comment">#设置启动分区</span></span><br><span class="line">   b  edit bsd disklabel</span><br><span class="line">   c  toggle the dos compatibility flag</span><br><span class="line">   d   delete a partition                                                     <span class="comment">#删除分区</span></span><br><span class="line">   g  create a new empty GPT partition table</span><br><span class="line">   G  create an IRIX (SGI) partition table</span><br><span class="line">   l  list known partition types</span><br><span class="line">   m  <span class="built_in">print</span> this menu                                                       <span class="comment">#打印帮助页面</span></span><br><span class="line">   n   adda new partition                                                  <span class="comment">#创建一个新的分区</span></span><br><span class="line">   o  create a new empty DOS partition table</span><br><span class="line">   p  <span class="built_in">print</span> the partition table                                           <span class="comment">#打印分区表</span></span><br><span class="line">   q   quit without saving changes                                   <span class="comment">#退出不保存</span></span><br><span class="line">   s  create a new empty Sun disklabel                     </span><br><span class="line">   t  change a partition<span class="string">&#x27;s system id</span></span><br><span class="line"><span class="string">   u  change display/entry units</span></span><br><span class="line"><span class="string">   v  verify the partition table</span></span><br><span class="line"><span class="string">   w   write table to disk and exit                                      #保存</span></span><br><span class="line"><span class="string">   x  extra functionality (experts only)</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Command (m for help): n                                                  #创建一个新的分区</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Partition type:</span></span><br><span class="line"><span class="string">   p  primary (2 primary, 0 extended, 2 free)                           #创建一个主分区</span></span><br><span class="line"><span class="string">   e  extended                                                                  #创建一个扩展分区</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Select (default p): e</span></span><br><span class="line"><span class="string">Partition number (3,4,default 3):                                        #指定分区号</span></span><br><span class="line"><span class="string">First sector(26208256-41943039, default 26208256):            #指定开始柱面，默认回车就可以</span></span><br><span class="line"><span class="string">Using default value26208256</span></span><br><span class="line"><span class="string">Last sector, +sectorsor +size&#123;K,M,G&#125; (26208256-41943039, default 41943039): +1G         </span></span><br><span class="line"><span class="string">#指定结束柱面，默认不指定的话是把剩下的所有空间分配给分区，等于说指定分区大小</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Partition 3 of typeExtended and of size 5 GiB is set</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Command (m for help): p                                                    #打印分区表</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Disk /dev/sda: 21.5 GB,21474836480 bytes, 41943040 sectors</span></span><br><span class="line"><span class="string">Units = sectors of 1 *512 = 512 bytes</span></span><br><span class="line"><span class="string">Sector size(logical/physical): 512 bytes / 512 bytes</span></span><br><span class="line"><span class="string">I/O size(minimum/optimal): 512 bytes / 512 bytes</span></span><br><span class="line"><span class="string">Disk label type: dos</span></span><br><span class="line"><span class="string">Disk identifier:0x000a705c</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">   Device Boot      Start         End      Blocks  Id  System</span></span><br><span class="line"><span class="string">/dev/sda1   *       2048     1026047      512000  83  Linux</span></span><br><span class="line"><span class="string">/dev/sda2         1026048    26208255   12591104   8e  Linux LVM</span></span><br><span class="line"><span class="string">/dev/sda3        26208256    36694015    5242880    5  Extended      #表明是扩展 分区</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Command (m for help): n</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Partition type:</span></span><br><span class="line"><span class="string">   p  primary (2 primary, 1 extended, 1 free)</span></span><br><span class="line"><span class="string">   l  logical (numbered from 5)                                               #创建一个逻辑分区</span></span><br><span class="line"><span class="string">Select (default p): l</span></span><br><span class="line"><span class="string">Adding logicalpartition 5</span></span><br><span class="line"><span class="string">First sector(26210304-36694015, default 26210304):</span></span><br><span class="line"><span class="string">Using default value26210304</span></span><br><span class="line"><span class="string">Last sector, +sectorsor +size&#123;K,M,G&#125; (26210304-36694015, default 36694015): +1G</span></span><br><span class="line"><span class="string">Partition 5 of typeLinux and of size 1 GiB is set</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Command (m for help): p</span></span><br><span class="line"><span class="string">Disk /dev/sda: 21.5 GB,21474836480 bytes, 41943040 sectors</span></span><br><span class="line"><span class="string">Units = sectors of 1 *512 = 512 bytes</span></span><br><span class="line"><span class="string">Sector size(logical/physical): 512 bytes / 512 bytes</span></span><br><span class="line"><span class="string">I/O size(minimum/optimal): 512 bytes / 512 bytes</span></span><br><span class="line"><span class="string">Disk label type: dos</span></span><br><span class="line"><span class="string">Disk identifier:0x000a705c</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">   Device Boot      Start         End      Blocks  Id  System</span></span><br><span class="line"><span class="string">/dev/sda1   *       2048     1026047      512000  83  Linux</span></span><br><span class="line"><span class="string">/dev/sda2         1026048    26208255   12591104   8e  Linux LVM</span></span><br><span class="line"><span class="string">/dev/sda3        26208256    36694015    5242880    5  Extended</span></span><br><span class="line"><span class="string">/dev/sda5        26210304    28307455    1048576   83  Linux</span></span><br><span class="line"><span class="string">#逻辑分区的分区号从5开始，不管之前有没有第四或者第三个分区</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Command (m for help): w                                            #保存</span></span><br><span class="line"><span class="string">The partition table hasbeen altered!</span></span><br><span class="line"><span class="string">Calling ioctl() tore-read partition table.</span></span><br><span class="line"><span class="string">WARNING: Re-reading thepartition table failed with error 16: Device or resource busy.</span></span><br><span class="line"><span class="string">The kernelstill uses the old table. The new table will be used at</span></span><br><span class="line"><span class="string">the nextreboot or after you run partprobe(8) or kpartx(8)</span></span><br><span class="line"><span class="string">Syncingdisks.</span></span><br></pre></td></tr></table></figure>

<h3 id="GPT-parted"><a href="#GPT-parted" class="headerlink" title="GPT  parted"></a>GPT  parted</h3><p>GPT，全局唯一标识分区表(GUID Partition Table)，GUID，与MBR最大4个分区表项的限制相比，GPT对分区数量没有限制，但Windows最大仅支持128个GPT分区。GPT可管理硬盘大小达到了18EB(1EB&#x3D;1024PB&#x3D;1,048,576TB)，不过NTFS格式最大仅支持256TB。</p>
<h4 id="Parted-磁盘分区工具"><a href="#Parted-磁盘分区工具" class="headerlink" title="Parted 磁盘分区工具"></a>Parted 磁盘分区工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rpm -qf `which parted`</span></span><br><span class="line">parted-3.1-20.el7.x86_64</span><br></pre></td></tr></table></figure>

<h4 id="查看parted命令的帮助信息："><a href="#查看parted命令的帮助信息：" class="headerlink" title="查看parted命令的帮助信息："></a>查看parted命令的帮助信息：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># parted --help</span></span><br><span class="line">或</span><br><span class="line">[root@localhost ~]<span class="comment"># parted</span></span><br><span class="line">GNU Parted 3.1</span><br><span class="line">Using /dev/sda</span><br><span class="line">Welcome to GNU Parted!Type <span class="string">&#x27;help&#x27;</span> to view a list of commands.</span><br><span class="line">(parted) <span class="built_in">help</span>            </span><br><span class="line">(parted) quit                      <span class="comment">#退出</span></span><br></pre></td></tr></table></figure>

<h4 id="查看所有磁盘状态"><a href="#查看所有磁盘状态" class="headerlink" title="查看所有磁盘状态"></a>查看所有磁盘状态</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#parted -l</span><br></pre></td></tr></table></figure>
<h4 id="parted对磁盘进行操作"><a href="#parted对磁盘进行操作" class="headerlink" title="parted对磁盘进行操作"></a>parted对磁盘进行操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#parted /dev/sdb</span><br><span class="line">GNU Parted 3.1</span><br><span class="line">Using /dev/sdb</span><br><span class="line">Welcome to GNU Parted!Type &#x27;help&#x27; to view a list of commands.</span><br><span class="line">  </span><br><span class="line">(parted) p                               #查看磁盘分区状态</span><br><span class="line">Error: /dev/sdb:unrecognised disk label                    </span><br><span class="line">  </span><br><span class="line">(parted) mklabel                       #指定创建分区表类型为GPT</span><br><span class="line">New disk label type? `gpt`</span><br><span class="line">  </span><br><span class="line">(parted) mkpart                  #创建分区                                              </span><br><span class="line">Partition name?  []? `mydisk1`                                             </span><br><span class="line">  </span><br><span class="line">File system type?  [ext2]?       #指定分区文件系统类型，默认就可以，因为后期对分区进行格式化的时候，同样可以指定                                              </span><br><span class="line">  </span><br><span class="line">Start?  `1`                                  #指定分区起始位置                                                          </span><br><span class="line">  </span><br><span class="line">End? `100M`                        #指定分区结束位置                                                    </span><br><span class="line">  </span><br><span class="line">(parted) `p`                        #查看磁盘分区状态</span><br><span class="line">Number  Start  End     Size    File system Name     Flags</span><br><span class="line"> 1     1049kB  99.6MB  98.6MB             mydisk1</span><br><span class="line">  </span><br><span class="line">(parted) `mkpart`                                                           </span><br><span class="line">  </span><br><span class="line">Partition name?  []? `2`                                                    </span><br><span class="line">  </span><br><span class="line">File system type?  [ext2]?                                               </span><br><span class="line">  </span><br><span class="line">Start? `100M`                                                               </span><br><span class="line">  </span><br><span class="line">End? `200M`                                                                 </span><br><span class="line">  </span><br><span class="line">(parted) `p`                                                               </span><br><span class="line">  </span><br><span class="line">Model: VMware, VMwareVirtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 21.5GB</span><br><span class="line">Sector size(logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags:</span><br><span class="line">  </span><br><span class="line">Number  Start  End     Size    File system Name     Flags</span><br><span class="line"> 1     1049kB  99.6MB  98.6MB               mydisk1</span><br><span class="line"> 2     99.6MB  200MB   101MB                2</span><br><span class="line">  </span><br><span class="line">(parted) `quit`                                                             </span><br><span class="line">  </span><br><span class="line">Information: You mayneed to update /etc/fstab.</span><br></pre></td></tr></table></figure>


<h3 id="重新获取分区表"><a href="#重新获取分区表" class="headerlink" title="重新获取分区表"></a>重新获取分区表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#partprobe /dev/sda</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ls /dev/sda*</span><br><span class="line">/dev/sda  /dev/sda1 /dev/sda2  /dev/sda3  /dev/sda5</span><br></pre></td></tr></table></figure>

<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#mkfs.ext3 /dev/sdb1　　 或mkfs -t ext3 /dev/sdb1            #RHEL5 格式化</span><br><span class="line">#mkfs.ext4 /dev/sdb1　　   或mkfs -t ext4 /dev/sdb1          #RHEL6 格式化</span><br><span class="line">mkfs.xfs  /dev/sda5           或mkfs -t xfs /dev/sda5       #RHEL7 格式化</span><br></pre></td></tr></table></figure>


<h2 id="磁盘挂载"><a href="#磁盘挂载" class="headerlink" title="磁盘挂载"></a>磁盘挂载</h2><h3 id="创建挂载点"><a href="#创建挂载点" class="headerlink" title="创建挂载点"></a>创建挂载点</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  # 新建一个目录</span><br><span class="line">[root@localhost ~]# mkdir /data</span><br></pre></td></tr></table></figure>

<h3 id="手动"><a href="#手动" class="headerlink" title="手动"></a>手动</h3><ul>
<li><p>挂载新磁盘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mount /dev/sda5 /data/</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看挂载状况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# df -h</span><br><span class="line">或</span><br><span class="line">[root@localhost ~]#mount | grep data</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="开机自动挂载"><a href="#开机自动挂载" class="headerlink" title="开机自动挂载"></a>开机自动挂载</h3><p>开机时系统会自动加载 <code>/etc/fstab</code> 文件内容, 类似执行 <code>mount -a</code> 。我们为了开机自动挂载，也是修改此文件内容。<br>在文件最后新增一行，编辑需要新挂载的磁盘。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/fstab</span><br><span class="line">/dev/sda5             /sda5                    xfs          defaults         0                   0</span><br></pre></td></tr></table></figure>

<p>各字段说明:</p>
<table>
<thead>
<tr>
<th>&#x2F;dev&#x2F;sda5</th>
<th>&#x2F;sda5</th>
<th>xfs</th>
<th>defaults</th>
<th>0</th>
<th>0</th>
</tr>
</thead>
<tbody><tr>
<td><code>挂载的分区</code></td>
<td><code>挂载点</code></td>
<td>文件系统类型</td>
<td>挂载选项</td>
<td>是否备份 fs_dump</td>
<td>是否检测 fs_pass</td>
</tr>
</tbody></table>
<p>fs_dump： 是否要使用dump命令进行备份. 0为不备份，1为要备份。<br>fs_pass： 该字段被fsck命令用来决定在启动时是否需要被扫描的文件系统的顺序，根文件系统&#x2F;对应该字段的值应该为1，其他文件系统应该为2。若该文件系统无需在启动 时扫描则设置该字段为0</p>
<h4 id="UUID开机自动挂载"><a href="#UUID开机自动挂载" class="headerlink" title="UUID开机自动挂载"></a>UUID开机自动挂载</h4><ul>
<li><p>UUID作用<br>UUID是一个标识你系统中的存储设备的字符串，其目的是帮助使用者唯一的确定系统中的所有存储设备，不管它们是什么类型的。它可以标识DVD驱动器，USB存储设备以及你系统中的硬盘设备等。</p>
</li>
<li><p>特点：<br>它是真正的唯一标志符。Linux中的许多关键功能现在开始依赖于UUID</p>
</li>
<li><p>获取设备的UUID</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# blkid | grep sda5</span><br><span class="line">/dev/sda5:UUID=&quot;db81af84-5903-4907-b407-233716641819&quot; TYPE=&quot;xfs&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动挂载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/fstab</span><br><span class="line">UUID=db81af84-5903-4907-b407-233716641819       /sda5      xfs   defaults 0 0</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="光盘开机自动挂载"><a href="#光盘开机自动挂载" class="headerlink" title="光盘开机自动挂载"></a>光盘开机自动挂载</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/fstab</span><br><span class="line">/dev/sr0                /mnt                    iso9660   defaults       0 0</span><br><span class="line">  # 或者：/dev/cdrom， /dev/sr0 = /dev/sr0</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# ll/dev/cdrom</span><br><span class="line">lrwxrwxrwx 1 root root3 Dec 10  2015 /dev/cdrom -&gt; sr0</span><br></pre></td></tr></table></figure>

<h3 id="特殊挂载方法："><a href="#特殊挂载方法：" class="headerlink" title="特殊挂载方法："></a>特殊挂载方法：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> #指定格式 </span><br><span class="line">[root@localhost ~]#mount -t xfs /dev/sda5  /sda5/</span><br><span class="line"> #挂载ios光盘</span><br><span class="line">[root@localhost ~]#mount -o loop rhel-server-7.1-x86_64-dvd   /media/</span><br><span class="line"> # </span><br><span class="line">[root@localhost ~]#mount -o remount,ro  /sda5/</span><br></pre></td></tr></table></figure>

<h2 id="磁盘卸载"><a href="#磁盘卸载" class="headerlink" title="磁盘卸载"></a>磁盘卸载</h2><p>通过 <code>挂载点</code> 或 <code>挂载的分区</code> 来卸载磁盘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#umount /dev/sda5</span><br><span class="line">[root@localhost ~]#umount /data/</span><br></pre></td></tr></table></figure>

<h3 id="无法卸载"><a href="#无法卸载" class="headerlink" title="无法卸载"></a>无法卸载</h3><p>当其他用户正在使用磁盘时， 就会出现无法卸载； 可以通过 <code>lsof</code> 或 <code>fuser</code> 找到当前使用磁盘的进程，关闭此进程，再尝试卸载。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#umount /dev/sda5</span><br><span class="line">umount: /sda5: targetis busy.</span><br><span class="line">        (In some cases useful info aboutprocesses that use</span><br><span class="line">         the device is found by lsof(8) or fuser(1))</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]#lsof /sda5/</span><br><span class="line">COMMAND  PID USER  FD   TYPE DEVICE SIZE/OFF NODENAME</span><br><span class="line">bash    3967 root cwd    DIR    8,5       6  128 /sda5</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]#kill -9 3967</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]#fuser -m -u -v /sda5/</span><br><span class="line">                     USER        PID ACCESS COMMAND</span><br><span class="line">/sda5:               root     kernel mount (root)/sda5</span><br><span class="line">                     root      36749 ..c.. (root)bash</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]#kill -9 36749</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]#umount /dev/sda5</span><br></pre></td></tr></table></figure>

<h2 id="扩展swap"><a href="#扩展swap" class="headerlink" title="扩展swap"></a>扩展swap</h2><p>当swap分区空间不够时， 可以通过以下方式扩展swap大小。</p>
<h3 id="新建swap-分区"><a href="#新建swap-分区" class="headerlink" title="新建swap 分区"></a>新建swap 分区</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> #格式化sdb1分区为swap格式</span><br><span class="line">[root@localhost ~]# mkswap /dev/sdb1</span><br><span class="line">Setting up swapspaceversion 1, size = 96252 KiB</span><br><span class="line">no label,UUID=d6e96d3b-9d74-4eda-8bdf-387754dca90e</span><br></pre></td></tr></table></figure>

<h3 id="查看虚拟内存大小"><a href="#查看虚拟内存大小" class="headerlink" title="查看虚拟内存大小"></a>查看虚拟内存大小</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#free -m</span><br><span class="line">              total        used        free      shared buff/cache   available</span><br><span class="line">Mem:           3939         517        2942           9         479        3191</span><br><span class="line">Swap:          2047           0        2047</span><br></pre></td></tr></table></figure>

<h3 id="启动swap分区"><a href="#启动swap分区" class="headerlink" title="启动swap分区"></a>启动swap分区</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#swapon /dev/sdb1</span><br></pre></td></tr></table></figure>

<h3 id="再次查看"><a href="#再次查看" class="headerlink" title="再次查看"></a>再次查看</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#free -m</span><br><span class="line">              total       used        free      shared buff/cache   available</span><br><span class="line">Mem:           3939         516        2942           9         479        3191</span><br><span class="line">Swap:          2141           0        2141</span><br></pre></td></tr></table></figure>
<h3 id="实现开机自动挂载swap分区"><a href="#实现开机自动挂载swap分区" class="headerlink" title="实现开机自动挂载swap分区"></a>实现开机自动挂载swap分区</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost~]# vim /etc/fstab</span><br><span class="line">/dev/sdb1               swap                    swap    defaults        0 0</span><br></pre></td></tr></table></figure>
<p>说明：只有重启才能生效，mount –a 无法自动扩展swap分区的。</p>
<h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#swapoff /dev/sdb1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-15 Linux RAID（Redundant Array of Independent Disks,独立磁盘冗余阵列）</title>
    <url>/2015/12/16/linux/base/godLinux1-15/</url>
    <content><![CDATA[<!-- TODO -->


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://vbird.dic.ksu.edu.tw/linux_basic/0420quota_2.php">鸟哥的Linux - RAID</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-14 Linux 文件系统</title>
    <url>/2015/12/15/linux/base/godLinux1-14/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>磁盘简介</li>
<li>文件系统架构</li>
<li>硬链接和软链接</li>
<li>xfs和ext 文件系统</li>
<li>磁盘加密</li>
</ul>
<h2 id="磁盘简介"><a href="#磁盘简介" class="headerlink" title="磁盘简介"></a>磁盘简介</h2><ul>
<li><p>windows CHS<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/cipan.png"><br>簇类似于Linux系统中的block</p>
<span id="more"></span>
</li>
<li><p>ZBR（Zoned Bit Recording）区位记录<br>Zoned-bit recording（ZBR 区位记录）是一种物理优化硬盘存储空间的方法，此方法通过将更多的扇区放到磁盘的外部磁道而获取更多存储空间。读外圈的数据快，读内圈的数据慢<br>ZBR磁盘扇区结构示意图<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/zbr.jpg"></p>
</li>
</ul>
<p>操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个”块”（block）。这种由多个扇区组成的”块”，是文件存取的最小单位。”块”的大小，最常见的是1KB，即连2个 sector组成一个 block。   4K &#x3D;8扇区</p>
<ul>
<li>查看系统块block大小</li>
</ul>
<p>RHEL6操作系统：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost~]<span class="comment"># tune2fs -l /dev/sda1  | grep size</span></span><br></pre></td></tr></table></figure>

<p>RHEL7操作系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#xfs_info /dev/sda1 | grep size</span></span><br><span class="line">meta-data=/dev/sda1              isize=256    agcount=4, agsize=32000 blks</span><br><span class="line">data     =                       bsize=4096   blocks=128000, imaxpct=25</span><br></pre></td></tr></table></figure>
<p>注意： <code>block 提高磁盘读写性能， block值越大，读写速度越快，磁盘利用率越低；block值越小，读写速度越慢，磁盘利用率越高</code></p>
<h2 id="文件系统架构"><a href="#文件系统架构" class="headerlink" title="文件系统架构"></a>文件系统架构</h2><p>Linux文件系统由三部分组成 ：文件名，inode，block（真正存数据）<br><code>inode</code> ：文件数据都储存在”块”中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode，中文译名为”索引节点”。</p>
<h3 id="inode"><a href="#inode" class="headerlink" title="inode"></a>inode</h3><h4 id="inode的内容"><a href="#inode的内容" class="headerlink" title="inode的内容"></a>inode的内容</h4><p>inode包含文件的元信息，具体来说有以下内容：</p>
<ul>
<li>文件的字节数</li>
<li>文件拥有者的User ID</li>
<li>文件的Group ID</li>
<li>文件的读、写、执行权限</li>
<li>文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。</li>
<li>链接数，即有多少文件名指向这个inode</li>
<li>文件数据block的位置</li>
</ul>
<h4 id="查看inode信息"><a href="#查看inode信息" class="headerlink" title="查看inode信息"></a>查看inode信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#stat a.txt</span></span><br><span class="line">  File: ‘a.txt’</span><br><span class="line">  Size: 0           Blocks:0          IO Block: 4096   regular empty file</span><br><span class="line">Device: fd01h/64769d  Inode: 34660829    Links: 1</span><br><span class="line">Access:(0644/-rw-r--r--)  Uid: (    0/   root)   Gid: (    0/   root)</span><br><span class="line">Access: 2015-12-1021:47:49.130938012 +0800</span><br><span class="line">Modify: 2015-12-1021:47:49.130938012 +0800</span><br><span class="line">Change: 2015-12-1021:47:49.130938012 +0800</span><br></pre></td></tr></table></figure>

<h4 id="inode的大小"><a href="#inode的大小" class="headerlink" title="inode的大小"></a>inode的大小</h4><p>inode也会消耗硬盘空间，所以硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。</p>
<p>查看每个硬盘分区的inode总数和已经使用的数量，可以使用df命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># df -i</span></span><br><span class="line">Filesystem              Inodes  IUsed   IFree IUse% Mounted on</span><br><span class="line">/dev/mapper/rhel-root 10485760131410 10354350    2% /</span><br><span class="line">devtmpfs                501712    397  501315    1% /dev</span><br><span class="line">tmpfs                   504204     6   504198    1% /dev/shm</span><br><span class="line">tmpfs                   504204    511  503693    1% /run</span><br><span class="line">tmpfs                   504204     13  504191    1% /sys/fs/cgroup</span><br><span class="line">/dev/sr0                     0      0       0     - /mnt</span><br><span class="line">/dev/sda1               512000    327  511673    1% /boot</span><br></pre></td></tr></table></figure>

<h4 id="查看文件的inode号"><a href="#查看文件的inode号" class="headerlink" title="查看文件的inode号"></a>查看文件的inode号</h4><p>使用ls-i命令，可以看到文件名对应的inode号码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ls -i a.txt</span><br><span class="line">34660829 a.txt</span><br></pre></td></tr></table></figure>

<p>查看目录的inode号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">╰─$ ll -di back </span><br><span class="line">951045 drwxr-xr-x 3 sam <span class="built_in">users</span> 32 12月  1 15:20 back</span><br></pre></td></tr></table></figure>
<h2 id="硬链接和软链接"><a href="#硬链接和软链接" class="headerlink" title="硬链接和软链接"></a>硬链接和软链接</h2><h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><p>语法 ： ln 源文件 目标文件<br>特点 ：</p>
<ul>
<li>相链接文件的inode相同</li>
<li>硬链接不支持目录， </li>
<li>硬链接不支持跨分区创建</li>
<li>源文件被删，不影响链接文件的正常使用</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># touch jjys</span></span><br><span class="line">  </span><br><span class="line">[root@localhost ~]<span class="comment"># ln jjysdl.txt</span></span><br><span class="line">  </span><br><span class="line">[root@localhost ~]<span class="comment"># ll -i  jjys dl.txt  #inode 相同</span></span><br><span class="line">34660830 -rw-r--r-- 2 rootroot 10 Dec 10 22:06 dl.txt</span><br><span class="line">34660830 -rw-r--r-- 2 rootroot 10 Dec 10 22:06 jjys</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]<span class="comment"># ln  wusheng/ fengchen</span></span><br><span class="line"><span class="built_in">ln</span>: ‘wusheng/’: hard <span class="built_in">link</span> not allowed <span class="keyword">for</span> directory <span class="comment">#硬链接不支持目录</span></span><br><span class="line">  </span><br><span class="line">[root@localhost ~]<span class="comment"># ln/boot/grub2/grub.cfg fengchen</span></span><br><span class="line"><span class="built_in">ln</span>: failed to create hard <span class="built_in">link</span>‘fengchen’ =&gt; ‘/boot/grub2/grub.cfg’: Invalid cross-device <span class="built_in">link</span>  <span class="comment">#硬链接不支持跨分区创建</span></span><br><span class="line">  </span><br><span class="line">[root@localhost ~]<span class="comment"># rm -rfjjys</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat dl.txt #源文件被删，不影响链接文件的正常使用</span></span><br><span class="line">aaaa</span><br><span class="line">bbbb</span><br></pre></td></tr></table></figure>

<h3 id="软链接："><a href="#软链接：" class="headerlink" title="软链接："></a>软链接：</h3><p>语法 ： ln -s 源文件 目标文件<br>特点 ：相当于windows中的快捷方式</p>
<ul>
<li>相链接文件的inode不相同</li>
<li>软链接支持目录， </li>
<li>软链接支持跨分区创建</li>
<li>源文件被删，影响链接文件的正常使用</li>
</ul>
<h4 id="跨分区创建软链接"><a href="#跨分区创建软链接" class="headerlink" title="跨分区创建软链接"></a>跨分区创建软链接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ln  -s /boot/grub2/grub.cfg   fengye</span><br></pre></td></tr></table></figure>

<h4 id="目录创建软链接"><a href="#目录创建软链接" class="headerlink" title="目录创建软链接"></a>目录创建软链接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ln -s /boot/  yanmou</span><br></pre></td></tr></table></figure>

<p>例：查看目录的链接数， <code>总数 -2 </code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir guoran</span><br><span class="line">[root@localhost ~]# ll -d guoran/</span><br><span class="line">drwxr-xr-x 2 root root 6 Dec 10 22:20 guoran/</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# ll -di guoran/</span><br><span class="line">20039176 drwxr-xr-x 2 root root 6 Dec 10 22:20 guoran/</span><br><span class="line">  </span><br><span class="line">[root@localhost guoran]# ll -di .</span><br><span class="line">20039176 drwxr-xr-x `2` rootroot 6 Dec 10 22:20 .</span><br><span class="line">  </span><br><span class="line">[root@localhost guoran]# mkdir zhengfa</span><br><span class="line">[root@localhost guoran]# cd zhengfa/</span><br><span class="line">[root@localhost zhengfa]# ll -di ..</span><br><span class="line">20039176 drwxr-xr-x `3` rootroot 20 Dec 10 22:22 ..</span><br></pre></td></tr></table></figure>

<h4 id="实例：inode数被用光"><a href="#实例：inode数被用光" class="headerlink" title="实例：inode数被用光"></a>实例：inode数被用光</h4><p>web服务器中小文件很多，导致硬盘有空间，但无法创建文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# df -i</span><br><span class="line">Filesystem              Inodes  IUsed   IFree IUse% Mounted on</span><br><span class="line">/dev/mapper/rhel-root 10485760131421 10354339    2% /</span><br><span class="line">devtmpfs                501712    397  501315    1% /dev</span><br><span class="line">tmpfs                   504204      6  504198    1% /dev/shm</span><br><span class="line">tmpfs                   504204    511  503693    1% /run</span><br><span class="line">tmpfs                   504204     13  504191    1% /sys/fs/cgroup</span><br><span class="line">/dev/sr0                     0      0       0     - /mnt</span><br><span class="line">/dev/sda1               512000    327  511673    1% /boot</span><br></pre></td></tr></table></figure>

<h2 id="xfs-和-ext-文件系统"><a href="#xfs-和-ext-文件系统" class="headerlink" title="xfs 和 ext 文件系统"></a>xfs 和 ext 文件系统</h2><p>xfs更适合大数据</p>
<ul>
<li><p>数据完整性<br>采用XFS文件系统，当意想不到的宕机发生后，由于文件系统开启了日志功能，所以磁盘上的文件不再会意外宕机而遭到破坏，不论目前文件系统上存储的文件与数据有多少，文件系统都可以根据所记录的日志在很短的时间内迅速恢复磁盘文件内容</p>
</li>
<li><p>传输特性<br>xfs文件系统采用优化算法，日志记录对整体文件操作影响非常小。xfs查询与分配存储空间非常快。xfs文件系统能连续提供快速的反应时间。</p>
</li>
<li><p>可扩展性<br>xfs是一个全64-bit的文件系统，它可以支持上百万T字节的存储空间。对特大文件及小尺寸文件的支持都表现出众，支持特大数量的目录。最大可支持的文件大小为 9EB，最大文系统尺寸为18EB</p>
</li>
<li><p>传输带宽<br>XFS 能以接近裸设备I&#x2F;O的性能存储数据。在单个文件系统的测试中，其吞吐量最高可达7GB每秒，对单个文件的读写操作，其吞吐量可达4GB每秒。</p>
</li>
</ul>
<h2 id="磁盘加密"><a href="#磁盘加密" class="headerlink" title="磁盘加密"></a>磁盘加密</h2><p>LUKS(Linux Unified KeySetup)为Linux硬盘加密提供了一种标准。<code>cryptsetup</code> 这个工具提供实现。</p>
<h3 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h3><p>例如fdisk</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#fdisk /dev/sda</span></span><br><span class="line">[root@localhost ~]<span class="comment">#partprobe /dev/sda</span></span><br></pre></td></tr></table></figure>

<h3 id="安装加密工具："><a href="#安装加密工具：" class="headerlink" title="安装加密工具："></a>安装加密工具：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rpm-qf `which cryptsetup`</span></span><br><span class="line">cryptsetup-1.6.6-3.el7.x86_64</span><br></pre></td></tr></table></figure>
<h3 id="设置加密分区"><a href="#设置加密分区" class="headerlink" title="设置加密分区"></a>设置加密分区</h3><p>设置密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cryptsetup luksFormat /dev/sda3</span></span><br><span class="line">WARNING!</span><br><span class="line">=============</span><br><span class="line">This will overwritedata on /dev/sda3 irrevocably.</span><br><span class="line">Are you sure? (Typeuppercase <span class="built_in">yes</span>): YES</span><br><span class="line">Enter passphrase:  </span><br><span class="line">Verify passphrase:  </span><br></pre></td></tr></table></figure>

<h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cryptsetup luksOpen  /dev/sda3  disk1</span></span><br><span class="line">Enter passphrase <span class="keyword">for</span> /dev/sda3:</span><br><span class="line">[root@localhost ~]<span class="comment"># ll /dev/mapper/disk1</span></span><br><span class="line">lrwxrwxrwx 1 root root7 Dec 11 20:54 /dev/mapper/disk1 -&gt; ../dm-2</span><br></pre></td></tr></table></figure>

<h3 id="格式化加密分区"><a href="#格式化加密分区" class="headerlink" title="格式化加密分区"></a>格式化加密分区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkfs.xfs  /dev/mapper/disk1</span></span><br></pre></td></tr></table></figure>

<h3 id="创建挂载点"><a href="#创建挂载点" class="headerlink" title="创建挂载点"></a>创建挂载点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /sda3</span></span><br></pre></td></tr></table></figure>

<h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mount /dev/mapper/disk1  /sda3/</span></span><br><span class="line">  </span><br><span class="line">[root@localhost ~]<span class="comment"># df -h</span></span><br><span class="line">Filesystem             Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/rhel-root   10G 3.3G  6.8G  33% /</span><br><span class="line">devtmpfs               2.0G     0 2.0G   0% /dev</span><br><span class="line">tmpfs                  2.0G  140K 2.0G   1% /dev/shm</span><br><span class="line">tmpfs                  2.0G  8.9M 2.0G   1% /run</span><br><span class="line">tmpfs                  2.0G     0 2.0G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sr0               3.7G  3.7G    0 100% /mnt</span><br><span class="line">/dev/sda1              497M  107M 391M  22% /boot</span><br><span class="line">/dev/mapper/disk1     1019M  33M  987M   4% /sda3</span><br></pre></td></tr></table></figure>

<h3 id="关闭加密分区"><a href="#关闭加密分区" class="headerlink" title="关闭加密分区"></a>关闭加密分区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># umount /sda3/</span></span><br><span class="line">  </span><br><span class="line">[root@localhost ~]<span class="comment"># cryptsetup luksClose /dev/mapper/disk1</span></span><br><span class="line">  </span><br><span class="line">[root@localhost ~]<span class="comment"># mount /dev/sda3 /sda3/</span></span><br><span class="line">mount: unknownfilesystem <span class="built_in">type</span> <span class="string">&#x27;crypto_LUKS&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-16 Linux LVM （Logical Volume Manager 逻辑卷管理）</title>
    <url>/2015/12/17/linux/base/godLinux1-16/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://vbird.dic.ksu.edu.tw/linux_basic/0420quota_3.php">鸟哥的Linux - LVM</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-17 系统存储管理器和磁盘配额</title>
    <url>/2015/12/18/linux/base/godLinux1-17/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>系统存储管理器</li>
<li>磁盘配额</li>
</ul>
<!-- TODO -->

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://vbird.dic.ksu.edu.tw/linux_basic/0420quota_1.php">鸟哥的Linux</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-19~20 源码编译Linux内核, Linux内核模块操作</title>
    <url>/2015/12/22/linux/base/godLinux1-19~20/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li><a href="./%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91Linux%E5%86%85%E6%A0%B8">源码编译Linux内核</a></li>
<li><a href="./Linux%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E6%93%8D%E4%BD%9C">Linux内核模块操作</a></li>
</ul>
<h2 id="源码编译Linux内核"><a href="#源码编译Linux内核" class="headerlink" title="源码编译Linux内核"></a>源码编译Linux内核</h2><p>源码编译的执行步骤：</p>
<ul>
<li><p><a href="./%E7%A1%AE%E8%AE%A4%E7%BC%96%E8%AF%91%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9D%A1%E4%BB%B6">确认编译软件的基本条件</a><br>有足够的空间（建议独立一个20G分区）；安装make ，gcc， gcc-c++ ，ncurses-devel，openssl-devel开发工具和库工具等等 。</p>
</li>
<li><p><a href="./%E4%B8%8B%E8%BD%BD%E7%9B%B8%E5%BA%94%E7%9A%84%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E5%8C%85">到www.kernel.org上下载相应的内核源码包</a><br>如 linux-4.3.3.tar.xz</p>
</li>
<li><p><a href="./%E8%A7%A3%E5%8E%8B%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E5%8C%85">解压内核源码包</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xz  -d linux-4.3.3.tar.xz</span><br><span class="line">tar xf linux-4.3.3.tar   <span class="comment">#解压文件比较多就不加-v了</span></span><br></pre></td></tr></table></figure></li>
<li><p><a href="./%E9%85%8D%E7%BD%AE%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E5%8F%82%E6%95%B0">配置内核编译参数</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure></li>
<li><p><a href="./%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8">编译内核</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make bzImage -j n <span class="comment">#生成内核</span></span><br><span class="line">make modules -j n <span class="comment">#生成新内核的驱动模块</span></span><br></pre></td></tr></table></figure>
<p>n为 电脑CPU核心数-2 左右合适, 为了确保没有错误，可以用 <code>echo $?</code> 命令来查看是否有错误，如果是0的话，就表示没有错误或警告了</p>
</li>
<li><p><a href="./%E5%AE%89%E8%A3%85%E7%BC%96%E8%AF%91%E5%A5%BD%E7%9A%84%E5%86%85%E6%A0%B8%E4%B8%8E%E6%A8%A1%E5%9D%97">安装编译好的内核与模块</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make modules_install <span class="comment">#安装模块</span></span><br><span class="line">make install <span class="comment">#安装新编译的系统内核</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="./%E6%9F%A5%E7%9C%8B%E6%88%96%E4%BF%AE%E6%94%B9GRUB%E8%8F%9C%E5%8D%95">查看或修改GRUB菜单</a><br>为了确认你是不是真的把内核安装好了</p>
<span id="more"></span></li>
</ul>
<h3 id="确认编译软件的基本条件"><a href="#确认编译软件的基本条件" class="headerlink" title="确认编译软件的基本条件"></a>确认编译软件的基本条件</h3><ul>
<li>增加独立分区<br>fdisk， mkfs.xfs, mkdir, mount</li>
<li>确认开发工具和库工具<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa | grep make #类似可以检查 gcc 等</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="下载相应的内核源码包"><a href="#下载相应的内核源码包" class="headerlink" title="下载相应的内核源码包"></a>下载相应的内核源码包</h3><p><code>以下开始所有操作都在新分区下操作(本实验环境是/sdb1)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.3.3.tar.xz</span><br></pre></td></tr></table></figure>
<p><code>linux-4.3.3.tar.xz</code> 看实际情况。</p>
<h3 id="解压内核源码包"><a href="#解压内核源码包" class="headerlink" title="解压内核源码包"></a>解压内核源码包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost sdb1]<span class="comment">#xz -d linux-4.3.3.tar.xz</span></span><br><span class="line">[root@localhost sdb1]<span class="comment">#tar -xf linux-4.3.3.tar</span></span><br><span class="line">[root@localhost sdb1]<span class="comment">#du -sh linux-4.3.3 #查看总的源代码为694M</span></span><br><span class="line">694M linux-4.3.3</span><br></pre></td></tr></table></figure>
<h3 id="配置内核编译参数"><a href="#配置内核编译参数" class="headerlink" title="配置内核编译参数"></a>配置内核编译参数</h3><p>保险起见，可以在现有系统的config基础上做修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost linux-4.3.3]#cp /boot/config-3.10.0-229.el7.x86_64 /sdb1/linux-4.3.3/.config # 现有系统的config</span><br><span class="line">[root@localhost linux-4.3.3]# make menuconfig #通过一个图形界面，来配置内核的参数</span><br></pre></td></tr></table></figure>
<p>扩展：可以在首页上输入 <code>\</code> ,出现检索页面。<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/menuconfig1.png"><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/menuconfig2.png"><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/menuconfig3.png"></p>
<h3 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost linux-4.3.3]<span class="comment">#make bzImage -j n #生成内核 ，此内核是经过压缩的内核.这里需要一段时间，取决于你的系统性能。</span></span><br><span class="line">  </span><br><span class="line">[root@localhost linux-4.3.3]<span class="comment"># make modules -j n 生成新内核的驱动模块</span></span><br></pre></td></tr></table></figure>
<p>n为 电脑CPU核心数-2 左右合适</p>
<h3 id="安装编译好的内核与模块"><a href="#安装编译好的内核与模块" class="headerlink" title="安装编译好的内核与模块"></a>安装编译好的内核与模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost linux-4.3.3]<span class="comment">#make modules_install #安装模块, 就是把编译好的modules拷贝到/lib/modules/相应的内核目录里面 </span></span><br><span class="line">  </span><br><span class="line">[root@localhost linux-4.3.3]<span class="comment">#make install #安装新编译的系统内核</span></span><br></pre></td></tr></table></figure>

<h3 id="查看或修改GRUB菜单"><a href="#查看或修改GRUB菜单" class="headerlink" title="查看或修改GRUB菜单"></a>查看或修改GRUB菜单</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>

<ul>
<li><p>设置系统启动时默认的等待时间<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/kernel1.png"></p>
</li>
<li><p>配置好的系统内核<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/kernel2.png"></p>
</li>
<li><p>配置默认启动的内核方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/default/grub</span><br><span class="line">#设置默认启动项，按menuentry顺序。比如要默认从第四个菜单项启动，数字改为3，若#改为 saved，#则默认为上次启动项。</span><br><span class="line">GRUB_DEFAULT=saved</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]#grub2-mkconfig #重新生成内核参数</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用新内核启动系统后，查看内核版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# uname –r</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Linux内核模块操作"><a href="#Linux内核模块操作" class="headerlink" title="Linux内核模块操作"></a>Linux内核模块操作</h2><p>模块的作用：把具体功能封装好的程序。存放内核模块的目路径： <code>/lib/modules/版本/kernel</code></p>
<h3 id="插入模块"><a href="#插入模块" class="headerlink" title="插入模块"></a>插入模块</h3><p>模块也有依赖关系，一般使用 <code>modprobe</code> 来安装模块； 如确定无依赖关系，可以用 <code>insmod</code> 命令安装。新添加一个模块后，需要 <code>depmod</code> 通知系统 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost fat]<span class="comment"># cd /lib/modules/4.2.4/kernel/fs/fat</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">#依赖安装</span></span><br><span class="line">[root@localhost fat]<span class="comment"># modprobe vfat</span></span><br><span class="line">[root@localhost fat]<span class="comment"># lsmod |grep fat</span></span><br><span class="line">vfat                   20480  0</span><br><span class="line">fat                    69632  1 vfat</span><br><span class="line"></span><br><span class="line"> <span class="comment">#非依赖安装</span></span><br><span class="line">[root@localhost fat]<span class="comment">#insmod fat.ko</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#安装后通知系统</span></span><br><span class="line">[root@localhost 4.2.4]<span class="comment"># depmod</span></span><br></pre></td></tr></table></figure>


<h3 id="查看当前系统中加载的模块-lsmod"><a href="#查看当前系统中加载的模块-lsmod" class="headerlink" title="查看当前系统中加载的模块 lsmod"></a>查看当前系统中加载的模块 lsmod</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost fat]#lsmod  | grep fat</span><br><span class="line">fat                    69632  0</span><br></pre></td></tr></table></figure>

<h3 id="查看模块信息-modinfo"><a href="#查看模块信息-modinfo" class="headerlink" title="查看模块信息 modinfo"></a>查看模块信息 modinfo</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost fat]#modinfo vfat</span><br><span class="line">filename:       /lib/modules/4.2.4/kernel/fs/fat/vfat.ko</span><br><span class="line">author:         Gordon Chaffee</span><br><span class="line">description:    VFAT filesystem support</span><br><span class="line">license:        GPL</span><br><span class="line">alias:          fs-vfat</span><br><span class="line">srcversion:     BEF7BA1F8972367DD650AA0</span><br><span class="line">depends:        fat</span><br><span class="line">intree:         Y</span><br><span class="line">vermagic:       4.2.4 SMP mod_unload modversions</span><br><span class="line">signer:         Build time autogenerated kernel key</span><br><span class="line">sig_key:       D3:5F:6B:F2:8E:BB:94:CD:66:3F:5C:D7:C6:F5:17:68:E9:30:25:B7</span><br><span class="line">sig_hashalgo:   sha256</span><br></pre></td></tr></table></figure>

<h3 id="删除模块-modprobe-rmmod"><a href="#删除模块-modprobe-rmmod" class="headerlink" title="删除模块 modprobe rmmod"></a>删除模块 modprobe rmmod</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost fat]# rmmod fat</span><br><span class="line">  </span><br><span class="line">[root@localhost fat]# modprobe -r vfat</span><br></pre></td></tr></table></figure>

<h3 id="开机自动加载模块"><a href="#开机自动加载模块" class="headerlink" title="开机自动加载模块"></a>开机自动加载模块</h3><p>可以在<code>/etc/rc.local</code>执行命令加载模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim/etc/rc.local</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># THIS FILE IS ADDEDFOR COMPATIBILITY PURPOSES</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is highlyadvisable to create own systemd services or udev rules</span></span><br><span class="line"><span class="comment"># to run scripts duringboot instead of using this file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In contrast to previousversions due to parallel execution during boot</span></span><br><span class="line"><span class="comment"># this script will NOTbe run after all other services.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please note that youmust run &#x27;chmod +x /etc/rc.d/rc.local&#x27; to ensure</span></span><br><span class="line"><span class="comment"># that this script willbe executed during boot.</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">touch</span> /var/lock/subsys/local</span><br><span class="line">modprobe fat <span class="comment">#开机自动加载fat模块</span></span><br></pre></td></tr></table></figure>




























]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-18-计划任务和日志管理</title>
    <url>/2015/12/18/linux/base/godLinux1-18/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li><a href="./#at">at 定制单次执行的计划任务</a></li>
<li><a href="./#crontab">cron 定制周期性计划任务</a></li>
<li><a href="./#%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%8A%A8%E5%BC%80%E6%9C%BA">配置服务器自动开关机</a></li>
<li><a href="./#%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E6%96%B9%E5%BC%8F">Linux系统日志记录规律</a></li>
<li><a href="./#%E8%87%AA%E5%AE%9A%E4%B9%89Linux%E6%97%A5%E5%BF%97">自定义日志记录方式</a></li>
<li><a href="./#%E8%BF%9C%E7%A8%8B%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1">配置远程收集日志服务器</a></li>
</ul>
<span id="more"></span>

<h2 id="at"><a href="#at" class="headerlink" title="at"></a>at</h2><ul>
<li>作用： 定制单次执行的计划任务</li>
<li>语法： at $时间</li>
</ul>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p>服务 <code>atd</code> 必须开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#systemctl status atd # 查看 atd 状态</span></span><br><span class="line">[root@localhost ~]<span class="comment">#systemctl restart atd #重启atd服务</span></span><br><span class="line">[root@localhost ~]<span class="comment">#systemctl enable atd #设置atd服务开机自动启动</span></span><br></pre></td></tr></table></figure>

<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># at 20:39</span></span><br><span class="line">at&gt; <span class="built_in">echo</span> `<span class="built_in">date</span>`  &gt; /root/date.txt      <span class="comment">#输入要执行的命令</span></span><br><span class="line">at&gt; &lt;EOT&gt;                              <span class="comment">#按ctrl+D结束</span></span><br><span class="line">job 1 at Thu Dec 17 20:39:00 2015</span><br></pre></td></tr></table></figure>
<p>也可以这样写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># at 20:00 2015-12-18</span></span><br><span class="line">[root@localhost ~]<span class="comment"># at now + 10min</span></span><br></pre></td></tr></table></figure>

<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# at -l</span><br></pre></td></tr></table></figure>

<p>创建成功的at计划任务会在这个目录下成生一个可执行的脚本文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll /var/spool/at/*</span></span><br><span class="line">-rwx------  1 root  root   4325 Dec 17 20:43 /var/spool/at/a000020170ddb0</span><br></pre></td></tr></table></figure>

<h3 id="at任务删除："><a href="#at任务删除：" class="headerlink" title="at任务删除："></a>at任务删除：</h3><p>atrm  at序列号( at -l 查看)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#atrm 3</span><br></pre></td></tr></table></figure>

<h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><p>定制周期性计划任务</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>crontab [-u username] [-e &#x2F; -l &#x2F; -r] </p>
<ul>
<li>-u username : 指定用户， 默认当前用户</li>
<li>-e : edit 编辑，新增</li>
<li>-l : list 显示</li>
<li>-r ：删除</li>
</ul>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>crond服务已启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#systemctl status crond # 查看</span></span><br><span class="line">crond.service - CommandScheduler</span><br><span class="line">   Loaded: loaded(/usr/lib/systemd/system/crond.service; enabled)</span><br><span class="line">   Active: active (running) since Thu2015-12-17 20:24:06 CST; 30min ago</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]<span class="comment">#systemctl restart crond        #启动</span></span><br><span class="line">[root@localhost ~]<span class="comment">#systemctl enable crond         #设置开机自动启动</span></span><br></pre></td></tr></table></figure>

<h3 id="新建-x2F-编辑"><a href="#新建-x2F-编辑" class="headerlink" title="新建&#x2F;编辑"></a>新建&#x2F;编辑</h3><p><code>crontab –e</code> 后编辑， vi环境</p>
<ul>
<li><p>语法<br>格式：分 时 日 月 星 谁做后面的事情 命令<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/cron.png"></p>
</li>
<li><p>取值范围<br>分：0－59<br>小时：0－23<br>日：1－31<br>月：1－12<br>周：0－7   0 7 都是周日</p>
</li>
</ul>
<p>取值为 <code>*</code> 时表示该单位无限制<br>取值为 <code>a-b</code> 时表示从第 a 到第 b 这段时间内要执行<br>取值为 <code>*/n</code> 时表示每 n 个时间间隔执行一次<br>取值为 <code>a, b, c,...</code> 表示第 a, b, c,… 时间要执行</p>
<ul>
<li>例<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> #每月9,18,22号这几天的凌晨1点1分，执行一个备份脚本</span><br><span class="line">1 1 9,18,22 *  * ./backup.sh</span><br><span class="line">  </span><br><span class="line"> #每月9-22号这几天的凌晨1点1分，执行一个备份脚本</span><br><span class="line">1 1 9-22 * *    ./backup.sh</span><br><span class="line"> </span><br><span class="line"> #每5分钟，执行一次</span><br><span class="line">*/5  * *  *  *  ./backup.sh</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="系统级别的计划任务，"><a href="#系统级别的计划任务，" class="headerlink" title="系统级别的计划任务，"></a>系统级别的计划任务，</h3><p>需要执行的命令和脚本都放在这里：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ls /etc/cron.*</span></span><br><span class="line"></span><br><span class="line">/etc/cron.hourly   /etc/cron.daily   /etc/cron.weekly    /etc/cron.monthly</span><br></pre></td></tr></table></figure>

<h3 id="anacron"><a href="#anacron" class="headerlink" title="anacron"></a>anacron</h3><p>cron用控制循环执行例行性工作。如果我要设定机器每早8点进行备份用服务。除非我机器保证在8点这个时间点不会关机，如果关机了，cron中的脚本，在下次开机将不会被执行。</p>
<p>anacron并没有取代cron的意思，anacron用于，机器重启后，会侦测停机期间，有没有cron没有执行的计划任务，如果有，会立即，执行一下没有执行的任务。</p>
<h2 id="服务器自动开机"><a href="#服务器自动开机" class="headerlink" title="服务器自动开机"></a>服务器自动开机</h2><p>通过BIOS设置，可以实现定时开机。</p>
<ul>
<li>开机后出现主板画面是按Delete这个键，部分品牌机可能按F2，F1， 进入BIOS设置。</li>
<li>Power Management Setup，就进入电源管理设置。</li>
<li>Wake Up Event Setup （如果没有，代表不支持自动开机）</li>
<li>Resume By RTC Alarm， 将Disabied 更改为Enabled，然后继续回车确定。然后再继续设置时间点和日期。<br>假如你需要每天都定时开机，就选择Every Day，，你如果想要在每天6:45开机，就通过数字键输入06：45:00，最后，一般按F10 进行保存，重启电脑后生效！<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/resumertc.png"></li>
</ul>
<h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><h3 id="常用的系统日志"><a href="#常用的系统日志" class="headerlink" title="常用的系统日志"></a>常用的系统日志</h3><p>下列为常用的系统日志，无特殊说明的可以按文本方式查看。</p>
<ul>
<li>核心启动日志:            &#x2F;var&#x2F;log&#x2F;dmesg</li>
<li>系统报错或重启服务等日志:  &#x2F;var&#x2F;log&#x2F;messages</li>
<li>邮件系统日志:            &#x2F;var&#x2F;log&#x2F;maillog</li>
<li>cron(定制任务日志)日志:   &#x2F;var&#x2F;log&#x2F;cron   #计划日志执行成功与否，在这个文件中看</li>
<li>验证系统用户登录          &#x2F;var&#x2F;log&#x2F;secure </li>
<li>记录所有的登入和登出:      &#x2F;var&#x2F;log&#x2F;wtmp<br><code>last</code> 命令查看<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># last</span></span><br><span class="line">wtmp begins Thu Dec 1721:44:40 2015</span><br></pre></td></tr></table></figure></li>
<li>记录每個用戶最后的登入信息: &#x2F;var&#x2F;log&#x2F;lastlog<br><code>lastlog</code> 命令查看<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># lastlog</span></span><br><span class="line">Username         Port     From             Latest</span><br><span class="line">root             pts/2   192.168.1.101    Thu Dec 1721:00:38 +0800 2015</span><br></pre></td></tr></table></figure></li>
<li>记录错误的登入尝试:        &#x2F;var&#x2F;log&#x2F;btmp<br><code>lastb</code> 命令查看<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#lastb</span></span><br><span class="line">mk       ssh:notty    192.168.1.69     Thu Dec 17 21:48 - 21:48  (00:00)   </span><br><span class="line">mk       ssh:notty    192.168.1.69     Thu Dec 17 21:48 - 21:48  (00:00)   </span><br></pre></td></tr></table></figure>
注 <code>如果btmp文件特别大，说明有人在暴力破解你的服务器</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll -h /var/log/btmp</span></span><br><span class="line">-rw-------. 1 root utmp1.2K Dec 17 21:48 /var/log/btmp</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="日志记录方式"><a href="#日志记录方式" class="headerlink" title="日志记录方式"></a>日志记录方式</h3><p>Linux的日志记录方式： 先分类，然后每个类中再分级别<br><br></p>
<h4 id="Linux日志分类"><a href="#Linux日志分类" class="headerlink" title="Linux日志分类"></a>Linux日志分类</h4><p>主要7种日志分类(FACILITY):</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>authpriv</code></td>
<td>安全认证相关</td>
</tr>
<tr>
<td><code>cron</code></td>
<td>at和cron定时相关</td>
</tr>
<tr>
<td><code>daemon</code></td>
<td>后台进程相关</td>
</tr>
<tr>
<td><code>kern</code></td>
<td>内核产生</td>
</tr>
<tr>
<td><code>lpr</code></td>
<td>打印系统产生</td>
</tr>
<tr>
<td><code>mail</code></td>
<td>邮件系统相关</td>
</tr>
<tr>
<td><code>syslog</code></td>
<td>日志服务本身</td>
</tr>
<tr>
<td><code>news</code></td>
<td>新闻系统  （和BBS差不多，新闻组）</td>
</tr>
<tr>
<td><code>uucp</code></td>
<td>uucp系统产生 。Unix-to-Unix Copy(UNIX至UNIX的拷贝)，Unix系统的一项功能，允许计算机之间以存储-转发方式交换e-mail和消息。在Internet兴起之前是Unix系统之间连网的主要方式。</td>
</tr>
<tr>
<td><code>local0到local7</code></td>
<td>共8个类型，系统保留的：8个系统日志类型，给其它程序使用。或用户 自定义用</td>
</tr>
<tr>
<td><br></td>
<td></td>
</tr>
</tbody></table>
<h4 id="linux日志级别"><a href="#linux日志级别" class="headerlink" title="linux日志级别"></a>linux日志级别</h4><p>8个日志级别(PRIOROTY)：以下排列，由轻到重</p>
<table>
<thead>
<tr>
<th>级别(PRIOROTY)</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>debug</code></td>
<td>排错信息。开发人</td>
</tr>
<tr>
<td><code>info</code></td>
<td>正常信息</td>
</tr>
<tr>
<td><code>notice</code></td>
<td>稍微要注意的</td>
</tr>
<tr>
<td><code>warn</code></td>
<td>警告</td>
</tr>
<tr>
<td><code>err(error)</code></td>
<td>错误</td>
</tr>
<tr>
<td><code>crit(critical)</code></td>
<td>关键的错误</td>
</tr>
<tr>
<td><code>alert</code></td>
<td>警报警惕</td>
</tr>
<tr>
<td><code>emerg(emergency)</code></td>
<td>紧急，突发事件</td>
</tr>
</tbody></table>
<p><br><br></p>
<h3 id="日志服务管理"><a href="#日志服务管理" class="headerlink" title="日志服务管理"></a>日志服务管理</h3><br>
#### linux 日志配置文件

<table>
<thead>
<tr>
<th>系统</th>
<th>服务名称</th>
<th>配置文件</th>
</tr>
</thead>
<tbody><tr>
<td>RHEL5</td>
<td>syslog</td>
<td>&#x2F;etc&#x2F;syslog.conf</td>
</tr>
<tr>
<td>RHEL6</td>
<td>rsyslog</td>
<td>&#x2F;etc&#x2F;rsyslog.conf</td>
</tr>
<tr>
<td>RHEL7</td>
<td>rsyslog</td>
<td>&#x2F;etc&#x2F;rsyslog.conf</td>
</tr>
</tbody></table>
<h4 id="配置文件内容摘要"><a href="#配置文件内容摘要" class="headerlink" title="配置文件内容摘要"></a>配置文件内容摘要</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">46 <span class="comment">#### RULES ####</span></span><br><span class="line">47 </span><br><span class="line">48 <span class="comment"># Log all kernel messages to the console.</span></span><br><span class="line">49 <span class="comment"># Logging much else clutters up the screen.</span></span><br><span class="line">50 <span class="comment">#kern.*                                                 /dev/console</span></span><br><span class="line">51 </span><br><span class="line">52 <span class="comment"># Log anything (except mail) of level info or higher.</span></span><br><span class="line">53 <span class="comment"># Don&#x27;t log private authentication messages!</span></span><br><span class="line">54 *.info;mail.none;authpriv.none;cron.none                /var/log/messages</span><br><span class="line">55 </span><br><span class="line">56 <span class="comment"># The authpriv file has restricted access.</span></span><br><span class="line">57 authpriv.*                                              /var/log/secure</span><br><span class="line">58 </span><br><span class="line">59 <span class="comment"># Log all the mail messages in one place.</span></span><br><span class="line">60 mail.*                                                  -/var/log/maillog</span><br><span class="line">61 </span><br><span class="line">62 </span><br><span class="line">63 <span class="comment"># Log cron stuff</span></span><br><span class="line">64 cron.*                                                  /var/log/cron</span><br><span class="line">65 </span><br><span class="line">66 <span class="comment"># Everybody gets emergency messages</span></span><br><span class="line">67 *.emerg                                                 :omusrmsg:*</span><br><span class="line">68 </span><br><span class="line">69 <span class="comment"># Save news errors of level crit and higher in a special file.</span></span><br><span class="line">70 uucp,news.crit                                          /var/log/spooler</span><br><span class="line">71 </span><br><span class="line">72 <span class="comment"># Save boot messages also to boot.log</span></span><br><span class="line">73 local7.*                                                /var/log/boot.log</span><br></pre></td></tr></table></figure>
<p>说明：<br> <code>kern.*</code> : 内核类型的所级别日志<br> <code>*.info;mail.none;news.none;authpriv.none;cron.none</code> : 由于 mail, news, authpriv, cron 等类别产生的讯息较多，因此在 &#x2F;var&#x2F;log&#x2F;messages 里面不记录这些项目。除此其他讯息都写入&#x2F;var&#x2F;log&#x2F;messages 中。所以messages 文件很重要<br> <code>authpriv.*</code> : 认证方面的讯息均写入 &#x2F;var&#x2F;log&#x2F;secure 档案；<br> <code>mail.* -/var/log/maillog </code> : 邮件方面的讯息则均写入 &#x2F;var&#x2F;log&#x2F;maillog 档案； 减号<code>-</code>是干嘛用的？由于邮件所产生的讯息比较多，因此我们希望邮件产生的讯息先储存在速度较快的内存中 (buffer) ，等到数据量够大了才一次性的将所有数据都填入磁盘内，这样将有利于减少对磁盘读写的次数，减少IO读写开销。另外，由于讯息是暂存在内存内，因此若不正常关机导致登录信息未写入到文档中，可能会造成部分数据的遗失。<br> <code>cron.*</code> : 例行性工作排程均写入 &#x2F;var&#x2F;log&#x2F;cron 档案；<br> <code>local7.*</code> : 将本机开机时应该显示到屏幕的讯息写入到 &#x2F;var&#x2F;log&#x2F;boot.log 档案中；</p>
<br>
#### 规则：
`.none` : 该类型所有的等级不记录
`. ` ：代表『比后面还要高的等级都被记录下来』的意思，例如： mail.info 代表只要是 mail 类型的信息，而且该信息等级高于 info (包括 info 本身)时，就会被记录下来的意思。
`.=`  ：代表所需要的等级就是后面接的等级而已， 其他的都不要！
`.!`  ：代表不等于，亦即是除了该等级外的其他等级都记录。

<p>举例：<br><code>cron.none</code>   对于cron类型日志不记录任何信息<br><code>cron.=err</code>   对于cron类型日志只记录err级别的信息<br><code>cron.err</code>    对于cron类型日志记录大于err级别的信息<br><code>cron.!err</code>   对于cron类型日志不记录err级别的信息，其他级别都记录。<br> <br></p>
<h4 id="记录日志的位置："><a href="#记录日志的位置：" class="headerlink" title="记录日志的位置："></a>记录日志的位置：</h4><ul>
<li>日志的相对路径：通常就是放在 &#x2F;var&#x2F;log中</li>
<li>存在远程日志服务器上</li>
<li>有时日志会直接弹出在屏幕上。类似于wall命令。</li>
</ul>
<h3 id="自定义Linux日志"><a href="#自定义Linux日志" class="headerlink" title="自定义Linux日志"></a>自定义Linux日志</h3><p>以sshd服务为例，说明自定义的日志</p>
<ul>
<li><p>自定义local0日志<br>local7 已经被系统定义为boot日志，需要使用未被使用的分类</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/rsyslog.conf</span></span><br><span class="line">local0.*                                                /var/log/sshd.log</span><br><span class="line">[root@localhost ~]<span class="comment">#systemctl restart rsyslog.service</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置sshd服务的配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/ssh/sshd_config</span><br><span class="line">SyslogFacility local0</span><br><span class="line">[root@localhost ~]#systemctl restart sshd</span><br><span class="line">[root@localhost ~]# ls /var/log/sshd.log</span><br><span class="line">/var/log/sshd.log</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# cat !$</span><br><span class="line">cat /var/log/sshd.log</span><br><span class="line">Dec 17 22:18:38localhost sshd[35876]: Server listening on 0.0.0.0 port 22.</span><br><span class="line">Dec 17 22:18:38localhost sshd[35876]: Server listening on :: port 22.</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="日志回滚"><a href="#日志回滚" class="headerlink" title="日志回滚"></a>日志回滚</h3><p>日志回滚 logrotate（日志回滚过程： 创建新文件、改名旧文件。）</p>
<ul>
<li><p>配置文件：<code>/etc/logrotate.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1 # see &quot;man logrotate&quot; for details</span><br><span class="line"> 2 # rotate log files weekly</span><br><span class="line"> 3 weekly</span><br><span class="line"> 4 </span><br><span class="line"> 5 # keep 4 weeks worth of backlogs</span><br><span class="line"> 6 rotate 4</span><br><span class="line"> 7 </span><br><span class="line"> 8 # create new (empty) log files after rotating old ones</span><br><span class="line"> 9 create</span><br><span class="line">10 </span><br><span class="line">11 # use date as a suffix of the rotated file</span><br><span class="line">12 dateext</span><br><span class="line">13 </span><br><span class="line">14 # uncomment this if you want your log files compressed</span><br><span class="line">15 #compress</span><br><span class="line">16 </span><br><span class="line">17 # RPM packages drop log rotation information into this directory</span><br><span class="line">18 include /etc/logrotate.d</span><br><span class="line">19 </span><br><span class="line">20 # no packages own wtmp and btmp -- we&#x27;ll rotate them here</span><br><span class="line">21 /var/log/wtmp &#123;</span><br><span class="line">22     monthly</span><br><span class="line">23     create 0664 root utmp</span><br><span class="line">24         minsize 1M</span><br><span class="line">25     rotate 1</span><br><span class="line">26 &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局规则：<br><code>weekly</code>     &lt;&#x3D;&#x3D;预设每个礼拜对日志档进行一次 rotate 的工作<br> <code>rotate  4</code> &lt;&#x3D;&#x3D;保留几个日志文档呢？预设是保留四个！<br> <code>create</code>    &lt;&#x3D;&#x3D; 回滚日志后，创建一个新的空文件来存储新的数据。</p>
</li>
<li><p>具体规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/log/wtmp &#123;</span><br><span class="line">    monthly</span><br><span class="line">    create 0664 root utmp</span><br><span class="line">        minsize 1M</span><br><span class="line">    rotate 1</span><br></pre></td></tr></table></figure>
<p>说明：<br><code>/var/log/wtmp</code> { &lt;&#x3D;&#x3D;仅针对 &#x2F;var&#x2F;log&#x2F;wtmp 所设定的参数<br><code>monthly</code> &lt;&#x3D;&#x3D;每个月一次，取代每周！<br><code>minsize 1M</code> &lt;&#x3D;&#x3D;档案容量一定要超过 1M 后才进行rotate (略过时间参数)<br><code>create 0664 root utmp</code> &lt;&#x3D;&#x3D;设定新建文件的权限 、所有者、用户组<br><code>rotate 1</code> &lt;&#x3D;&#x3D;仅保留一个，亦即仅有 wtmp.1 保留而已。 }</p>
</li>
</ul>
<h3 id="远程日志服务"><a href="#远程日志服务" class="headerlink" title="远程日志服务"></a>远程日志服务</h3><p>配置远程日志服务器，实现日志集中管理：</p>
<ul>
<li><p>配置SERVER端（接收端）<br>打开reception配置，日志为了准确，所以启动的是TCP链接。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/rsyslog.conf</span><br><span class="line">  </span><br><span class="line">将：</span><br><span class="line">  </span><br><span class="line"># Provides UDP syslog reception</span><br><span class="line">#$ModLoad imudp</span><br><span class="line">#$UDPServerRun 514</span><br><span class="line">  </span><br><span class="line"># Provides TCP syslog reception</span><br><span class="line">#$ModLoad imtcp</span><br><span class="line">#$InputTCPServerRun 514</span><br><span class="line">  </span><br><span class="line">改为：</span><br><span class="line">  </span><br><span class="line"># Provides UDP syslog reception</span><br><span class="line">#$ModLoad imudp</span><br><span class="line">#$UDPServerRun 514</span><br><span class="line">  </span><br><span class="line"># Provides TCP syslog reception</span><br><span class="line">$ModLoad imtcp</span><br><span class="line">$InputTCPServerRun 514</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">#重启服务</span><br><span class="line">[root@localhost ~]#systemctl restart rsyslog.service</span><br><span class="line">  </span><br><span class="line">#检查端口</span><br><span class="line">[root@localhost ~]#netstat -anptu | grep 514</span><br><span class="line">tcp        0     0 0.0.0.0:514       0.0.0.0:*               LISTEN      36217/rsyslogd</span><br><span class="line">tcp6       0      0 :::514               :::*                  LISTEN      36217/rsyslogd</span><br></pre></td></tr></table></figure>

</li>
<li><p>配置CLIENT端（发送端）<br>打开远程服务配置, 端口跟随服务器配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xuegod69 ~]<span class="comment">#vim  /etc/rsyslog.conf</span></span><br><span class="line">  </span><br><span class="line">将</span><br><span class="line">  </span><br><span class="line"><span class="comment"># remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional</span></span><br><span class="line"><span class="comment">#*.* @@remote-host:514</span></span><br><span class="line"><span class="comment"># ### end of the forwarding rule ###</span></span><br><span class="line">  </span><br><span class="line">改为：</span><br><span class="line">  </span><br><span class="line"><span class="comment"># remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional</span></span><br><span class="line">*.* @@你自己远程服务器IP:514</span><br><span class="line"><span class="comment"># ### end of the forwarding rule ###</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">[root@xuegod69 ~]<span class="comment">#systemctl restart rsyslog.service</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="wall命令介绍："><a href="#wall命令介绍：" class="headerlink" title="wall命令介绍："></a>wall命令介绍：</h4><pre><code>   wall -- send a message to everybody’sterminal.
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#wall Today is nice day!!!</span><br><span class="line">wall Today is nicedayvim /etc/rsyslog.conf !</span><br><span class="line">Broadcast message fromroot@localhost.localdomain (pts/0) (Thu Dec 17 22:10:28 2015):</span><br><span class="line">Today is nice dayvim/etc/rsyslog.conf !</span><br></pre></td></tr></table></figure>

<p>这样所有登录Linux的虚端的用户都会收到这个信息。</p>
<h4 id="如何防止日志被黑客删除呢"><a href="#如何防止日志被黑客删除呢" class="headerlink" title="如何防止日志被黑客删除呢"></a>如何防止日志被黑客删除呢</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#chattr +a /var/log/sshd.log</span><br><span class="line">[root@localhost ~]#lsattr /var/log/sshd.log</span><br><span class="line">-----a----------/var/log/sshd.log</span><br></pre></td></tr></table></figure>
<p>加入了这个属性后，你的 &#x2F;var&#x2F;log&#x2F;messages 登录档从此就仅能被增加，而不能被删除，直到 root 以『 chattr -a &#x2F;var&#x2F;log&#x2F;messages 』取消这个 a 的参数后，才能被删除移！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-21 RHEL7网络管理</title>
    <url>/2015/12/23/linux/base/godLinux1-21/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>OSI七层模型和TCP&#x2F;IP四层模型<br>网络相关协议<br>TCP三次握手和四次挥手<br>网络管理相关命令<br>tcpdump和wireshark抓包</p>
<span id="more"></span>

<h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p><img src="http://7xklqw.com1.z0.glb.clouddn.com/OSI&TcpIp.png"></p>
<h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><p>TCP&#x2F;IP协议<br>TCP&#x2F;IP协议是一个协议簇。里面包括很多协议的</p>
<p>例如：<br>超文本传输协议(HTTP):万维网的基本协议.<br>文件传输ftp (TFTP简单文件传输协议):   搭建无人值守安装服务器<br>远程登录(Telnet)<br>网络管理(SNMP简单网络管理协议)<br>TCP TransmissionControl Protocol，传输控制协议）是面向连接的协议，<br>UDP UDP（User Data Protocol，用户数据报协议）非连接的协议<br>Internet协议(IP)<br>Internet控制信息协议(ICMP)<br>地址解析协议(ARP)<br>反向地址解析协议(RARP)</p>
<p>TCP和UDP区别<br>1.基于连接与无连接；<br>2.对系统资源的要求（TCP较多，UDP少）；<br>3.UDP程序结构较简单；<br>4.tcp流模式与udp数据报模式 ；</p>
<h2 id="TCP三次握手和四次挥手"><a href="#TCP三次握手和四次挥手" class="headerlink" title="TCP三次握手和四次挥手"></a>TCP三次握手和四次挥手</h2><p><img src="http://7xklqw.com1.z0.glb.clouddn.com/3hands.png"><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/4hands.png"></p>
<h2 id="网络管理相关命令"><a href="#网络管理相关命令" class="headerlink" title="网络管理相关命令"></a>网络管理相关命令</h2><h3 id="mii-tool"><a href="#mii-tool" class="headerlink" title="mii-tool"></a>mii-tool</h3><ul>
<li>作用：查看网卡物理连接是否正常</li>
<li>语法：mii-tool 网卡名<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#mii-tool eno18345712</span></span><br><span class="line">eno18345712: negotiated1000baseT-FD flow-control, <span class="built_in">link</span> ok</span><br><span class="line">[root@localhost~]<span class="comment"># mii-tool eno18345712</span></span><br><span class="line">eno18345712:no <span class="built_in">link</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="ethtool"><a href="#ethtool" class="headerlink" title="ethtool"></a>ethtool</h3><ul>
<li>作用：查询及设置网卡参数</li>
<li>语法：ethtool 网卡名</li>
</ul>
<h3 id="mii-tool-1"><a href="#mii-tool-1" class="headerlink" title="mii-tool"></a>mii-tool</h3><ul>
<li>作用：查看网卡物理连接是否正常</li>
<li>语法：mii-tool 网卡名<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#mii-tool eno18345712</span></span><br><span class="line">eno18345712: negotiated1000baseT-FD flow-control, <span class="built_in">link</span> ok</span><br><span class="line">[root@localhost~]<span class="comment"># mii-tool eno18345712</span></span><br><span class="line">eno18345712:no <span class="built_in">link</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="配置网络和IP地址"><a href="#配置网络和IP地址" class="headerlink" title="配置网络和IP地址"></a>配置网络和IP地址</h3><h4 id="方法一：nmtui"><a href="#方法一：nmtui" class="headerlink" title="方法一：nmtui"></a>方法一：nmtui</h4><p>图形界面</p>
<ul>
<li><p>开启NetworkManager<br>此服务不开启，则无法通过nmtui工具配置网络,在RHEL7中增强了NetworkManager服务功能，弱化了network的功能，RHEL7中要确定NetworkManager服务是开启的状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl restart NetworkManager</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl enable NetworkManager</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>网卡的名称<br><code>[root@localhost ~]#ifconfig -a</code></p>
</li>
<li><p>nmtui 图形操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#nmtui</span><br></pre></td></tr></table></figure>
<p><img src="http://7xklqw.com1.z0.glb.clouddn.com/nmtui1.png"><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/nmtui2.png"></p>
</li>
</ul>
<h4 id="方法二：修改网卡配置文件"><a href="#方法二：修改网卡配置文件" class="headerlink" title="方法二：修改网卡配置文件"></a>方法二：修改网卡配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-eno18345712 #ifcfg-eno18345712 看服务器的实际名称</span></span><br><span class="line">TYPE=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;none&quot;</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;eno18345712&quot;</span></span><br><span class="line">UUID=<span class="string">&quot;2f532aa0-e1cf-4fa4-8379-86c911727689&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;eno18345712&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span>                                                     <span class="comment">#开启网卡</span></span><br><span class="line">IPADDR=<span class="string">&quot;192.168.1.68&quot;</span></span><br><span class="line">PREFIX=<span class="string">&quot;24&quot;</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.1.1&quot;</span></span><br><span class="line">DNS1=<span class="string">&quot;8.8.8.8&quot;</span></span><br><span class="line">IPV6_PEERDNS=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_PEERROUTES=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_PRIVACY=<span class="string">&quot;no&quot;</span></span><br></pre></td></tr></table></figure>
<p>注：<br>BOOTPROTO&#x3D;static   静态IP<br>BOOTPROTO&#x3D;dhcp   动态IP<br>BOOTPROTO&#x3D;none   无（不指定）</p>
<h3 id="修改主机名-hostname"><a href="#修改主机名-hostname" class="headerlink" title="修改主机名 hostname"></a>修改主机名 hostname</h3><ul>
<li>作用：修改主机名<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/hostname</span><br><span class="line">[root@localhost ~]# hostname</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="配置hosts"><a href="#配置hosts" class="headerlink" title="配置hosts"></a>配置hosts</h3><ul>
<li>作用：配置IP与主机名（域名）的对应<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/hosts</span></span><br><span class="line">    127.0.0.1   localhost localhost.localdomain localhost4localhost4.localdomain4</span><br><span class="line">    ::1         localhost localhost.localdomainlocalhost6 localhost6.localdomain6</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h3><ul>
<li>作用：配置DNS<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/resolv.conf</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="域名解析顺序"><a href="#域名解析顺序" class="headerlink" title="域名解析顺序"></a>域名解析顺序</h3><ul>
<li>作用：配置域名解析顺序，优先解析hosts还是解析DNS<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/nsswitch.conf</span></span><br><span class="line">  </span><br><span class="line">查找以下内容</span><br><span class="line"><span class="comment">#hosts:     db files nisplus nis dns</span></span><br><span class="line">hosts:      files dns <span class="comment">#根据需要修改files dns的位置</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="配置服务的端口号"><a href="#配置服务的端口号" class="headerlink" title="配置服务的端口号"></a>配置服务的端口号</h3><ul>
<li>作用：可以编辑查看常用端口对应的名字。iptables或netstat要把端口解析成协议名时，都需要使用到这个文件。另外xinetd服务管理一些小服务时，也会使用到此文件来查询对应的小服务端口号。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/services</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="路由信息-route"><a href="#路由信息-route" class="headerlink" title="路由信息 route"></a>路由信息 route</h3><ul>
<li><p>查看默认网关</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG   100    0       0 eno16777736</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U    100    0        0 eno16777736</span><br><span class="line">192.168.2.0     0.0.0.0         255.255.255.0   U    100    0        0 eno33554984</span><br></pre></td></tr></table></figure>

<p>说明：<br>route命令输出的路由表字段含义如下：<br>Destination 目标<br>  The destination networkor destination host. 目标网络或目标主机。<br><br>Gateway 网关<br>  The gateway address or’*’ if none set. 网关地址，如果没有就显示星号或4个0。<br><br>Genmask 网络掩码<br>  The  netmask for  the  destination net; ‘255.255.255.255’ for a<br>  host destination and’0.0.0.0’ for the default route.</p>
</li>
<li><p>添加&#x2F;删除路由条目：<br>增加 (add) 与删除 (del) 路由的相关参数：<br>  <code>-net</code>    ：表示后面接的路由为一个网域；<br>  <code>-host</code>  ：表示后面接的为连接到单部主机的路由；<br>  <code>netmask</code> ：与网域有关，可以设定 netmask 决定网域的大小；<br>  <code>dev</code>    ：如果只是要指定由那一块网路卡连线出去，则使用这个设定，后面接 eth0 等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# route add -net 192.168.2.0 netmask 255.255.255.0 dev eno33554984</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# route del -net 192.168.2.0 netmask 255.255.255.0</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="网络连接状态-netstat"><a href="#网络连接状态-netstat" class="headerlink" title="网络连接状态 netstat"></a>网络连接状态 netstat</h3><ul>
<li>作用： 网络连接状态</li>
<li>用法： netstat [参数]<br>参数：<br>-a,–all<br>-n,–numeric              don’t resolvenames<br>-p,–programs<br>-t  显示tcp连接<br>-u  显示udp连接<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# netstat -anptu</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="网络诊断-ping"><a href="#网络诊断-ping" class="headerlink" title="网络诊断 ping"></a>网络诊断 ping</h3><ul>
<li>作用： 帮助分析和判定网络故障</li>
<li>用法： ping [参数]  IP<br>参数：<br>-c 数目 在发送指定数目的包后停止。<br>-i 秒数 设定间隔几秒送一个网络封包给一台机器，预设值是一秒送一次。<br>-I  指定接口，指定从哪个端口（网卡）出去。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ping -I eno16777736 192.168.1.1</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="网络流量-Iptraf"><a href="#网络流量-Iptraf" class="headerlink" title="网络流量 Iptraf"></a>网络流量 Iptraf</h3><ul>
<li>作用： 监控网络流量<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -ivh /mnt/Packages/iptraf-ng-1.1.4-4.el7.x86_64.rpm</span><br><span class="line">[root@localhost ~]# iptraf-ng</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="检查IP地址-arping"><a href="#检查IP地址-arping" class="headerlink" title="检查IP地址 arping"></a>检查IP地址 arping</h3><ul>
<li>作用：查看IP地址是否有冲突<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# arping -I eno16777736 192.168.1.1</span><br><span class="line">ARPING 192.168.1.1 from192.168.1.68 eno16777736</span><br><span class="line">Unicast reply from 192.168.1.1[FC:D7:33:24:88:24]  1.102ms</span><br><span class="line">Unicast reply from 192.168.1.1[FC:D7:33:24:88:24]  0.801ms</span><br><span class="line">Unicast reply from 192.168.1.1[FC:D7:33:24:88:24]  0.741ms</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h2><h3 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h3><ul>
<li>作用： dump the traffic on a network，根据使用者的定义对网络上的数据包进行截获的包分析工具</li>
<li>用法： tcpdump<br>port  端口号<br>-c  抓几个包<br>-n  不解析端口号为协议名<br>-S    Print absolute, rather than relative, TCP  sequence numbers.<br>-i   指定网卡<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#tcpdump  port 22 -c  3  -n -S  -i  eno16777736</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h3><p>作用： 网络封包分析软件。网络封包分析软件的功能是撷取网络封包，并尽可能显示出最为详细的网络封包资料。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum -y install wireshark</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#创建一个保存抓包信息的文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># touch  a.txt</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#执行抓包命令</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tshark -w a.txt -i eno16777736</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分析</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tshark -r a.txt</span></span><br></pre></td></tr></table></figure>
<p><code>-r</code> 指定要读取的包文件<br><code>-V</code> 将包尽可能的解析（这个有时在包数量很多的情况下可以不使用，这样它会给出一个很简洁的报文解释）</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-22 系统救援</title>
    <url>/2015/12/24/linux/base/godLinux1-22/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>光盘启动，系统救援</li>
<li>忘记root用户的密码</li>
<li>磁盘资源耗尽故障</li>
<li>双系统启动修复</li>
</ul>
<span id="more"></span>

<h2 id="系统救援"><a href="#系统救援" class="headerlink" title="系统救援"></a>系统救援</h2><p>当系统坏了，进不去了。  进入救援模式拷贝数据<br>以光盘引导：<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/rescue1.png"><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/rescue2.png"><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/rescue4.png"></p>
<p><code>注意：需要切换文件系统根 chroot  /mnt/sysimage  </code><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/rescue5.png"><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/rescue6.png"><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/rescue8.png"></p>
<p>此时可以copy各种需要的文件。</p>
<h2 id="忘记root用户的密码"><a href="#忘记root用户的密码" class="headerlink" title="忘记root用户的密码"></a>忘记root用户的密码</h2><p>解决方法：重启系统进入单用户模式，然后重设密码<br>把下图中的x去掉，然后reboot 就可以，再次使用root进入密码，就不需要输入密码。<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/root_passwd.png"><br>进入系统passwd就可以修改root。</p>
<h2 id="磁盘资源耗尽故障"><a href="#磁盘资源耗尽故障" class="headerlink" title="磁盘资源耗尽故障"></a>磁盘资源耗尽故障</h2><p>现象：</p>
<pre><code>无法写入新的文件，提示“… :设备上没有空间”
部分程序无法运行，甚至系统无法启动
</code></pre>
<p>故障原因:</p>
<pre><code>磁盘空间已被大量的数据占满，空间耗尽
虽然还有可用空间，但文件数i节点耗尽
  
</code></pre>
<p>解决方案：</p>
<pre><code>清理磁盘空间，删除无用、冗余的文件
转移或删除占用大量i节点的琐碎文件
进入单用户模式、救援模式进行修复或删除文件
</code></pre>
<h2 id="双系统启动修复"><a href="#双系统启动修复" class="headerlink" title="双系统启动修复"></a>双系统启动修复</h2><p>当我们安装双系统环境，先安装Linux再安装Windows；；或者已经安装好双系统环境的Windows损坏，在重新安装Windows后，保存 GRUB的MBR（MasterBoot Record，主引导记录）会被Windows系统的自举程序NTLDR所覆盖，造成Linux系统无法引导。</p>
<p>恢复步骤：</p>
<ul>
<li><p>如果要恢复双系统引导，首先用上述方法进入救援模式，执行chroot命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh-4.1#chroot /mnt/sysimage</span><br></pre></td></tr></table></figure>
</li>
<li><p>将根目录切换到硬盘系统的根目录中，然后执行grub-install命令重新安装GRUB：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh-4.1#grub-install  /dev/sda</span><br></pre></td></tr></table></figure>
<p><img src="http://7xklqw.com1.z0.glb.clouddn.com/grub-install.png"></p>
</li>
<li><p>然后依次执行exit命令，退出chroot模式及救援模式（执行两次exit命令）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh-4.1#exit</span><br><span class="line">sh-4.1#reboot</span><br></pre></td></tr></table></figure>
<p>系统重启后，将恢复GRUB引导的双系统启动</p>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-23 RHEL7启动配置</title>
    <url>/2015/12/24/linux/base/godLinux1-23/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>系统启动配置</li>
<li>Grub 加固</li>
<li>服务启动管理</li>
</ul>
<span id="more"></span>


<h2 id="系统启动配置"><a href="#系统启动配置" class="headerlink" title="系统启动配置"></a>系统启动配置</h2><p>RHEL7 依然可以通过MBR启动，MBR保存着系统的主引导程序（grub 446字节，分区表64字节，2字节校验），启动过程就是把内核加载到内存。</p>
<h3 id="启动的顺序："><a href="#启动的顺序：" class="headerlink" title="启动的顺序："></a>启动的顺序：</h3><p>1、BIOS；<br>2、BIOS激活MBR；<br>3、MBR中的引导程序(grub)加载到内存，生成一个微系统（如xfs）；<br>4、grub 读取分区表，找到引导分区；<br>5、grub读取自身的配置文件，找到内核文件<br>6、加载内核文件；</p>
<p>RHEL7中第一个启动进程是 <code>systemd</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#pstree -p | more</span></span><br><span class="line">systemd(1)-+-ModemManager(1017)-+-&#123;ModemManager&#125;(1049)</span><br><span class="line">           |                    `-&#123;ModemManager&#125;(1066)</span><br><span class="line">           |-NetworkManager(1006)-+-&#123;NetworkManager&#125;(1079)</span><br><span class="line">           |                      |-&#123;NetworkManager&#125;(1081)</span><br></pre></td></tr></table></figure>

<h3 id="RHEL7设置启动级别"><a href="#RHEL7设置启动级别" class="headerlink" title="RHEL7设置启动级别"></a>RHEL7设置启动级别</h3><p>RHEL7 不在使用 <code>inittab</code> ， 打开<code>inittab</code> 可以看到如下内容;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/inittab</span></span><br><span class="line">inittab is no longer usedwhen using systemd.</span><br><span class="line"><span class="comment">#当使用systemd inittab不再使用。</span></span><br><span class="line"><span class="comment"># ADDING CONFIGURATIONHERE WILL HAVE NO EFFECT ON YOUR SYSTEM.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Ctrl-Alt-Delete ishandled by /usr/lib/systemd/system/ctrl-alt-del.target</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># systemd uses &#x27;targets&#x27;instead of runlevels. By default, there are two main targets:</span></span><br><span class="line"><span class="comment"># systemd使用“目标”而不是运行级。默认情况下,有两个主要目标</span></span><br><span class="line"><span class="comment"># multi-user.target:analogous to runlevel 3</span></span><br><span class="line"><span class="comment"># graphical.target:analogous to runlevel 5</span></span><br><span class="line"><span class="comment">#两种运行级别分别对应第三运行级别和第五运行级别</span></span><br><span class="line"><span class="comment"># To view current defaulttarget, run:</span></span><br><span class="line"><span class="comment"># systemctl get-default</span></span><br><span class="line"><span class="comment">#查看当前运行级别</span></span><br><span class="line"><span class="comment"># To set a defaulttarget, run:</span></span><br><span class="line"><span class="comment"># systemctl set-defaultTARGET.target</span></span><br><span class="line"><span class="comment">#设置运行级别</span></span><br></pre></td></tr></table></figure>


<h4 id="查看当前运行级别"><a href="#查看当前运行级别" class="headerlink" title="查看当前运行级别"></a>查看当前运行级别</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctlget-default</span></span><br><span class="line">graphical.target</span><br></pre></td></tr></table></figure>

<h4 id="切换运行级别"><a href="#切换运行级别" class="headerlink" title="切换运行级别"></a>切换运行级别</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl isolate graphical.target</span></span><br></pre></td></tr></table></figure>

<h4 id="设置默认的运行级别"><a href="#设置默认的运行级别" class="headerlink" title="设置默认的运行级别"></a>设置默认的运行级别</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl set-default multi-user.target</span></span><br><span class="line"><span class="built_in">rm</span><span class="string">&#x27;/etc/systemd/system/default.target&#x27;</span></span><br><span class="line"><span class="built_in">ln</span> -s <span class="string">&#x27;/usr/lib/systemd/system/multi-user.target&#x27;</span> <span class="string">&#x27;/etc/systemd/system/default.target&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="grub引导配置"><a href="#grub引导配置" class="headerlink" title="grub引导配置"></a>grub引导配置</h3><ul>
<li>主要配置文件</li>
</ul>
<p><code>/etc/grub2.cfg</code> <code>/etc/default/grub</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll /etc/grub2.cfg</span></span><br><span class="line">lrwxrwxrwx. 1 root root 22 Nov22 03:40 /etc/grub2.cfg -&gt; ../boot/grub2/grub.cfg</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]<span class="comment"># ll /etc/default/grub</span></span><br><span class="line">-rw-r--r--. 1 root root 192Nov 22 03:46 /etc/default/grub</span><br></pre></td></tr></table></figure>

<ul>
<li>修改配置<br>修改系统启动参数的时候，不要直接修改 ，因为如果后期更新内核的时候，那个grub.cfg也会自动更新，先前所做的配置会全部失效，如果需要修改，建议修改&#x2F;etc&#x2F;default&#x2F;grub，然后使用grub2-mkconfig 命令生效。这个文件是由&#x2F;etc&#x2F;grub.d&#x2F;00_header文件调用</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/default/grub</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#选择菜单的显示时间，默认是5，值是0表示不显示菜单选项，值是-1表示无限期的等待，直到用户做出选择</span></span><br><span class="line">GRUB_TIMEOUT=5 </span><br><span class="line">  </span><br><span class="line"><span class="comment">#设置默认启动项，按menuentry顺序。比如要默认从第四个菜单项启动，数字改为3，若#改为 saved，#则默认为上次启动项。</span></span><br><span class="line">GRUB_DEFAULT=saved </span><br><span class="line">  </span><br><span class="line"><span class="comment">#修改完成之后通过grub2-mkconfig命令重新生成内核参数</span></span><br><span class="line">[root@localhost ~]<span class="comment">#grub2-mkconfig </span></span><br></pre></td></tr></table></figure>




<h2 id="Grub-加固"><a href="#Grub-加固" class="headerlink" title="Grub 加固"></a>Grub 加固</h2><h3 id="明文"><a href="#明文" class="headerlink" title="明文"></a>明文</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/grub.d/00_header</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#末尾增加如下内容</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">set superusers=&quot;sam&quot;</span></span><br><span class="line"><span class="string">password sam 123456</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#更新grub</span></span><br><span class="line">[root@localhost ~]<span class="comment">#grub2-mkconfig -o /boot/grub2/grub.cfg</span></span><br></pre></td></tr></table></figure>
<p>注意：用来加密的用户sam和系统中的用户没有任何关系， sam不是系统用户都可以。</p>
<h3 id="pbkdfv2算法加密"><a href="#pbkdfv2算法加密" class="headerlink" title="pbkdfv2算法加密"></a>pbkdfv2算法加密</h3><p>grub1.98版之后，可以设定加密的密码</p>
<ul>
<li><p>生成 pbkdfv2 加密的密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># grub2-mkpasswd-pbkdf2 </span></span><br><span class="line">Enter password:   <span class="comment">#输入 123</span></span><br><span class="line">Reenter password:  <span class="comment">#输入 123</span></span><br><span class="line">PBKDF2 <span class="built_in">hash</span> of your password is grub.pbkdf2.sha512.10000.8EE07022D712A9EDB5EA8CA2AA8FC8B3166D903FC2BD058FAE95F8950D115EE8722099F07EBB223D0B9475B90B01D8A6C04580273B0866674005603554AFEF0C.28A856AC620C831BC1E04C2E23B5602BEDCC6910EBFCA3D2ADEFE3F39166AAFE7DAE4EFF10E090945009DE73D2D3F0005E32930F13F8D55CD7F34ACF9C77276F</span><br></pre></td></tr></table></figure>
</li>
<li><p>将加密的密码写入&#x2F;etc&#x2F;grub.d&#x2F;00_header文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/grub.d/00_header</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#末尾增加如下内容</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">set superusers=&quot;sam&quot;</span></span><br><span class="line"><span class="string">password_pbkdf2  sam grub.pbkdf2.sha512.10000.8EE07022D712A9EDB5EA8CA2AA8FC8B3166D903FC2BD058FAE95F8950D115EE8722099F07EBB223D0B9475B90B01D8A6C04580273B0866674005603554AFEF0C.28A856AC620C831BC1E04C2E23B5602BEDCC6910EBFCA3D2ADEFE3F39166AAFE7DAE4EFF10E090945009DE73D2D3F0005E32930F13F8D55CD7F34ACF9C77276F</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>更新grub</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># grub2-mkconfig -o /boot/grub2/grub.cfg</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>验证：重启， 在grub页面 输入 <code>e</code>； 用户 <code>sam</code>； 密码 <code>123</code></p>
<h2 id="服务启动管理"><a href="#服务启动管理" class="headerlink" title="服务启动管理"></a>服务启动管理</h2><h3 id="服务启动配置"><a href="#服务启动配置" class="headerlink" title="服务启动配置"></a>服务启动配置</h3><p>RHEL7中所有的开机启动的服务，都会在 <code>/etc/systemd/system/multi-user.target.wants</code> 中有对应的链接文件<br>将服务设置为开机自动启动，其实就是将 <code>/usr/lib/systemd/system</code> 目录下的服务配置文件做一个软链接到&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;目录下</p>
<ul>
<li><p>开机启动<br>例：安装httpd服务，并设置为开机自动启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install httpd</span></span><br><span class="line">  </span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl enable httpd</span></span><br><span class="line"><span class="built_in">ln</span> -s <span class="string">&#x27;/usr/lib/systemd/system/httpd.service&#x27;</span><span class="string">&#x27;/etc/systemd/system/multi-user.target.wants/httpd.service&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>开机不启动<br>将服务设置为自动关闭，其实就是将&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;目录下的服务配置文件的软链接进行删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl disable httpd</span></span><br><span class="line"><span class="built_in">rm</span><span class="string">&#x27;/etc/systemd/system/multi-user.target.wants/httpd.service&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看服务开机启动状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctlis -enabled httpd</span></span><br><span class="line">disabled</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动和关闭服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl restart httpd</span></span><br><span class="line">  </span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl stop  httpd</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Systemd-amp-amp-systemV"><a href="#Systemd-amp-amp-systemV" class="headerlink" title="Systemd &amp;&amp; systemV"></a>Systemd &amp;&amp; systemV</h3><p>Systemd和systemV服务启动方式对比<br>1）systemV 在服务启动方面采用的是顺序启动，即每一个服务都有对应的启动顺序，优先级越高那么在服务启动时就会被优先启动<br>2）systemd    在服务启动方面则是采用了并行启动的方式，而且按需启动，减少系统资源消耗，大大节省了系统启动的等待时间</p>
<p>相比较systemd而言，systemv的优势<br>1）原理简单，易于理解<br>2）依靠shell脚本控制，编写服务脚本门槛比较低</p>
<p>缺点：<br>1）服务顺序启动，启动过程比较慢<br>2）不能做到根据需要来启动服务，比如：通常希望在插入U盘的时候，再启动USB控制的服务，这样可以更好的节省系统资源</p>
<p>原本，systemv的服务启动慢，并不是一个问题，尤其是Linux系统以前主要是运行在服务器上，常年也难得重启一次，每次重启硬件检测都需要5分钟以上，相对来说系统启动已经很快了<br>但是随着移动互联网的到来，Systemv 服务启动慢的问题显得越来越突出，许多移动设备都是基于Linux内核，系统启动比较频繁，如果每次启动时都要等待服务顺序启动，显然难以接受，systemd就是为了解决这个问题诞生的</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="查看系统启动时间"><a href="#查看系统启动时间" class="headerlink" title="查看系统启动时间"></a>查看系统启动时间</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#systemd-analyze</span></span><br><span class="line">Startup finished in6.894s (kernel) + 2.939s (initrd) + 12.978s (userspace) = 22.812s</span><br></pre></td></tr></table></figure>

<h4 id="查看每个服务的启动时间"><a href="#查看每个服务的启动时间" class="headerlink" title="查看每个服务的启动时间"></a>查看每个服务的启动时间</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># systemd-analyze blame </span></span><br><span class="line">           405ms network.service</span><br><span class="line">           350ms postfix.service</span><br><span class="line">           320ms lvm2-monitor.service</span><br><span class="line">           279ms plymouth-quit-wait.service</span><br><span class="line">           255ms tuned.service</span><br><span class="line">           130ms NetworkManager.service</span><br><span class="line">           118ms ModemManager.service</span><br><span class="line">           107ms boot.mount</span><br><span class="line">            95ms accounts-daemon.service</span><br><span class="line">            79ms avahi-daemon.service</span><br><span class="line">            76ms chronyd.service</span><br><span class="line">            75ms rhel-dmesg.service</span><br><span class="line">            70ms abrt-ccpp.service</span><br><span class="line">            70ms rsyslog.service</span><br><span class="line">            61ms ksm.service</span><br><span class="line">            56ms systemd-logind.service</span><br><span class="line">            47ms systemd-vconsole-setup.service</span><br><span class="line">            45ms rtkit-daemon.service</span><br><span class="line">            43ms sysstat.service</span><br><span class="line">            42ms libvirtd.service</span><br><span class="line">            42ms auditd.service</span><br><span class="line">            40ms plymouth-read-write.service</span><br><span class="line">            37ms polkit.service</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="查看严重消耗时间的服务树状表"><a href="#查看严重消耗时间的服务树状表" class="headerlink" title="查看严重消耗时间的服务树状表"></a>查看严重消耗时间的服务树状表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemd-analyze critical-chain</span></span><br><span class="line">The time after the unitis active or started is printed after the <span class="string">&quot;@&quot;</span> character.</span><br><span class="line">The time the unit takesto start is printed after the <span class="string">&quot;+&quot;</span> character.</span><br><span class="line">graphical.target @12.973s</span><br><span class="line">└─multi-user.target@12.972s</span><br><span class="line">  └─postfix.service @10.044s +2.070s</span><br><span class="line">    └─network.target @10.020s</span><br><span class="line">      └─network.service @9.218s +801ms</span><br><span class="line">        └─NetworkManager.service @5.186s +4.031s</span><br><span class="line">          └─basic.target @5.168s</span><br></pre></td></tr></table></figure>

<h4 id="列出所有服务并且检查是否开机启动"><a href="#列出所有服务并且检查是否开机启动" class="headerlink" title="列出所有服务并且检查是否开机启动"></a>列出所有服务并且检查是否开机启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl list-unit-files --type service</span></span><br><span class="line">UNIT FILE                                   STATE</span><br><span class="line">abrt-ccpp.service                           enabled</span><br><span class="line">abrt-oops.service                           enabled</span><br><span class="line">abrt-pstoreoops.service                     disabled</span><br><span class="line">abrt-vmcore.service                         enabled</span><br><span class="line">abrt-xorg.service                           enabled</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-3 rhel7基本命令和操作</title>
    <url>/2015/11/27/linux/base/godLinux1-3/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>每个linux发行版有不一致，本文以rhel7.1 为准。</p>
<ul>
<li><p>图形界面和字符界面相互切换<br>linux终端tyy1 ~ tyy6, tyy1 就是图形界面;<br>Ctrl + Alt + F1～6 （根据笔记本灵活试试）</p>
</li>
<li><p>虚拟终端 Terminal  pts<br>Ctrl + shift + T （在Terminal焦点中才起作用，可看看terminal的菜单）</p>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>内部命令 外部命令<br>随系统启动就加载到内存就是内部命令，反之就是外部命令。可通过 <code>type</code> 查看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">type</span> <span class="built_in">cd</span></span><br><span class="line"><span class="built_in">cd</span> is a shell <span class="built_in">builtin</span> <span class="comment"># 内部命令</span></span><br><span class="line">$ <span class="built_in">type</span> vim</span><br><span class="line">vim is /usr/bin/vim <span class="comment"># 外部命令</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>linux系统中不同的颜色代表了不同的文件类型</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>颜色</th>
<th>类型</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>蓝色</td>
<td>目录</td>
<td>&#x2F;etc</td>
</tr>
<tr>
<td>黑色</td>
<td>文件</td>
<td>&#x2F;etc&#x2F;passwd</td>
</tr>
<tr>
<td>浅蓝色</td>
<td>链接</td>
<td>&#x2F;etc&#x2F;grub2.cfg</td>
</tr>
<tr>
<td>红色</td>
<td>压缩包</td>
<td>boot.tar.gz</td>
</tr>
<tr>
<td>绿色</td>
<td>可执行文件</td>
<td>&#x2F;etc&#x2F;init.d&#x2F;network</td>
</tr>
<tr>
<td>黑底黄字</td>
<td>设备文件</td>
<td>&#x2F;dev&#x2F;sda</td>
</tr>
</tbody></table>
<ul>
<li>bash shell 提示符<br>root 为 <code>#</code> ， 一般用户为 <code>$</code></li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>Linux命令输入规律：<br>空格作为分割</p>
<table>
<thead>
<tr>
<th>命令名</th>
<th>[选项]（[参数]）</th>
<th>[选项的值]（[参数的值]）</th>
</tr>
</thead>
<tbody><tr>
<td>rm</td>
<td>-rf</td>
<td>&#x2F;etc&#x2F;passwd</td>
</tr>
</tbody></table>
<h3 id="hwclock"><a href="#hwclock" class="headerlink" title="hwclock"></a>hwclock</h3><p>查看系统和BIOS硬件时间：  指的是bios时间  （格里尼兹天文台）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hwclock </span><br><span class="line">2015年11月27日 星期五 17时53分39秒  -0.344261 秒</span><br></pre></td></tr></table></figure>

<h3 id="系统时间"><a href="#系统时间" class="headerlink" title="系统时间"></a>系统时间</h3><ul>
<li><p>查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># date</span><br><span class="line">2015年 11月 27日 星期五 18:05:22 CST</span><br><span class="line"># date &quot;+%F %R&quot;</span><br><span class="line">2015-11-27 18:05</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># date -s &quot;2016-01-01 01:01&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h3><ul>
<li><p>加参数-h 或–help</p>
</li>
<li><p>man</p>
</li>
</ul>
<h3 id="关机命令"><a href="#关机命令" class="headerlink" title="关机命令"></a>关机命令</h3><p>shutdown、 init 、reboot   poweroff</p>
<ul>
<li><p>shutdown<br>作用：关机，重启，定时关机<br>语法：shutdown  [选项]<br>-r     &#x3D;&gt; 重新启动计算机<br>-h    &#x3D;&gt; 关机<br>-h  时间  &#x3D;&gt;定时关机<br>-c    &#x3D;&gt; 取消之前的定时关机  或ctrl+c</p>
</li>
<li><p>init<br>作用：切换系统运行级别<br>语法：init  0-6</p>
</li>
</ul>
<h2 id="启动级别配置"><a href="#启动级别配置" class="headerlink" title="启动级别配置"></a>启动级别配置</h2><p>Linux 7个启动级别：<br>0 系统停机模式，系统默认运行级别不能设置为0，否则不能正常启动，机器关闭。<br>1 单用户模式，root权限，用于系统维护，禁止远程登陆，就像Windows下的安全模式登录。<br>2 多用户模式，没有NFS网络支持。<br>3 完整的多用户文本模式，有NFS，登陆后进入控制台命令行模式。<br>4 系统未使用，保留一般不用，在一些特殊情况下可以用它来做一些事情。例如在笔记本电脑的电池用尽时，可以切换到这个模式来做一些设置。<br>5 图形化模式，登陆后进入图形GUI模式，X Window系统。<br>6 重启模式，默认运行级别不能设为6，否则不能正常启动。运行init 6机器就会重启</p>
<ul>
<li><p>RHEL7不再使用&#x2F;etc&#x2F;inittab文件进行默认的启动级别配置<br>systemd使用比sysvinit的运行级更为自由的target替代。第3运行级用multi-user.target替代。第5运行级用graphical.target替代。runlevel3.target和runlevel5.target分别是指向 multi-user.target和graphical.target的符号链接。<br>切换到第3运行级</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># systemctl isolate multi-user.target</span><br><span class="line"># systemctl isolate runlevel3.target</span><br></pre></td></tr></table></figure>
<p>切换到第5运行级</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># systemctl isolate graphical.target</span><br><span class="line"># systemctl isolate runlevel5.target</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置默认的运行界别<br>systemd使用链接来指向默认的运行级别。<br>在创建新的链接前，可以通过下面命令删除存在的链接： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm /etc/systemd/system/default.target</span><br><span class="line">  </span><br><span class="line">#默认启动级别3</span><br><span class="line">systemctl -f enable multi-user.target</span><br><span class="line">systemctl set-default multi-user.target</span><br><span class="line">  </span><br><span class="line">#默认启动级别5</span><br><span class="line">systemctl -f enable graphical.target</span><br><span class="line">systemctl set-default graphical.target</span><br></pre></td></tr></table></figure>
<p>可以参照 <code>/etc/inittab</code> 文件</p>
</li>
<li><p>查看运行级别</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># runlevel</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="配置实验环境"><a href="#配置实验环境" class="headerlink" title="配置实验环境"></a>配置实验环境</h2><h3 id="配置IP地址"><a href="#配置IP地址" class="headerlink" title="配置IP地址"></a>配置IP地址</h3><p>RHEL7中弱化了setup的功能，对于网络管理来说，主要通过nmtui修改网络配置（RHEL7默认安装，前提是需要开启NetworkManager.service 才可以使用）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># systemctl status NetworkManager</span><br><span class="line">NetworkManager.service - Network Manager</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/NetworkManager.service; enabled)</span><br><span class="line">   Active: active (running) since Fri 2015-11-27 03:27:10 EST; 1h 52min ago</span><br><span class="line"> Main PID: 1158 (NetworkManager)</span><br><span class="line">   CGroup: /system.slice/NetworkManager.service</span><br><span class="line">           ├─1158 /usr/sbin/NetworkManager --no-daemon</span><br><span class="line">           └─1777 /sbin/dhclient -d -q -sf /usr/libexec/nm-dhcp-helper -pf /v...</span><br><span class="line"></span><br><span class="line">Nov 27 03:27:11 localhost.localdomain NetworkManager[1158]: &lt;info&gt;  (eno16777...</span><br><span class="line">Nov 27 03:27:11 localhost.localdomain NetworkManager[1158]: &lt;info&gt;  (eno16777...</span><br><span class="line">Nov 27 03:27:11 localhost.localdomain NetworkManager[1158]: &lt;info&gt;  NetworkMa...</span><br><span class="line">Nov 27 03:27:11 localhost.localdomain NetworkManager[1158]: &lt;info&gt;  NetworkMa...</span><br><span class="line">Nov 27 03:27:11 localhost.localdomain NetworkManager[1158]: &lt;info&gt;  Policy se...</span><br><span class="line">Nov 27 03:27:11 localhost.localdomain NetworkManager[1158]: &lt;info&gt;  (eno16777...</span><br><span class="line">Nov 27 03:27:15 localhost.localdomain NetworkManager[1158]: &lt;info&gt;  startup c...</span><br><span class="line">Nov 27 03:27:43 localhost.localdomain NetworkManager[1158]: &lt;info&gt;  (eno16777...</span><br><span class="line">Nov 27 03:27:43 localhost.localdomain NetworkManager[1158]: &lt;info&gt;  (eno16777...</span><br><span class="line">Nov 27 03:27:43 localhost.localdomain NetworkManager[1158]: &lt;info&gt;  (eno16777...</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br></pre></td></tr></table></figure>

<p>运行 <code>nmtui</code>， 图形界面。</p>
<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># systemctl stop firewalld.service</span><br><span class="line"># systemctl disable firewalld.service </span><br><span class="line">rm &#x27;/etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service&#x27;</span><br><span class="line">rm &#x27;/etc/systemd/system/basic.target.wants/firewalld.service&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-4 rhel7文件管理和xfs文件系统备份</title>
    <url>/2015/12/03/linux/base/godLinux1-4/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>Linux系统目录结构</li>
<li>相对&#x2F;绝对路径</li>
<li>创建&#x2F;复制&#x2F;删除文件</li>
<li>查看文件内容</li>
<li>xfs文件系统的备份和恢复</li>
</ul>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>详细的可以参考 <a href="http://vbird.dic.ksu.edu.tw/linux_basic/0210filepermission_3.php">鸟哥</a></p>
<table>
<thead>
<tr>
<th>目录</th>
<th>应放置文件内容</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;</td>
<td>通常称为根分区。所有的文件和目录皆由此开始。只有root用户对此目录拥有写权限。</td>
</tr>
<tr>
<td>&#x2F;boot</td>
<td>存放Linux系统启动时需要加载的文件。 (一般在单独的一个磁盘分区里面保存) Kernel、grub等文件都存放在此。</td>
</tr>
<tr>
<td>&#x2F;etc</td>
<td>RHEL6中主要存放服务的配置文件，RHEL7中，以&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system进行代替</td>
</tr>
<tr>
<td>&#x2F;var</td>
<td>是一个可增长的目录，包含很经常变的文件。例如，&#x2F;var&#x2F;log（系统日志）、&#x2F;var&#x2F;lib （包文件）</td>
</tr>
<tr>
<td>&#x2F;root</td>
<td>管理员所有数据。  root用户的家目录</td>
</tr>
<tr>
<td>&#x2F;tmp</td>
<td>临时文件存储位置</td>
</tr>
<tr>
<td>&#x2F;usr</td>
<td>unix software source， 放置是所有系统默认的软件(distribution发布者提供的软件)，有点类似Windows 系统的『C:\Windows\ + C:\Program files\』这两个目录的综合体，鸟哥的链接有次级目录的说明</td>
</tr>
<tr>
<td>&#x2F;opt</td>
<td>给第三方协力软件放置的目录，自行安装额外的软件(非原本的distribution提供的)</td>
</tr>
<tr>
<td>&#x2F;bin</td>
<td>此目录包含二进制可执行文件，在单人维护模式下还能够被操作</td>
</tr>
<tr>
<td>&#x2F;sbin</td>
<td>系统命令 ，此目录中的命令主要供系统管理员使用，为开机过程中所需要的，里面包括了开机、修复、还原系统所需要的指令，常见的指令包括：fdisk, fsck, ifconfig, init, mkfs等等。</td>
</tr>
<tr>
<td>&#x2F;mnt</td>
<td>暂时挂载某些额外的装置</td>
</tr>
<tr>
<td>&#x2F;media</td>
<td>放置的就是可移除的装置啦！ 包括软盘、光盘、DVD等等装置都暂时挂载于此。</td>
</tr>
<tr>
<td>&#x2F;dev</td>
<td>包含设备文件。在Linux中，一切都被看做文件。终端设备、USB、磁盘等等都被看做文件</td>
</tr>
<tr>
<td>&#x2F;home</td>
<td>普通用户所有数据存放在这个目录下</td>
</tr>
<tr>
<td>&#x2F;proc</td>
<td>本身是一个『虚拟文件系统(virtual filesystem)』放置的数据都是在内存当中， 例如系统核心、行程信息(process)、周边装置的状态及网络状态等等。因为这个目录下的数据都是在内存当中， 所以本身不占任何硬盘空间啊！比较重要的文件例如：&#x2F;proc&#x2F;cpuinfo, &#x2F;proc&#x2F;dma, &#x2F;proc&#x2F;interrupts, &#x2F;proc&#x2F;ioports, &#x2F;proc&#x2F;net&#x2F;* 等等。</td>
</tr>
<tr>
<td>&#x2F;lib</td>
<td>系统最基本的动态链接共享库，尤其重要的是&#x2F;lib&#x2F;modules&#x2F;这个目录， 因为该目录会放置核心相关的模块(驱动程序)</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="绝对路径-x2F-相对路径"><a href="#绝对路径-x2F-相对路径" class="headerlink" title="绝对路径&#x2F;相对路径"></a>绝对路径&#x2F;相对路径</h2><p>命令 cd<br><code>.</code>  	表当前目录<br><code>..</code>	代表的是上一级目录<br><code> </code> 表示当前目录</p>
<p><a href="http://7xklqw.com1.z0.glb.clouddn.com/%E5%9B%BE%E7%89%871.png"></a></p>
<h2 id="创建-x2F-复制-x2F-删除文件"><a href="#创建-x2F-复制-x2F-删除文件" class="headerlink" title="创建&#x2F;复制&#x2F;删除文件"></a>创建&#x2F;复制&#x2F;删除文件</h2><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>作用：常用来创建空文件<br>语法： touch 文件名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# touch sam</span><br></pre></td></tr></table></figure>

<h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>作用：创建目录<br>语法：mkdir 目录名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir sam</span><br><span class="line">[root@localhost ~]# mkdir -p sam/sam2/sam3</span><br></pre></td></tr></table></figure>
<p>  <code>-p</code> 连同父目录一起创建</p>
<h3 id="Linux系统中一切皆文件"><a href="#Linux系统中一切皆文件" class="headerlink" title="Linux系统中一切皆文件"></a>Linux系统中一切皆文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# touch a</span><br><span class="line">[root@localhost ~]# mkdir a</span><br><span class="line">mkdir: cannot create directory ‘a’: File exists</span><br></pre></td></tr></table></figure>

<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>作用：复制文件<br>语法：cp [-ra] 源文件  目标文件<br>-r :递归，包含子目录和文件<br>-a :复制属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cp /etc/passwd  /root/</span><br><span class="line">[root@localhost ~]# cp -r /boot/grub2/  sam/</span><br></pre></td></tr></table></figure>

<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>作用：删除文件或目录<br>语法： rm [-rf]  文件或目录名<br>-r  递归删除（可以删除目录和目录里面的东西）<br>-f  强行删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@xuegod163 ~]# rm -rf passwd</span><br></pre></td></tr></table></figure>

<h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>作用: 重命名<br>语法：mv 源：文件或目录名    目标：文件或目录名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@xuegod163 ~]# mv passwd  xiaochuan</span><br></pre></td></tr></table></figure>

<h3 id="经验：工作中，善用mv，慎用rm"><a href="#经验：工作中，善用mv，慎用rm" class="headerlink" title="经验：工作中，善用mv，慎用rm"></a>经验：工作中，善用mv，慎用rm</h3><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>语法：cat 文件名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# echo &quot;I&#x27;m sam&quot;  &gt; sam </span><br><span class="line">[root@localhost ~]# cat sam </span><br><span class="line">I&#x27;m sam</span><br></pre></td></tr></table></figure>

<h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>语法： more　　查看文件名字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# more  /etc/passwd</span><br></pre></td></tr></table></figure>
<p>按下回车刷新一行，按下空格刷新一屏<br><code>q</code>　退出</p>
<h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>语法： less　　查看文件名字<br><code>q</code>　退出<br>使用光标键可以向上翻页</p>
<h3 id="linux中more与less的区别"><a href="#linux中more与less的区别" class="headerlink" title="linux中more与less的区别"></a>linux中more与less的区别</h3><p>more:不支持后退，但几乎不需要加参数，空格键是向下翻页，Enter键是向下翻一行，在不需要后退的情况下比较方便。<br>less：支持前后翻滚，既可以向上翻页（pageup按键），也可以向下翻页（pagedown按键）。空格键是向下翻页，Enter键是向下翻一行</p>
<h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>用法：head  -行号   文件名 (从第一行开始，查看文件，默认显示前10行)<br>或：  head   -n　数字（显示多少行） 文件名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# head  -3 /etc/passwd </span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure>

<h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>从第后一行开始，查看文件，默认显示最后10行<br>用法：tail -n 数字 -f 文件名 或 tail -nf 文件名<br>-n  数字，显示多少行<br>-f  动态显示数据（不关闭）　　常用来查看日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tail -12f  /var/log/alternatives.log</span><br></pre></td></tr></table></figure>

<h3 id="显示文件的第n行"><a href="#显示文件的第n行" class="headerlink" title="显示文件的第n行"></a>显示文件的第n行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# head -n /etc/passwd | tail -1</span><br><span class="line">[root@localhost ~]# tail -n /etc/passwd | head -1</span><br></pre></td></tr></table></figure>


<h2 id="xfs文件系统的备份和恢复"><a href="#xfs文件系统的备份和恢复" class="headerlink" title="xfs文件系统的备份和恢复"></a>xfs文件系统的备份和恢复</h2><p>XFS提供了 xfsdump 和 xfsrestore 工具协助备份XFS文件系统中的数据。xfsdump 按inode顺序备份一个XFS文件系统。与传统的UNIX文件系统不同，XFS不需要在dump前被卸载；对使用中的XFS文件系统做dump就可以保证镜像的一致性。这与XFS对快照的实现不同，XFS的dump和restore的过程是可以被中断然后继续的，无须冻结文件系统。xfsdump 甚至提供了高性能的多线程备份操作——它把一次dump拆分成多个数据流，每个数据流可以被发往不同的目的地。</p>
<h3 id="测试准备"><a href="#测试准备" class="headerlink" title="测试准备"></a>测试准备</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# fdisk /dev/sda </span><br><span class="line">[root@localhost ~]# ls /dev/sda*</span><br><span class="line">/dev/sda  /dev/sda1  /dev/sda2</span><br><span class="line">[root@localhost ~]# partprobe /dev/sda #重新获取分区表</span><br><span class="line">[root@localhost ~]# mkfs.xfs /dev/sda3 #格式化分区</span><br><span class="line">[root@localhost ~]# mkdir /sda3 #创建挂载点</span><br><span class="line">[root@localhost ~]# mount /dev/sda3  /sda3/ #挂载</span><br></pre></td></tr></table></figure>

<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><ul>
<li><p>对整个分区进行备份</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# xfsdump -f /backup/dump_sda3  /sda3</span><br><span class="line">......</span><br><span class="line">please enter label for this dump session (timeout in 300 sec)</span><br><span class="line"> -&gt; dump_sda3   #指定备份标签</span><br><span class="line">please enter label for media in drive 0 (timeout in 300 sec)</span><br><span class="line"> -&gt; media0   </span><br><span class="line">#指定设备标签</span><br></pre></td></tr></table></figure>

<p>注意：<code>备份的设备这里不能写成/sda3/</code></p>
<p>非交互式进行备份</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# xfsdump -f /backup/dump_sda3  /sda3   -L dump_sda3  -M media0</span><br></pre></td></tr></table></figure>
<p>  -L      指定备份标签<br>  -M	   指定设备标签</p>
<ul>
<li>针对指定文件或目录进行备份<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# xfsdump -f /backup/dump_sda3_test -s test /sda3  -L dump_sda3_test -M media1</span><br></pre></td></tr></table></figure>
注意：<code>test sda3中间有空格，前后都不能加“/”</code></li>
</ul>
<h3 id="查看备份信息"><a href="#查看备份信息" class="headerlink" title="查看备份信息"></a>查看备份信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# xfsdump -I</span><br></pre></td></tr></table></figure>

<h3 id="文件系统恢复"><a href="#文件系统恢复" class="headerlink" title="文件系统恢复"></a>文件系统恢复</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# xfsrestore -f /backup/dump_sda3  /sda3/ #恢复整个分区</span><br><span class="line">[root@localhost ~]# xfsrestore -f /backup/dump_sda3_test -s test /sda3 #只恢复单个的目录或文件</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-5 vim编辑器</title>
    <url>/2015/12/04/linux/base/godLinux1-5/</url>
    <content><![CDATA[<p>写在一起之前： 命令行输入 <code>vimtutor</code> 你会有惊喜， 全部做完，恭喜你，入门了！！！！！！！！！</p>
<p>主要内容：<br>vim主要模式介绍<br>vim命令模式<br>vim插（输）入模式<br>vim命令（末）行模式<br>设置vim开发环境</p>
<h2 id="主要模式"><a href="#主要模式" class="headerlink" title="主要模式"></a>主要模式</h2><p>vim 主要有 <code>命令模式</code> <code>插（输）入模式</code> <code>命令（末）行模式</code> 三种模式， 意义和转换如下图：<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/vimmodels.png"></p>
<span id="more"></span>

<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。</p>
<h3 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h3><ul>
<li><code>i</code> 当前字符之前插入</li>
<li><code>I</code> 行首插入</li>
<li><code>a</code> 当前字符之后插入</li>
<li><code>A</code> 行尾插入</li>
<li><code>esc</code> 退出当前模式</li>
<li><code>o</code> 下一行插入</li>
<li><code>O</code> 上一行插入</li>
<li><code>x</code> 向后删除一个字符del</li>
<li><code>X</code> 向前删除一个字符</li>
<li><code>u</code> 撤销一步</li>
</ul>
<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul>
<li><code>gg</code> 定位到行首</li>
<li><code>G</code> 定位到最后一行，行首</li>
<li><code>nG</code> 定位到某一行</li>
<li><code>:n</code> 定位到某一行</li>
<li><code>ngg</code> 定位到某一行<br>n 代表行号</li>
</ul>
<h3 id="行操作"><a href="#行操作" class="headerlink" title="行操作"></a>行操作</h3><ul>
<li><code>home键或^</code> 行首 </li>
<li><code>end或$</code> 行尾</li>
<li><code>dd</code> 删除一行<br><code>ndd</code> 删除以当前行开始的n行<br><code>ddp</code> 上下两行的内容互换<br><code>dG</code> 删除从当前行至文件未尾的所有行。</li>
<li><code>yy</code> 复制一行<br><code>Nyy</code> 复制N行</li>
<li><code>p</code> 将复制行粘贴 P上粘</li>
<li>扩展：剪切&#x3D;先删除，再粘贴</li>
<li><code>d + HOME 或^</code> 删除到行首  </li>
<li><code>d + END 或$</code> 删除到行尾</li>
</ul>
<h3 id="词操作"><a href="#词操作" class="headerlink" title="词操作"></a>词操作</h3><ul>
<li><code>dw</code> 删除一个词，删除时要将光标移动到这个词的行首。 另外，如果光标不在行首，则删除光标之后的字母。</li>
<li><code>yw</code> 复制一个词</li>
<li><code>w</code> 切换单词</li>
</ul>
<h3 id="块操作"><a href="#块操作" class="headerlink" title="块操作"></a>块操作</h3><ul>
<li><code>大D 或d+$</code> 删至行尾<br><code>d+^</code> 删至行首</li>
<li><code>y+$</code> 复制至尾<br><code>y+^</code> 复制至首<br><code>&quot;+y</code>  复制选中内容到＋寄存器，也就是系统的剪贴板，供其他程序用 +需要显式输入。 ：reg 可查看支付支持＋寄存器</li>
</ul>
<h3 id="v-模式"><a href="#v-模式" class="headerlink" title="v 模式"></a>v 模式</h3><p>进入v模式 移动光标选择区域、<br>编程的时候需要进行多行注释：<br>1、注释：ctrl+v 进入列编辑模式<br>2向下或向上移动光标<br>3把需要注释的行的开头标记起来<br>4然后按大写的I<br>5再插入注释符,比如”#”。<br>6再按Esc,就会全部注释了。</p>
<p>  删除多行注释：<br>  删除：再按ctrl+v 进入列编辑模式；向下或向上移动光标 ；选中注释部分,然后按d, 就会删除注释符号。</p>
<h2 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h2><p>字符就是字符本身，用来编辑内容</p>
<h2 id="命令（末）行模式"><a href="#命令（末）行模式" class="headerlink" title="命令（末）行模式"></a>命令（末）行模式</h2><ul>
<li><p>保存退出<br><code>:w</code> 保存 save<br><code>:q</code> 没有进行任何修改，退出 quit<br><code>:q!</code> 修改了，不保存，强制退出<br><code>:wq</code> 保存并退出<br><code>:wq!</code> 强制保存并退出。</p>
</li>
<li><p>替换<br><code>:%s /this/that</code> #每一行的第一个this被替换成that<br><code>:s /emacs/vim</code> #在当前行中把第一个emacs替换成vim。<br><code>:%s /this/that/g</code> #将文本中所有的this替换成that<br><code>:2,5s /this/that/g</code> #替换第二行到第五行中sbin<br>注意： <code>替换内容中本身有/符号， 外面的/可以用#替换。 比如 :%s #this#that#g</code></p>
</li>
<li><p><code>:set nu/nonu</code>  #显示行号</p>
</li>
<li><p>查找<br><code>/</code> 正向查找 ：&#x2F;target<br><code>n</code> 往下查找，<br><code>N</code> 往上查找<br>去消高亮显示： noh 或 随便查找一组没有的字符</p>
</li>
<li><p><code>:! command</code> 运行shell命令</p>
</li>
<li><p><code>:r /etc/ssh/sshd_config.bak</code>  读取其他文件</p>
</li>
</ul>
<h2 id="设置vim开发环境"><a href="#设置vim开发环境" class="headerlink" title="设置vim开发环境"></a>设置vim开发环境</h2><p>在命令模式下用set命令设置的东西是不能保存的，下次打开vim时又要重新设置。所以vim提供了一个配置文件叫vimrc，可以保存你的配置信息。<br>  ~&#x2F;.vimrc<br>输入：<br><code>set nu</code> #显示行数<br><code>set history=10</code> #<br><code>set autoindent</code> #自动缩排，如当前行是从第3个字符的位置开始编辑的,按回车后光标会自动定位在下一行第三3个字符的位置。<br><code>set paste</code> #置粘贴模式，这样粘贴过来的程序代码就不会错位了。<br>等等</p>
<h2 id="vim同时打开多个文件"><a href="#vim同时打开多个文件" class="headerlink" title="vim同时打开多个文件"></a>vim同时打开多个文件</h2><p>用法： vim -[o&#x2F;O] filename<br>大写 <code>O</code> 左右分屏，小写的 <code>o</code> 上下分屏， <code>ctrl+WW</code> 在文件之间进行切换</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://linux.vbird.org/linux_basic/0310vi.php">鸟哥linux</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-6 用户管理</title>
    <url>/2015/12/04/linux/base/godLinux1-6/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://vbird.dic.ksu.edu.tw/linux_basic/0410accountmanager.php">鸟哥的Linux</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-7 文件权限管理</title>
    <url>/2015/12/05/linux/base/godLinux1-7/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>文件基本权限</li>
<li>文件高级权限</li>
</ul>
<h2 id="文件基本权限"><a href="#文件基本权限" class="headerlink" title="文件基本权限"></a>文件基本权限</h2><h3 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ll <span class="variable">$filename</span></span><br></pre></td></tr></table></figure>

<h3 id="基本权限构成"><a href="#基本权限构成" class="headerlink" title="基本权限构成"></a>基本权限构成</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ll text </span><br><span class="line">-rw-r--r-- 1 sam users 0 12月  1 15:20 text</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>-</th>
<th>rw-</th>
<th>r–</th>
<th>r–</th>
<th>sam</th>
<th>users</th>
<th>text(FILENAME)</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>拥有者的权限</td>
<td>所属组的权限</td>
<td>其他人的权限</td>
<td>拥有者</td>
<td>属组</td>
<td>对象</td>
</tr>
</tbody></table>
<span id="more"></span>

<p>对于文件：r读　　w写　　x执行<br>对于目录：r读（看到目录里面有什么）       cat   more  less   ls<br>　　　　　w建文件、删除、移动                  touch   mkdir   rm   mv  cp<br>　　　　　x进入                                        cd</p>
<h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><p>作用：修改文件权限<br>u-w               user                      拥有者<br>g+x               group                   组<br>o&#x3D;r                other                    其他人<br>a+x               all                        所有人<br><code>-</code> 代表移除； <code>+</code> 代表增加； <code>=</code> 代表替换<br>此命令同样可以修改目录， 用法和修改文件一致</p>
<ul>
<li>数字表示权限</li>
</ul>
<table>
<thead>
<tr>
<th>r–</th>
<th>-w-</th>
<th>–x</th>
<th>进制</th>
</tr>
</thead>
<tbody><tr>
<td>100</td>
<td>010</td>
<td>001</td>
<td>二进制</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>1</td>
<td>十进制</td>
</tr>
</tbody></table>
<p>用数字表示就是把对应数据相加<br>so <code>rwx</code> 表示为 7； <code>rw</code> 为 6;<br>rwxr-xr-x 的值是多少？rwx&#x3D;4+2+1&#x3D;7;r-x&#x3D;4+1&#x3D;5;r-x&#x3D;4+1&#x3D;5; rwxr-xr-x&#x3D;755 </p>
<h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><p>作用：修改文件拥有者和所属组<br>语法：chown USER:GROUP 对象<br>chown USER 对象<br>chown :GROUP 对象 <code>:</code> 必须<br>-R 递归(目录下的所有内容全部更改，否则只修改目录)<br>一个文件只有读的权限，拥有者是否可以写这个文件？   文件所有者一定可以写文件</p>
<h3 id="默认权限"><a href="#默认权限" class="headerlink" title="默认权限"></a>默认权限</h3><ul>
<li>计算方法：<br>** 快速计算<br>文件默认权限＝666（默认值）-umask值<br>目录默认权限＝777（默认值）-umask值<br>这是一个快速计算方法，但不严谨。<br>** 完整算法<br>在2进制表示的情况下<br>默认值 &amp;&amp; （umask值取反）<br>** umask值<br>用户默认的shell配置文件中设置，如 <code>/etc/bashrc</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [ $UID -gt 199 ]&amp;&amp; [ &quot;`id -gn`&quot; = &quot;`id -un`&quot; ]; then  # id -gn显示组名，id -un 显示用户名</span><br><span class="line">        umask 002   ＃普通用户</span><br><span class="line">else</span><br><span class="line">        umask 022   ＃系统用户</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="高级权限"><a href="#高级权限" class="headerlink" title="高级权限"></a>高级权限</h2><h3 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h3><p>SUID               SGID                 Stickybit<br>s对应的数值为：u 4，g  2，o   1</p>
<ul>
<li><p>SUID：<br>限定：只能设置在二进制可执行程序上面。对目录文本设置无效。<br>功能：程序运行时的权限从执行者变更成程序所有者。<br>可用 <code>chmod</code> 修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#chmod u+s /usr/bin/less</span><br><span class="line">[root@localhost ~]# ll /usr/bin/less</span><br><span class="line">-rwsr-xr-x. 1 root root158240 Feb  4  2014 /usr/bin/less</span><br></pre></td></tr></table></figure>
<p>注意：<br><code>[root@localhost ~]#chmod u+s /usr/bin/less</code> 等同于 <code>[root@localhost ~]#chmod 4755 /usr/bin/less</code></p>
</li>
<li><p>SGID：<br>限定：既可以给二进制可执行程序设置，也可以给目录设置。<br>功能：在设置了SGID权限的目录下建立文件时，新创建的文件的所属组会继承上级目录的所属组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#chmod g+s test/</span><br></pre></td></tr></table></figure>
</li>
<li><p>Stickybit<br>限定：只作用于目录<br>功能：目录下创建的文件只有root、文件创建者、目录所有者才能删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#chmod o+t test</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="扩展ACL"><a href="#扩展ACL" class="headerlink" title="扩展ACL"></a>扩展ACL</h3><ul>
<li><p>查看 getfacl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#getfacl test</span><br><span class="line"># file: test</span><br><span class="line"># owner: root</span><br><span class="line"># group: root</span><br><span class="line">user::rw-</span><br><span class="line">group::r--</span><br><span class="line">other::r--</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置 setfacl <code>-m</code> 必须</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#setfacl -m u:sam1:rwx test</span><br></pre></td></tr></table></figure>
</li>
<li><p>对目录进行设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#setfacl -R -m u:sam1:rw- test</span><br></pre></td></tr></table></figure>
<p>(<code>-R</code> 一定要在 <code>-m</code> 前面，表示目录下所有文件）</p>
</li>
<li><p>删除acl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#setfacl -x u:sam1 test #删除单个用户的权限</span><br><span class="line">[root@xuegod163~]# setfacl -b test         #删除所有acl权限</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="文件系统扩展属性"><a href="#文件系统扩展属性" class="headerlink" title="文件系统扩展属性"></a>文件系统扩展属性</h3><ul>
<li>命令<br><code>chattr</code>：设置， <code>lsattr</code>：查看<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chattr [+/-] [a/i] $filename</span><br></pre></td></tr></table></figure>
<code>+</code> 增加属性， <code>-</code> 减少属性； <code>a</code> ：只能追加内容， <code>i</code>：不能被修改<br>如 <code>+a</code>&#x3D; 只能追加内容， <code>+i</code>&#x3D; 不能被修改<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#chattr +i test   #root 都不能删除</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-8-RHEL7软件包管理</title>
    <url>/2015/12/06/linux/base/godLinux1-8/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>rpm管理软件</li>
<li>yun管理软件</li>
<li>源码管理软件</li>
</ul>
<h2 id="rpm管理软件"><a href="#rpm管理软件" class="headerlink" title="rpm管理软件"></a>rpm管理软件</h2><p>rpm （Redhat   package  manager）</p>
<ul>
<li>作用：管理rpm包</li>
<li>语法：rpm  【选项】  包名<br>参数<br>-i, –install                    install package(s)<br>-v, –verbose 详细             provide more detailed output<br>-h, –hash                     print hash marks as packageinstalls (good with -v) #安装时打印散列标记#号<br>-q， –query                   查询选项<br>-U, –upgrade&#x3D;<packagefile>+      升级软件包<br>-e, –erase&#x3D;<package>+            清除 (卸载) 软件包</li>
</ul>
<h3 id="rpm包"><a href="#rpm包" class="headerlink" title="rpm包"></a>rpm包</h3><ul>
<li>来源<br>独立下载或光盘镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#挂载光盘：</span></span><br><span class="line">[root@localhost ~]<span class="comment"># umount /dev/sr0</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mount /dev/sr0 /mnt/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>包名意义<br>zsh-5.0.2-7.el7.x86_64.rpm</li>
</ul>
<table>
<thead>
<tr>
<th>zsh</th>
<th>-5</th>
<th>.0</th>
<th>.2</th>
<th>-7</th>
<th>x86</th>
<th>64</th>
</tr>
</thead>
<tbody><tr>
<td>软件名</td>
<td>主版本号</td>
<td>此版本号</td>
<td>修订号</td>
<td>release（第几次发布版本）</td>
<td>CPU架构系统平台</td>
<td>支持的系统位数</td>
</tr>
</tbody></table>
<h3 id="rpm安装"><a href="#rpm安装" class="headerlink" title="rpm安装"></a>rpm安装</h3><pre><code>[root@localhost ~]# rpm -ivh /mnt/Packages/lrzsz-0.12.20-36.el7.x86_64.rpm
</code></pre>
<p>安装时，如果需要解决依赖关系。上rpm包相关的网站上找<br><a href="http://rpmfind.net/">http://rpmfind.net/</a><br><a href="http://rpm.pbone.net/">http://rpm.pbone.net/</a><br><a href="http://www.rpmseek.com/index.html">http://www.rpmseek.com/index.html</a></p>
<h3 id="rpm查询"><a href="#rpm查询" class="headerlink" title="rpm查询"></a>rpm查询</h3><ul>
<li><p>查询zsh软件是否安装<br>[root@localhost ~]# rpm -q zsh<br>zsh-5.0.2-7.el7.x86_64</p>
</li>
<li><p>查询系统所有安装过的rpm软件<br>[root@localhost ~]# rpm -qa<br><br>[root@localhost ~]# rpm -qa | grep zsh<br>zsh-5.0.2-7.el7.x86_64</p>
</li>
<li><p>查询zsh这个软件安装后，产生了那些文件和目录<br>[root@localhost ~]# rpm -ql zsh | more</p>
</li>
<li><p>zsh这个文件是那个软件安装的<br>[root@localhost ~]# rpm -qf  <code>which zsh</code><br>zsh-5.0.2-7.el7.x86_64</p>
</li>
<li><p>在软件没有安装之前进行查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qpl /mnt/Packages/lrzsz-0.12.20-36.el7.x86_64.rpm</span><br><span class="line">      warning:/mnt/Packages/lrzsz-0.12.20-36.el7.x86_64.rpm: Header V3 RSA/SHA256 Signature,key ID fd431d51: NOKEY</span><br><span class="line">      /usr/bin/rb</span><br><span class="line">      /usr/bin/rx</span><br></pre></td></tr></table></figure></li>
</ul>
<p>查看一个包的作用，凡是加上p则表示查询的包未安装。若查询已安装的包则去掉p</p>
<h3 id="rpm升级"><a href="#rpm升级" class="headerlink" title="rpm升级"></a>rpm升级</h3><pre><code>[root@localhost ~]# rpm-Uvh /mnt/Packages/lrzsz-0.12.20-36.el7.x86_64.rpm
</code></pre>
<h3 id="rpm卸载"><a href="#rpm卸载" class="headerlink" title="rpm卸载"></a>rpm卸载</h3><pre><code>[root@localhost ~]# rpm -e zsh                      只写软件包的名字，不用写版本号
</code></pre>
<h3 id="rpm签名验证"><a href="#rpm签名验证" class="headerlink" title="rpm签名验证"></a>rpm签名验证</h3><p>导入RPM-GPG-KEY安装rpm包时，对rpm的签名进行验证。验证的原理是：非对称加密。 导入公钥。验证rpm中的签名是否是对的。</p>
<pre><code>[root@localhost ~]# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release 
</code></pre>
<h2 id="YUM管理软件"><a href="#YUM管理软件" class="headerlink" title="YUM管理软件"></a>YUM管理软件</h2><p>YUM，自动装软件包（软件包管理），解决依赖关系问题、自动下载软件包。基于C&#x2F;S架构。</p>
<h3 id="YUM源"><a href="#YUM源" class="headerlink" title="YUM源"></a>YUM源</h3><p>YUM 基于C&#x2F;S架构， 软件需要来源，即 YUM源。 可以分为  <code>ftp    http   file（本地yum源）</code> 三类。</p>
<p>例如 ： 配置本地yum源<br>在 <code>/etc/yum.repos.d/</code> 目录下新建 <code>xxxx.repo</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/yum.repos.d/rhel7.repo</span></span><br><span class="line">[rhel7-yum]                  <span class="comment">#yum源名称，唯一的，用来区分不同的yum源</span></span><br><span class="line">name=rhel7-source            <span class="comment">#对yum源描述信息</span></span><br><span class="line">baseurl=file:///mnt          <span class="comment">#yum源的路径（repodata目录所在的目录）</span></span><br><span class="line">enabled=1                    <span class="comment">#为1，表示启用yum源</span></span><br><span class="line">gpgcheck=0                   <span class="comment">#为1，使用公钥检验rpm的正确性</span></span><br></pre></td></tr></table></figure>

<h3 id="YUM使用"><a href="#YUM使用" class="headerlink" title="YUM使用"></a>YUM使用</h3><ul>
<li><p>yum安装</p>
<pre><code>[root@localhost ~]# yum install zsh
</code></pre>
<p>选项 ：-y  #回答yes  取消交互</p>
<pre><code>[root@localhost ~]# yum -y install mariadb-server
</code></pre>
</li>
<li><p>yum安装一组软件包</p>
<pre><code>[root@localhost ~]# yum group list
[root@localhost ~]# yum group install &quot;Security Tools&quot;
</code></pre>
</li>
<li><p>yum查询</p>
<pre><code>[root@localhost ~]# yum list z*
[root@localhost ~]# yum search zsh
</code></pre>
</li>
<li><p>yum删除</p>
<pre><code>[root@localhost ~]# yum remove  zsh
</code></pre>
</li>
<li><p>清空yum缓存</p>
<pre><code>[root@localhost ~]# yum clean all
</code></pre>
</li>
<li><p>yum生成列表</p>
<pre><code>[root@localhost ~]# yum list
</code></pre>
</li>
</ul>
<h2 id="源码管理软件"><a href="#源码管理软件" class="headerlink" title="源码管理软件"></a>源码管理软件</h2><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p>前提：系统必须安装：开发工具、开发库</p>
<p>步骤：</p>
<ol>
<li><p>获得源码包</p>
</li>
<li><p>解压<br>tar</p>
</li>
<li><p>配置，检测安装环境<br>  .&#x2F;configure –prefix&#x3D;path  #检查安装环境是否符合需求，如果没有问题，生成：Makefile文件，  –prefix 参数 指定安装路径。这样删除或备份时，直接对删除这个目录操作就可以了。</p>
</li>
<li><p>编译<br>  make -j n (编译时会读取Makefile文件) n 为电脑cpu核数 -2 ， 并发编译</p>
</li>
<li><p>安装<br>  make install</p>
</li>
<li><p>删除<br>  make uninstall</p>
</li>
<li><p>再次编译<br>  make clean</p>
</li>
</ol>
<p>例：安装软件包extundelete-0.2.4.tar.bz2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># tar jxvf extundelete-0.2.4.tar.bz2</span></span><br><span class="line">  </span><br><span class="line">[root@localhost ~]<span class="comment"># cd extundelete-0.2.4/</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#指定安装路径</span></span><br><span class="line">[root@localhostextundelete-0.2.4]<span class="comment"># ./configure --prefix=/usr/local/extundelet</span></span><br><span class="line">Configuring extundelete0.2.4</span><br><span class="line">configure: error: Can<span class="string">&#x27;tfind ext2fs library</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">[root@localhostextundelete-0.2.4]# yum -y install e2fsprogs-devel</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">[root@localhostextundelete-0.2.4]# ./configure --prefix=/usr/local/extundelet</span></span><br><span class="line"><span class="string">Configuring extundelete0.2.4</span></span><br><span class="line"><span class="string">Writing generated filesto disk</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">#编译安装</span></span><br><span class="line"><span class="string">[root@localhostextundelete-0.2.4]# make &amp;&amp; make install</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">[root@localhostextundelete-0.2.4]# make uninstall</span></span><br><span class="line"><span class="string">Making uninstall in src</span></span><br><span class="line"><span class="string"> ( cd &#x27;</span>/usr/local/bin<span class="string">&#x27; &amp;&amp; rm -fextundelete )</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">#删除时只需删除路径即可：</span></span><br><span class="line"><span class="string">[root@localhost local]#rm -rf extundelet-rm/</span></span><br></pre></td></tr></table></figure>

<h3 id="安装-src-rpm源码包的方法"><a href="#安装-src-rpm源码包的方法" class="headerlink" title="安装.src.rpm源码包的方法"></a>安装.src.rpm源码包的方法</h3><ul>
<li><p>编译<br>将src.rpm中源码文件编译成可执行的二进制文件。</p>
<pre><code>rpmbuild --rebuild  lrzsz-0.12.20-27.1.el6.src.rpm
</code></pre>
</li>
</ul>
<p>若顺利执行成功则会在root用户根目录下生成一个: rpmbuild目录。在&#x2F;root&#x2F;rpmbuild&#x2F;RPMS&#x2F;x86_64&#x2F;目录下生成lrzsz-0.12.20-27.1.el6.x86_64.rpm这个rpm文件。</p>
<ul>
<li>安装</li>
</ul>
<p>接下来就是rpm的安装过程。</p>
<pre><code>  [root@localhostx86_64]# rpm  -e lrzsz
  [root@localhostx86_64]# rpm -vih lrzsz-0.12.20-27.1.el7.x86_64.rpm
</code></pre>
<h2 id="软件安装方法比较"><a href="#软件安装方法比较" class="headerlink" title="软件安装方法比较"></a>软件安装方法比较</h2><p>rpm＋yum：方便，软件版本低。稳定性好、管理方便。性能稍差。<br>源码手动：麻烦，软件版本新。稳定性稍差、管理稍差。性能好。  LAMP，LNMP</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>1-9 文件归档和解压缩</title>
    <url>/2015/12/06/linux/base/godLinux1-9/</url>
    <content><![CDATA[<h2 id="文件归档和解压缩"><a href="#文件归档和解压缩" class="headerlink" title="文件归档和解压缩"></a>文件归档和解压缩</h2><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><ul>
<li>作用：file 确定 filetype</li>
<li>用法：file &#x2F;etc&#x2F;passwd<br>注：<code>linux系统不根据后缀名识别文件类型，用file命令查看文件的类型。</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[sam1@localhost xuegod]$ file a</span><br><span class="line">a: directory</span><br><span class="line">[sam1@localhost xuegod]$ file p.txt </span><br><span class="line">p.txt: ASCII text</span><br><span class="line">[sam1@localhost xuegod]$ </span><br></pre></td></tr></table></figure>

<h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><ul>
<li>作用：打包、压缩文件</li>
<li>用法：tar [z&#x2F;j][c&#x2F;x][vf] archive文件名  源文件（目录）<br>  压缩方式： z&#x3D;gz压缩；  j&#x3D;bz2压缩<br>  类型：    c&#x3D;归档（压缩）；    x：解压<br>  v：详细<br>  f：filename<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tar -zcvf grub1.tar.gz /boot/grub2/</span><br><span class="line">[root@localhost ~]# tar -jcvf grub2.tar.bz2 /boot/grub2/</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><ul>
<li>作用：zip是压缩程序，unzip是解压程序。</li>
<li>用法：zip [-r] 文件源（&#x2F;目录）<br>unzip archive文件名<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# zippasswd.zip /etc/passwd #压缩文件：</span><br><span class="line">[root@localhost ~]# zip-r grub2.zip /boot/grub2/ # -r 压缩目录</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux service</title>
    <url>/2016/01/26/linux/service/2-0%20service/</url>
    <content><![CDATA[<p>主要内容</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>service</tag>
      </tags>
  </entry>
  <entry>
    <title>2-1 sshd</title>
    <url>/2016/01/26/linux/service/2-1%20sshd/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>安装</li>
<li>配置</li>
<li>公钥登录</li>
</ul>
<span id="more"></span>

<h2 id="公钥登录"><a href="#公钥登录" class="headerlink" title="公钥登录"></a>公钥登录</h2><h3 id="客户端生成公钥密钥对"><a href="#客户端生成公钥密钥对" class="headerlink" title="客户端生成公钥密钥对"></a>客户端生成公钥密钥对</h3><p><code>ssh-keygen -t rsa -C &quot;your_email@your_email.com&quot; -b 4096</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@server ~]# ssh-keygen -t rsa -C &quot;your_email@your_email.com&quot; -b 4096</span><br><span class="line">Generating public/private rsa key pair.     #提示正在生成rsa密钥对</span><br><span class="line">Enter file in which to save the key (~/.ssh/id_dsa):     #询问公钥和私钥存放的位置，回车用默认位置即可</span><br><span class="line">Enter passphrase (empty for no passphrase):     #询问输入私钥密语，输入密语</span><br><span class="line">Enter same passphrase again:     #再次提示输入密语确认</span><br><span class="line">Your identification has been saved in ~/.ssh/id_dsa.     #提示公钥和私钥已经存放在/root/.ssh/目录下</span><br><span class="line">Your public key has been saved in ~/.ssh/id_dsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">x6:68:xx:93:98:8x:87:95:7x:2x:4x:x9:81:xx:56:94 root@server     #提示key的指纹</span><br></pre></td></tr></table></figure>
<p>注意保护好 <code>私钥密语</code></p>
<h3 id="上传公钥"><a href="#上传公钥" class="headerlink" title="上传公钥"></a>上传公钥</h3><p>公钥放到用户目录的 .ssh 这个目录下（如果目录不存在，需要创建~&#x2F;.ssh目录，并把目录权限设置为700）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir ~/.ssh     #如果当前用户目录下没有 .ssh 目录，请先创建目录</span><br><span class="line">$ chmod 700 ~/.ssh</span><br><span class="line">$ </span><br><span class="line">$ #客户端上传公钥</span><br><span class="line">$ </span><br><span class="line">$ cat ~/.ssh/id_rsa.pub &gt; ~/.ssh/authorized_keys</span><br><span class="line">$ rm -f ~/.ssh/id_rsa.pub</span><br><span class="line">$ chmod 600 ~/.ssh/*</span><br></pre></td></tr></table></figure>

<p>可使用快捷命令 <code>ssh-copy-id</code></p>
<h3 id="关闭密码认证"><a href="#关闭密码认证" class="headerlink" title="关闭密码认证"></a>关闭密码认证</h3><p><code> vim /etc/ssh/sshd_config</code></p>
<p><code>PasswordAuthentication yes</code><br>–&gt;<br><code>PasswordAuthentication no</code></p>
<p><code>systemctl restart sshd</code></p>
<h3 id="SSH全局配置"><a href="#SSH全局配置" class="headerlink" title="SSH全局配置"></a>SSH全局配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">~/.ssh/config</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Host gitlab.xxx.com </span><br><span class="line">Hostname ip</span><br><span class="line">Port 34</span><br><span class="line"></span><br><span class="line">Host gitlab.out.xxx.cn</span><br><span class="line">Port 20022</span><br></pre></td></tr></table></figure>

<h3 id="SSH自动断开"><a href="#SSH自动断开" class="headerlink" title="SSH自动断开"></a>SSH自动断开</h3><ul>
<li>ssh配置<br><code>vim /etc/ssh/sshd_config</code>编辑</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ClientAliveInterval 0</span></span><br><span class="line"><span class="comment">#ClientAliveCountMax 0</span></span><br><span class="line">==&gt;</span><br><span class="line"></span><br><span class="line">ClientAliveInterval 60</span><br><span class="line">ClientAliveCountMax 15</span><br></pre></td></tr></table></figure>

<p><code>ClientAliveInterval</code> 指定服务器端向客户端请求消息的时间间隔, 默认是0, 不发送, 单位 秒<br><code>ClientAliveCountMax</code> 表示服务器发出请求后客户端没有响应的次数达到一定值, 就自动断开.</p>
<ul>
<li>$TMOUT<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用以下命令判断是否是否设置了该参数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$TMOUT</span></span><br><span class="line"><span class="comment"># 如果输出空或0表示不超时，大于0的数字n表示n秒没有收入则超时</span></span><br><span class="line"><span class="comment"># 修改方法</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="built_in">export</span> TMOUT=900</span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 将以上900修改为0就是设置不超时</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 让配置立即生效</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>sshd</tag>
      </tags>
  </entry>
  <entry>
    <title>shell （九） 色彩</title>
    <url>/2016/01/22/linux/shell/shell-10/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>色彩</li>
</ul>
<h2 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h2><p>shell脚本中echo显示内容带颜色显示,echo显示带颜色，需要使用参数-e开启转义</p>
<ul>
<li><p>格式</p>
<pre><code>echo -e &quot;\033[字背景颜色;文字颜色m字符串\033[0m&quot;
</code></pre>
</li>
</ul>
<p> <code>\033[</code> 是固定语法; <code>0m</code> 是清除所有格式</p>
<p>  例：<br>  <img src="http://7xklqw.com1.z0.glb.clouddn.com/shellColor1.png"><br>  其中42的位置代表底色，31的位置代表的是字的颜色</p>
<p>  注：<br>    1、字背景颜色和文字颜色之间是英文的”;”<br>    2、文字颜色后面有个m<br>    3、字符串前后可以没有空格，如果有的话，输出也是同样有空格</p>
<ul>
<li><p>颜色定义</p>
<p>可以自己来尝试找出不同颜色搭配<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/shellColor2.png"><br><img src="http://7xklqw.com1.z0.glb.clouddn.com/shellColor3.png"></p>
</li>
<li><p>最后面控制选项说明</p>
<pre><code>\33[0m 关闭所有属性
\33[1m 设置高亮度
\33[4m 下划线
\33[5m 闪烁
\33[7m 反显
\33[8m 消隐
\33[30m — \33[37m 设置前景色
\33[40m — \33[47m 设置背景色
\33[nA 光标上移n行
\33[nB 光标下移n行
\33[nC 光标右移n行
\33[nD 光标左移n行
\33[y;xH设置光标位置
\33[2J 清屏
\33[K 清除从光标到行尾的内容
\33[s 保存光标位置
\33[u 恢复光标位置
\33[?25l 隐藏光标 
\33[?25h 显示光标
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell （二） 替换</title>
    <url>/2015/12/28/linux/shell/shell-2/</url>
    <content><![CDATA[<p>主要内容：</p>
<ul>
<li>转义符</li>
<li>命令替换</li>
<li>变量替换</li>
</ul>
<span id="more"></span>

<h2 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h2><p>如果表达式中包含特殊字符，Shell 将会进行替换，转义字符也是一种替换。<br>下面的转义字符都可以用在 echo 中：</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>\</td>
<td>反斜杠</td>
</tr>
<tr>
<td>\a</td>
<td>警报，响铃</td>
</tr>
<tr>
<td>\b</td>
<td>退格（删除键）</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
<tr>
<td>\t</td>
<td>水平制表符（tab键）</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表符</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">╭─sam@sam  ~  </span><br><span class="line">╰─$ <span class="built_in">echo</span> -E <span class="string">&quot;Value of a is \n nnnnnnnnnnn &quot;</span></span><br><span class="line">Value of a is \n nnnnnnnnnnn </span><br><span class="line">  </span><br><span class="line">╭─sam@sam  ~  </span><br><span class="line">╰─$ <span class="built_in">echo</span>  <span class="string">&quot;Value of a is \n nnnnnnnnnnn &quot;</span> </span><br><span class="line">Value of a is </span><br><span class="line">nnnnnnnnnnn </span><br><span class="line">  </span><br><span class="line">╭─sam@sam  ~  </span><br><span class="line">╰─$ <span class="built_in">echo</span> -e <span class="string">&quot;Value of a is \n nnnnnnnnnnn &quot;</span></span><br><span class="line">Value of a is </span><br><span class="line">nnnnnnnnnnn </span><br></pre></td></tr></table></figure>

<p>可以使用 echo 命令的 -E 选项禁止转义， -e 选项是转义；<code>默认是不转义的</code>;<br>在没有 -E 的情况下,可承认并可以内置替换以下序列:</p>
<pre><code>    \NNN  字符的ASCII代码为NNN(八进制)
    \\    反斜线
    \a    报警符(BEL)
    \b    退格符
    \c    禁止尾随的换行符
    \f    换页符
    \n    换行符
    \r    回车符
    \t    水平制表符
    \v    纵向制表符
</code></pre>
<h2 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h2><p>两种方式：</p>
<ul>
<li><code>反引号</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#A=`date`</span><br><span class="line">[root@localhost ~]#echo $A</span><br><span class="line">Thu Dec 24 21:14:24 CST2015</span><br></pre></td></tr></table></figure>

<ul>
<li><code>$()</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# B=$(date)</span><br><span class="line">[root@localhost ~]# echo $B</span><br><span class="line">Thu Dec 24 21:17:48 CST2015</span><br></pre></td></tr></table></figure>

















<h2 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换"></a>变量替换</h2><p>变量替换可以根据变量的状态（是否为空、是否定义等）来改变它的值</p>
<p>可以使用的变量替换形式：</p>
<table>
<thead>
<tr>
<th>形式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>${var}</td>
<td>变量本来的值</td>
</tr>
<tr>
<td>${var:-word}</td>
<td>如果变量 var 为空或已被删除(unset)，那么返回 word，但不改变 var 的值。</td>
</tr>
<tr>
<td>${var:+word}</td>
<td>如果变量 var 被定义，              那么返回 word，但不改变 var 的值。</td>
</tr>
<tr>
<td>${var:&#x3D;word}</td>
<td>如果变量 var 为空或已被删除(unset)，那么返回 word，并将 var 的值 <code>设置</code> 为 word。</td>
</tr>
<tr>
<td>${var:?message}</td>
<td>如果变量 var 为空或已被删除(unset)，那么将消息 message 送到 <code>标准错误输出</code>，可以用来检测变量 var 是否可以被正常赋值。 若此替换出现在Shell脚本中，那么脚本将停止运行。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell （一） 基础</title>
    <url>/2015/12/25/linux/shell/shell-1/</url>
    <content><![CDATA[<p>基本内容</p>
<ul>
<li>元字符</li>
<li>变量</li>
<li>注释</li>
</ul>
<span id="more"></span>

<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>具有特定功能的保留字<br><code>IFS（交换字段分隔符）</code>：由<space> <tab> <enter>三者之一组成（我们常用space），用来拆分command line的每一个词（word）用的，因为shell command line是按词来处理的。<br><code>CR（回车键）</code> ： 由<enter>产生，用来结束command line。<br><code>=</code> ：  设定变量。<br><code>$</code> ：  做变量或运算替换(请不要与 shell prompt 搞混了)。<br><code>&gt;</code> ：  重定向 stdout（标准输出standard out）。<br><code>&lt;</code> ：  重定向 stdin（标准输入standard in）。<br><code>|</code>：   管道命令。<br><code>&amp;</code> ：  重定向 file descriptor （文件描述符），或将命令置于后台执行。<br><code>( )</code>： 將其內的命令置于 nested subshell （嵌套的子shell）执行，或用于运算或命令替换。<br><code>&#123; &#125;</code>： 將其內的命令置于 non-named function（未命名函数） 中执行，或用在变量替换的界定范围。<br><code>;</code> ：  在前一个命令结束时，而忽略其返回值，继续执行下一個命令。<br><code>&amp;&amp;</code> ： 在前一個命令结束时，若返回值为 true，继续执行下一個命令。<br><code>||</code> ： 在前一個命令结束时，若返回值为 false，继续执行下一個命令。<br><code>!</code>：   执行 history 列表中的命令<br><code>;</code> : 分隔同一行的2条shell语句。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>临时变量：是shell程序内部定义的，其使用范围仅限于定义它的程序，对其它程序不可见。<br>环境变量(永久变量): 其值不随shell 脚本的执行结束而消失。</p>
<h3 id="自定义环境变量"><a href="#自定义环境变量" class="headerlink" title="自定义环境变量"></a>自定义环境变量</h3><p>编辑用户配置文件，利用export修改环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#export PATH=/root:$PATH</span><br><span class="line">source 配置文件 #及时生效</span><br></pre></td></tr></table></figure>

<h3 id="临时变量"><a href="#临时变量" class="headerlink" title="临时变量"></a>临时变量</h3><p>由字母或下划线打头。 由字母、数字或下划线组成，并且大小写字母意义不同。变量名长度没有限制。<br>使用变量值时，要在变量名前加上“$”</p>
<h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><p>赋值号“&#x3D;”两边应没有空格。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# abc = 123</span><br><span class="line">bash: abc: command not found...</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]# abc=123</span><br></pre></td></tr></table></figure>

<h4 id="命令赋给变量"><a href="#命令赋给变量" class="headerlink" title="命令赋给变量"></a>命令赋给变量</h4><p>两种方式：</p>
<ul>
<li><code>反引号</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#A=`date`</span><br><span class="line">[root@localhost ~]#echo $A</span><br><span class="line">Thu Dec 24 21:14:24 CST2015</span><br></pre></td></tr></table></figure>

<ul>
<li><code>$()</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# B=$(date)</span><br><span class="line">[root@localhost ~]# echo $B</span><br><span class="line">Thu Dec 24 21:17:48 CST2015</span><br></pre></td></tr></table></figure>

<h4 id="单引号和双引号的区别"><a href="#单引号和双引号的区别" class="headerlink" title="单引号和双引号的区别"></a>单引号和双引号的区别</h4><p>单引号之间的内容成为纯文本，取消所有特殊符号的意义；<br>双引号仅特殊符号 <strong>$ \ &#96;</strong> 这三个的含义保留。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#NAME=&quot;rm  mk  docker&quot;</span><br><span class="line">[root@localhost ~]#echo $NAME</span><br><span class="line">rm mk docker</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]#NAME=&#x27;rm  mk  docker&#x27;</span><br><span class="line">[root@localhost ~]#echo $NAME</span><br><span class="line">rm mk docker</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]#NAME=&quot;rm $NAME&quot;</span><br><span class="line">[root@localhost ~]#echo $NAME</span><br><span class="line">rm rm mk docker</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]#NAME=&#x27;rm $NAME&#x27;</span><br><span class="line">[root@localhost ~]#echo $NAME</span><br><span class="line">rm $NAME</span><br></pre></td></tr></table></figure>

<h4 id="unset-readonly"><a href="#unset-readonly" class="headerlink" title="unset readonly"></a>unset readonly</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unset variable_name #删除变量</span><br><span class="line">readonly variable_name #只读变量</span><br></pre></td></tr></table></figure>

<h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><table>
<thead>
<tr>
<th>变量</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>$0</td>
<td>当前脚本的文件名</td>
</tr>
<tr>
<td>$n</td>
<td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。</td>
</tr>
<tr>
<td>!$</td>
<td>上个命令最后一个参数</td>
</tr>
<tr>
<td>$#</td>
<td>传递给脚本或函数的参数个数。</td>
</tr>
<tr>
<td>$*</td>
<td>传递给脚本或函数的所有参数。</td>
</tr>
<tr>
<td>$@</td>
<td>传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同，下面将会讲到。</td>
</tr>
<tr>
<td>$?</td>
<td>上个命令的退出状态，或函数的返回值。</td>
</tr>
<tr>
<td>$$</td>
<td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td>
</tr>
<tr>
<td>$!</td>
<td>执行上一个后台程序的PID</td>
</tr>
<tr>
<td><code>$*</code> 和 <code>$@</code> 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以”$1” “$2” … “$n” 的形式输出所有参数。</td>
<td></td>
</tr>
<tr>
<td>但是当它们被双引号(“ “)包含时，<code>$*</code> 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；<code>$@</code> 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数。</td>
<td></td>
</tr>
</tbody></table>
<h3 id="常用PATTERN："><a href="#常用PATTERN：" class="headerlink" title="常用PATTERN："></a>常用PATTERN：</h3><pre><code>^#:   以#开头
#$:   以#结尾
^$:   空行
</code></pre>
<h3 id="Read命令："><a href="#Read命令：" class="headerlink" title="Read命令："></a>Read命令：</h3><p>作用：从键盘读入数据，赋给变量<br>参数 ：-p    -n   -t参数结合使用<br>-p(提示语句)<br>-n(字符个数)<br>-t(等待时间)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim read1.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p  <span class="string">&quot;请输入你的姓名：&quot;</span>  YYNAME</span><br><span class="line"><span class="built_in">read</span> -p  <span class="string">&quot;请输入你的年龄：&quot;</span>  YYAGE</span><br><span class="line"><span class="built_in">read</span> -p  <span class="string">&quot;请输入你的性别：&quot;</span>  YYSEX</span><br><span class="line">  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你的基本信息如下：&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;姓名：<span class="variable">$YYNAME</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;年龄：<span class="variable">$YYAGE</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;性别：<span class="variable">$YYSEX</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="expr-命令"><a href="#expr-命令" class="headerlink" title="expr 命令"></a>expr 命令</h3><p>作用：Shell变量的算术运算：<br>expr命令：对整数型变量进行算术运算<br>语法： expr  表达式    #注意 运算符之间要有空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#expr 3 + 5</span><br><span class="line">8</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]#expr 8 - 5</span><br><span class="line">3</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]#expr 8 / 4</span><br><span class="line">2</span><br><span class="line">  </span><br><span class="line">[root@localhost ~]#expr 8 \* 4</span><br><span class="line">32</span><br></pre></td></tr></table></figure>
<p><code>注意：乘号(*)前边必须加反斜杠(\)才能实现乘法运算</code></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>以“#”开头的行就是注释，会被解释器忽略。<br>没有多行注释，只能每一行加一个#号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##### 用户配置区 开始 #####</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 项目根目录</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">##### 用户配置区 结束  #####</span></span><br></pre></td></tr></table></figure>

<p>遇到大段的代码需要临时注释起来，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。 </p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell （三） 运算符</title>
    <url>/2015/12/28/linux/shell/shell-3/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>Bash 支持很多运算符，包括</p>
<ul>
<li>算数运算符</li>
<li>关系运算符</li>
<li>布尔运算符</li>
<li>字符串运算符</li>
<li>文件测试运算符</li>
</ul>
<span id="more"></span>


<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p>
<p>先来看一个使用算术运算符的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line">  </span><br><span class="line">val=`expr $a + $b`</span><br><span class="line">echo &quot;a + b : $val&quot;</span><br><span class="line">  </span><br><span class="line">val=`expr $a - $b`</span><br><span class="line">echo &quot;a - b : $val&quot;</span><br><span class="line">  </span><br><span class="line">val=`expr $a \* $b`</span><br><span class="line">echo &quot;a * b : $val&quot;</span><br><span class="line">  </span><br><span class="line">val=`expr $b / $a`</span><br><span class="line">echo &quot;b / a : $val&quot;</span><br><span class="line">  </span><br><span class="line">val=`expr $b % $a`</span><br><span class="line">echo &quot;b % a : $val&quot;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<pre><code>  a + b : 30
  a - b : -10
  a * b : 200
  b / a : 2
  b % a : 0
  
</code></pre>
<p><code>注意</code> ：</p>
<ul>
<li>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</li>
<li>完整的表达式要被 ** ` ** 包含，注意这个字符是反引号</li>
<li>乘号(*)前边必须加反斜杠()才能实现乘法运算；</li>
</ul>
<h3 id="算术运算符列表"><a href="#算术运算符列表" class="headerlink" title="算术运算符列表"></a>算术运算符列表</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加法</td>
<td><code>expr $a + $b</code> 结果为 30。</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
<td><code>expr $a - $b</code> 结果为 10。</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
<td><code>expr $a \* $b</code> 结果为  200。</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>除法</td>
<td><code>expr $b / $a</code> 结果为 2。</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
<td><code>expr $b % $a</code> 结果为 0。</td>
</tr>
<tr>
<td>&#x3D;</td>
<td>赋值</td>
<td>a&#x3D;$b 将把变量 b 的值赋给 a。</td>
</tr>
<tr>
<td>&#x3D;&#x3D;</td>
<td>相等。用于比较两个数字，相同则返回 true。</td>
<td>[ $a &#x3D;&#x3D; $b ] 返回 false。</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>不相等。用于比较两个数字，不相同则返回 true。</td>
<td>[ $a !&#x3D; $b ] 返回 true。</td>
</tr>
</tbody></table>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>-eq</td>
<td>检测两个数是否相等，相等返回 true。</td>
<td>[ $a -eq $b ] 返回 true。</td>
</tr>
<tr>
<td>-ne</td>
<td>检测两个数是否相等，不相等返回 true。</td>
<td>[ $a -ne $b ] 返回 true。</td>
</tr>
<tr>
<td>-gt</td>
<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>
<td>[ $a -gt $b ] 返回 false。</td>
</tr>
<tr>
<td>-lt</td>
<td>检测左边的数是否小于右边的，如果是，则返回 true。</td>
<td>[ $a -lt $b ] 返回 true。</td>
</tr>
<tr>
<td>-ge</td>
<td>检测左边的数是否大等于右边的，如果是，则返回 true。</td>
<td>[ $a -ge $b ] 返回 false。</td>
</tr>
<tr>
<td>-le</td>
<td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td>
<td>[ $a -le $b ] 返回 true。</td>
</tr>
</tbody></table>
<h2 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>非运算，表达式为 true 则返回 false，否则返回 true。</td>
<td>[ ! false ] 返回 true。</td>
</tr>
<tr>
<td>-o</td>
<td>或运算，有一个表达式为 true 则返回 true。</td>
<td>[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td>
</tr>
<tr>
<td>-a</td>
<td>与运算，两个表达式都为 true 才返回 true。</td>
<td>[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td>
</tr>
</tbody></table>
<h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>检测两个字符串是否相等，相等返回 true。</td>
<td>[ $a &#x3D; $b ] 返回 false。</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>检测两个字符串是否相等，不相等返回 true。</td>
<td>[ $a !&#x3D; $b ] 返回 true。</td>
</tr>
<tr>
<td>-z</td>
<td>检测字符串长度是否为0，为0返回 true。</td>
<td>[ -z $a ] 返回 false。</td>
</tr>
<tr>
<td>-n</td>
<td>检测字符串长度是否为0，不为0返回 true。</td>
<td>[ -z $a ] 返回 true。</td>
</tr>
<tr>
<td>str</td>
<td>检测字符串是否为空，不为空返回 true。</td>
<td>[ $a ] 返回 true。</td>
</tr>
</tbody></table>
<h2 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h2><p>文件测试运算符用于检测 Unix 文件的各种属性。</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>-b file</td>
<td>检测文件是否是块设备文件，如果是，则返回 true。</td>
<td>[ -b $file ] 返回 false。</td>
</tr>
<tr>
<td>-c file</td>
<td>检测文件是否是字符设备文件，如果是，则返回 true。</td>
<td>[ -c $file ] 返回 false。</td>
</tr>
<tr>
<td>-d file</td>
<td>检测文件是否是目录，如果是，则返回 true。</td>
<td>[ -d $file ] 返回 false。</td>
</tr>
<tr>
<td>-f file</td>
<td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>
<td>[ -f $file ] 返回 true。</td>
</tr>
<tr>
<td>-g file</td>
<td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td>
<td>[ -g $file ] 返回 false。</td>
</tr>
<tr>
<td>-k file</td>
<td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>
<td>[ -k $file ] 返回 false。</td>
</tr>
<tr>
<td>-p file</td>
<td>检测文件是否是具名管道，如果是，则返回 true。</td>
<td>[ -p $file ] 返回 false。</td>
</tr>
<tr>
<td>-u file</td>
<td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td>
<td>[ -u $file ] 返回 false。</td>
</tr>
<tr>
<td>-r file</td>
<td>检测文件是否可读，如果是，则返回 true。</td>
<td>[ -r $file ] 返回 true。</td>
</tr>
<tr>
<td>-w file</td>
<td>检测文件是否可写，如果是，则返回 true。</td>
<td>[ -w $file ] 返回 true。</td>
</tr>
<tr>
<td>-x file</td>
<td>检测文件是否可执行，如果是，则返回 true。</td>
<td>[ -x $file ] 返回 true。</td>
</tr>
<tr>
<td>-s file</td>
<td>检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>
<td>[ -s $file ] 返回 true。</td>
</tr>
<tr>
<td>-e file</td>
<td>检测文件（包括目录）是否存在，如果是，则返回 true。</td>
<td>[ -e $file ] 返回 true。</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -r <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;File has read access&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;File does not have read access&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ -w <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;File has write permission&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;File does not have write permission&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ -x <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;File has execute permission&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;File does not have execute permission&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;File is an ordinary file&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;This is sepcial file&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;File is a directory&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;This is not a directory&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ -s <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;File size is zero&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;File size is not zero&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;File exists&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;File does not exist&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell （四） 字符串</title>
    <url>/2015/12/28/linux/shell/shell-4/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>字符串拼接</li>
<li>字符串长度</li>
<li>字符串截取</li>
<li>字符串查找</li>
</ul>
<p>字符串是shell编程中最常用最有用的数据类型，字符串可以用单引号，也可以用双引号，也可以不用引号。</p>
<p>单引号和双引号的区别 : </p>
<ul>
<li>单引号之间的内容成为纯文本，取消所有特殊符号的意义；</li>
<li>双引号仅特殊符号 <strong>$ \ &#96;</strong> 这三个的含义保留。<span id="more"></span></li>
</ul>
<h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;sam&quot;</span></span><br><span class="line">greeting=<span class="string">&quot;hello, &quot;</span><span class="variable">$name</span><span class="string">&quot; !&quot;</span></span><br><span class="line">greeting_1=<span class="string">&quot;hello, <span class="variable">$&#123;name&#125;</span> !&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;abcd&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment"># 4</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;Hello world, shell&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:0:4&#125;</span> <span class="comment">#输出Hell</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:4&#125;</span> <span class="comment">#输出ello</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:1&#125;</span> <span class="comment">#输出e</span></span><br></pre></td></tr></table></figure>

<p><code>$&#123;string:index:length&#125;</code> , index 从 0 开始。</p>
<h2 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string=&quot;alibaba is a great company&quot;</span><br><span class="line">echo `expr index &quot;$string&quot; is` #3 ， i或s最早出现的地方</span><br></pre></td></tr></table></figure>

<p>待找个更好的</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell （五） 数组</title>
    <url>/2015/12/28/linux/shell/shell-5/</url>
    <content><![CDATA[<p>主要内容<br>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。</p>
<ul>
<li>数组定义</li>
<li>数组读取</li>
<li>数组长度<span id="more"></span></li>
</ul>
<h2 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h2><p>在Shell中，用括号来表示数组，数组元素用“空格”符号分割开。定义数组的一般形式为：<br>      array_name&#x3D;(value1 … valuen)</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array_name=(value0 value1 value2 value3)</span><br><span class="line">  </span><br><span class="line">#或者</span><br><span class="line">array_name=(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br><span class="line">)</span><br><span class="line">    </span><br><span class="line">#或者    </span><br><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[2]=value2</span><br><span class="line">#可以不使用连续的下标，而且下标的范围没有限制。 </span><br></pre></td></tr></table></figure>





<h2 id="数组读取"><a href="#数组读取" class="headerlink" title="数组读取"></a>数组读取</h2><p>读取数组元素值的一般格式是：<br>      ${array_name[index]}</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">valuen=$&#123;array_name[2]&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>@ 或 * </code> 可以获取数组中的所有元素，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;array_name[*]&#125;</span><br><span class="line">$&#123;array_name[@]&#125;</span><br></pre></td></tr></table></figure>



<h2 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h2><p>获取数组长度的方法与获取字符串长度的方法相同, <code>#</code></p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 取得数组元素的个数</span><br><span class="line">length=$&#123;#array_name[@]&#125;</span><br><span class="line"># 或者</span><br><span class="line">length=$&#123;#array_name[*]&#125;</span><br><span class="line"># 取得数组单个元素的长度</span><br><span class="line">lengthn=$&#123;#array_name[n]&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell （六） 条件</title>
    <url>/2015/12/28/linux/shell/shell-6/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>if … else 语句</li>
<li>case … esac 语句</li>
<li></li>
</ul>
<span id="more"></span>


<h2 id="if-…-else-语句"><a href="#if-…-else-语句" class="headerlink" title="if … else 语句"></a>if … else 语句</h2><p>Shell 有三种 if … else 语句：</p>
<pre><code>if ... fi 语句；
if ... else ... fi 语句；
if ... elif ... else ... fi 语句。
</code></pre>
<h3 id="if-…-fi"><a href="#if-…-fi" class="headerlink" title="if … fi"></a>if … fi</h3><p><code>if ... fi</code> 语句的语法：</p>
<pre><code>if [ expression ]
then
  Statement(s) to be executed if expression is true
fi
</code></pre>
<p>注意：expression 和方括号([ ])之间必须有空格，否则会有语法错误。</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;a is equal to b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;a is not equal to b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="if-…-else-…-fi-语句"><a href="#if-…-else-…-fi-语句" class="headerlink" title="if … else … fi 语句"></a>if … else … fi 语句</h3><p><code>if ... else ... fi</code> 语句的语法：</p>
<pre><code>if [ expression ]
then
  Statement(s) to be executed if expression is true
else
  Statement(s) to be executed if expression is not true
fi
</code></pre>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;a is equal to b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;a is not equal to b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>


<h3 id="if-…-elif-…-fi-语句"><a href="#if-…-elif-…-fi-语句" class="headerlink" title="if … elif … fi 语句"></a>if … elif … fi 语句</h3><p><code>if ... elif ... fi</code> 语句可以对多个条件进行判断，语法为：</p>
<pre><code>if [ expression 1 ]
then
  Statement(s) to be executed if expression 1 is true
  
elif [ expression 2 ]
then
  Statement(s) to be executed if expression 2 is true

elif [ expression 3 ]
then
  Statement(s) to be executed if expression 3 is true

else
  Statement(s) to be executed if no expression is true
fi
</code></pre>
<p>哪一个 expression 的值为 true，就执行哪个 expression 后面的语句；如果都为 false，那么不执行任何语句。</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;a is equal to b&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;a is greater than b&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;a is less than b&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;None of the condition met&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>if … else 语句也经常与 test 命令结合使用， test 命令用于检查某个条件是否成立，与方括号([ ])类似。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[a] -eq $[b]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;The two numbers are equal!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;The two numbers are not equal!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>









<h2 id="case-…-esac-语句"><a href="#case-…-esac-语句" class="headerlink" title="case … esac 语句"></a>case … esac 语句</h2><p><code>case ... esac</code> 是一种多分枝选择结构。case 语句匹配一个值或一个模式，如果匹配成功，执行相匹配的命令。<br>case语句格式如下：</p>
<pre><code>case 值 in
模式1)
command1
command2
command3
;;

模式2)
command1
command2
command3
;;

*)
command1
command2
command3
;;
esac
</code></pre>
<p>取值后面必须为关键字 in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。<br>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Input a number between 1 to 4&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Your number is:\c&#x27;</span></span><br><span class="line"><span class="built_in">read</span> num</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$num</span> <span class="keyword">in</span></span><br><span class="line">    1)  <span class="built_in">echo</span> <span class="string">&#x27;You select 1&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    2)  <span class="built_in">echo</span> <span class="string">&#x27;You select 2&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    3)  <span class="built_in">echo</span> <span class="string">&#x27;You select 3&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    4)  <span class="built_in">echo</span> <span class="string">&#x27;You select 4&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    *)  <span class="built_in">echo</span> <span class="string">&#x27;You do not select a number between 1 to 4&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">option=<span class="string">&quot;<span class="variable">$&#123;1&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$&#123;option&#125;</span> <span class="keyword">in</span></span><br><span class="line">  </span><br><span class="line">   -f) FILE=<span class="string">&quot;<span class="variable">$&#123;2&#125;</span>&quot;</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;File name is <span class="variable">$FILE</span>&quot;</span></span><br><span class="line">      ;;</span><br><span class="line">   -d) DIR=<span class="string">&quot;<span class="variable">$&#123;2&#125;</span>&quot;</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Dir name is <span class="variable">$DIR</span>&quot;</span></span><br><span class="line">      ;;</span><br><span class="line">   *) </span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;`basename <span class="variable">$&#123;0&#125;</span>`:usage: [-f file] | [-d directory]&quot;</span></span><br><span class="line">      <span class="built_in">exit</span> 1 <span class="comment"># Command to come out of the program with status 1</span></span><br><span class="line">      ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>


<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展 (())"></a>扩展 (())</h2><p>条件测试使用 <code>[]</code> 时候，必须保证运算符与算数之间有空格。四则运算也只能借助：expr命令完成。 双括号 <code>(())</code> 结构语句，可以扩展shell中算数及赋值运算。</p>
<p>使用方法：</p>
<p>语法：</p>
<p>（（表达式1,表达式2…））</p>
<p>特点：</p>
<p>1、在双括号结构中，所有表达式可以像c语言一样，如：a++,b–等。 a&#x3D;a+1</p>
<p>2、在双括号结构中，所有变量可以不加入：“$”符号前缀。</p>
<p>3、双括号可以进行逻辑运算，四则运算</p>
<p>4、双括号结构 扩展了for，while,if条件测试运算</p>
<p>5、支持多个表达式运算，各个表达式之间用逗号“，”分开</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell （七） 循环</title>
    <url>/2015/12/28/linux/shell/shell-7/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>for循环</li>
<li>while循环</li>
<li>until循环</li>
<li>跳出循环<span id="more"></span></li>
</ul>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>for循环一般格式为：</p>
<pre><code>for 变量 in 列表
do
command1
command2
...
commandN
done
</code></pre>
<p>列表是一组值（数字、字符串等）组成的序列，每个值通过空格分隔。每循环一次，就将列表中的下一个值赋给变量。<br><code>in</code> 列表是可选的，如果不用它，for 循环使用命令行的位置参数。</p>
<ul>
<li>例一<br>顺序输出当前列表中的数字：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for loop in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line">    echo &quot;The value is: $loop&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<ul>
<li>例二<br>顺序输出字符串中的字符：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for str in &#x27;This is a string&#x27;</span><br><span class="line">do</span><br><span class="line">    echo $str</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<ul>
<li>例三<br>显示主目录下以 .bash 开头的文件：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">for FILE in $HOME/.bash*</span><br><span class="line">do</span><br><span class="line">    echo $FILE</span><br><span class="line">done</span><br></pre></td></tr></table></figure>


<h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件，条件为真时继续循环。其格式为：</p>
<pre><code>while command
do
  Statement(s) to be executed if command is true
done
</code></pre>
<ul>
<li>例一<br>COUNTER计数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COUNTER=0</span><br><span class="line">while [ $COUNTER -lt 5 ]</span><br><span class="line">do</span><br><span class="line">    COUNTER=&#x27;expr $COUNTER+1&#x27;</span><br><span class="line">    echo $COUNTER</span><br><span class="line">done</span><br></pre></td></tr></table></figure>


<ul>
<li>例二<br>读取键盘信息，按<Ctrl-D>结束循环。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;type &lt;CTRL-D&gt; to terminate&#x27;</span><br><span class="line">echo -n &#x27;enter your most liked film: &#x27;</span><br><span class="line">while read FILM</span><br><span class="line">do</span><br><span class="line">    echo &quot;Yeah! great film the $FILM&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>





<h2 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h2><p>until 循环执行一系列命令直至条件为 true 时停止。until 循环与 while 循环在处理方式上刚好相反。<br>command 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。<br>until 循环格式为：</p>
<pre><code>until command
do
  Statement(s) to be executed until command is true
done
</code></pre>
<ul>
<li>例<br>输出 0 ~ 9</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=0</span><br><span class="line">until [ ! $a -lt 10 ]</span><br><span class="line">do</span><br><span class="line">   echo $a</span><br><span class="line">   a=`expr $a + 1`</span><br><span class="line">done</span><br></pre></td></tr></table></figure>











<h2 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h2><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell也使用 break 和 continue 来跳出循环。 </p>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break命令允许跳出本层所有循环（终止执行后面的所有循环）</p>
<p><code>break n</code> 表示跳出第 n 层循环。</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var1 <span class="keyword">in</span> 1 2 3</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="keyword">for</span> var2 <span class="keyword">in</span> 0 5</span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> [ <span class="variable">$var1</span> -eq 2 -a <span class="variable">$var2</span> -eq 0 ]</span><br><span class="line">      <span class="keyword">then</span></span><br><span class="line">         <span class="built_in">break</span> 2</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$var1</span> <span class="variable">$var2</span>&quot;</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">   <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>如上，break 2 表示直接跳出外层循环。 </p>
<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。<br><code>continue n</code> 表示跳出第 n 层循环。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell （八） 函数, 文件包含, 转码工具</title>
    <url>/2015/12/28/linux/shell/shell-8/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>函数</li>
<li>文件包含</li>
<li>转码工具<!-- more  --></li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数可以将一个复杂功能划分成若干模块，让程序结构更加清晰，代码重复利用率更高。函数必须先定义后使用。</p>
<h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>定义格式如下：<br>    function function_name () {<br>    list of commands<br>    [ return value ]<br>    }</p>
<p>或</p>
<pre><code>function_name () &#123;
list of commands
[ return value ]
&#125;
</code></pre>
<p><code>function</code> 可以省略，清晰起见，还是建议加上。</p>
<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul>
<li>函数可以显式增加return语句；如果不加，会将最后一条命令运行结果作为返回值。</li>
<li>Shell 函数返回值只能是整数，一般用来表示函数执行成功与否，0表示成功，其他值表示失败。如果 return 其他数据，比如一个字符串，往往会得到错误提示：“numeric argument required”。</li>
<li>如果一定要让函数返回字符串，那么可以先定义一个变量，用来接收函数的计算结果，脚本在需要的时候访问这个变量来获得函数返回值。</li>
</ul>
<p>例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">funWithReturn()&#123;</span><br><span class="line">    echo &quot;The function is to get the sum of two numbers...&quot;</span><br><span class="line">    echo -n &quot;Input first number: &quot;</span><br><span class="line">    read aNum</span><br><span class="line">    echo -n &quot;Input another number: &quot;</span><br><span class="line">    read anotherNum</span><br><span class="line">    echo &quot;The two numbers are $aNum and $anotherNum !&quot;</span><br><span class="line">    return $(($aNum+$anotherNum))</span><br><span class="line">&#125;</span><br><span class="line">funWithReturn</span><br><span class="line"># Capture value returnd by last command</span><br><span class="line">ret=$?</span><br><span class="line">echo &quot;The sum of two numbers is $ret !&quot;</span><br></pre></td></tr></table></figure>

<h3 id="函数删除"><a href="#函数删除" class="headerlink" title="函数删除"></a>函数删除</h3><p>删除函数也可以使用 unset 命令，不过要加上 .f 选项，如下所示：</p>
<pre><code>$unset .f function_name
</code></pre>
<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>调用只需要给出函数名，不需要加括号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Define your function here</span><br><span class="line">Hello () &#123;</span><br><span class="line">   echo &quot;Url is http://giveme5.top&quot;</span><br><span class="line">&#125;</span><br><span class="line"># Invoke your function</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure>




<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…<br>注意，当n&gt;&#x3D;10时，需要使用 <code>$&#123;n&#125;</code> 来获取参数。 获取第十个参数需要 <code>$&#123;10&#125;</code> ， $10 不能获取第十个参数。</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">funWithParam</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The value of the first parameter is <span class="variable">$1</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The value of the second parameter is <span class="variable">$2</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The value of the tenth parameter is <span class="variable">$10</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The value of the tenth parameter is <span class="variable">$&#123;10&#125;</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The value of the eleventh parameter is <span class="variable">$&#123;11&#125;</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The amount of the parameters is <span class="variable">$#</span> !&quot;</span>  <span class="comment"># 参数个数</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The string of the parameters is $* !&quot;</span>  <span class="comment"># 传递给函数的所有参数</span></span><br><span class="line">&#125;</span><br><span class="line">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<pre><code>he value of the first parameter is 1 !
The value of the second parameter is 2 !
The value of the tenth parameter is 10 !
The value of the tenth parameter is 34 !
The value of the eleventh parameter is 73 !
The amount of the parameters is 12 !
The string of the parameters is 1 2 3 4 5 6 7 8 9 34 73 !&quot;
</code></pre>
<p>另外：<br>几个特殊变量用来处理参数（<a href="/2015/12/25/linux/xuegodLinux/godLinux1-24-28-shell/godLinux1-24/#%E7%89%B9%E6%AE%8A%E5%8F%98%E9%87%8F">更多特殊变量</a>）：</p>
<table>
<thead>
<tr>
<th>特殊变量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>$#</td>
<td>传递给函数的参数个数。</td>
</tr>
<tr>
<td>$*</td>
<td>显示所有传递给函数的参数。</td>
</tr>
<tr>
<td>$@</td>
<td>与$*相同，但是略有区别，请查看<a href="/2015/12/25/linux/xuegodLinux/godLinux1-24-28-shell/godLinux1-24/#%E7%89%B9%E6%AE%8A%E5%8F%98%E9%87%8F">更多特殊变量</a>。</td>
</tr>
<tr>
<td>$?</td>
<td>函数的返回值。</td>
</tr>
</tbody></table>
<p><br><br></p>
<h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><p>shift: 参数左移指令, 每执行一次，参数序列顺次左移一个位置，$#的值减1，用于分别处理每个参数，移出去的参数，不再可用。<br><img src="http://7xklqw.com1.z0.glb.clouddn.com/sh_shift.png"></p>
<p>例：<br>加法计算器，通过 <code>shift</code> 指令使参数左移，求出所有参数的和</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -le 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;err!:Not enough parameters&quot;</span></span><br><span class="line"><span class="built_in">exit</span>  124</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$#</span> -gt 0 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">sum</span>=`<span class="built_in">expr</span> <span class="variable">$sum</span> + <span class="variable">$1</span>`</span><br><span class="line">  </span><br><span class="line"><span class="built_in">shift</span> <span class="comment">#参数左移</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>


<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>文件包含即将外部脚本的内容合并到当前脚本。</p>
<p>可以使用：</p>
<pre><code>. filename
</code></pre>
<p>或</p>
<pre><code>source filename
</code></pre>
<p>两种方式的效果相同，简单起见，一般使用点号(.)，但是注意点号(.)和文件名中间有一空格。</p>
<p>例如：<br>创建两个脚本，一个是被调用脚本 subscript.sh，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=&quot;http://see.xidian.edu.cn/cpp/view/2738.html&quot;</span><br></pre></td></tr></table></figure>

<p>一个是主文件 main.sh，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">. ./subscript.sh</span><br><span class="line">echo $url</span><br></pre></td></tr></table></figure>

<p>注意：被包含脚本不需要有执行权限。 </p>
<h2 id="dos2unix"><a href="#dos2unix" class="headerlink" title="dos2unix"></a>dos2unix</h2><p>由于编码问题，在windows中开发的脚本导入到Linux系统后执行报错，主要是因为在windows开发保存时没注意编码（UTF8）和换行符（LF）。<br>在Linux中可以用工具dos2unix解决。</p>
<ul>
<li><p>安装<br>[root@localhost test]#rpm -ivh &#x2F;mnt&#x2F;Packages&#x2F;dos2unix-6.0.3-4.el7.x86_64.rpm</p>
</li>
<li><p>使用<br>[root@localhost ]# dos2unix test.sh<br>dos2unix: converting file test.sh to Unix format …</p>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>keepalived + nginx 双活热备负载均衡</title>
    <url>/2018/02/27/web%20server/nginx/keepalivedNginx/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>keepalived + nginx 双活热备负载均衡</p>
<p><em>更新历史</em><br>无</p>
<span id="more"></span>

<h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>CentOS 7.3<br>记得安装开发工具， 如果忘记可以在终端执行 <code>yum groupinstall &quot;Development Tools&quot;</code></p>
<h3 id="ip-config"><a href="#ip-config" class="headerlink" title="ip config"></a>ip config</h3><p>设置静态IP， 主要根据实际情况设置最后6行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-enp2s0 # 具体文件看自己服务器情况</span></span><br><span class="line"></span><br><span class="line">TYPE=Ethernet</span><br><span class="line"></span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_PEERDNS=<span class="built_in">yes</span></span><br><span class="line">IPV6_PEERROUTES=<span class="built_in">yes</span></span><br><span class="line">NAME=enp2s0</span><br><span class="line">UUID=d776619b-ac07-4367-b44c-40bd05aaea58</span><br><span class="line">DEVICE=enp2s0</span><br><span class="line"></span><br><span class="line">BOOTPROTO=static</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">DNS1=221.228.255.1</span><br><span class="line">IPADDR=192.168.11.102</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=192.168.11.1</span><br></pre></td></tr></table></figure>

<p>设置完毕重启网络 <code>systemctl restart network.service </code></p>
<h3 id="close-SELINUX"><a href="#close-SELINUX" class="headerlink" title="close SELINUX"></a>close SELINUX</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>

<h3 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname `your hostname`</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>  修改 &#x2F;etc&#x2F;hosts 将 your hostname 写入到 ipv4 和 ipv6</p>
<h2 id="设置YUM源"><a href="#设置YUM源" class="headerlink" title="设置YUM源"></a>设置YUM源</h2><h3 id="网络YUM源"><a href="#网络YUM源" class="headerlink" title="网络YUM源"></a>网络YUM源</h3><ul>
<li><p>阿里CentOS 镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo </span><br><span class="line">yum makecache <span class="comment">#生成缓存</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/yum.repos.d/nginx.repo</span></span><br><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="本地YUM源"><a href="#本地YUM源" class="headerlink" title="本地YUM源"></a>本地YUM源</h3><p><a href="http://geosmart.github.io/2015/12/07/CentOS%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0Yum%E6%BA%90/">参照</a></p>
<ul>
<li>编辑CentOS-Media.repo<br>其他的repo 都可改名成 ×××.repo.bak<br>拷贝 CentOS光盘 所有内容（比如路径 <code>/run/media/$&#123;user&#125;/CentOS\ 7\ x86_64/</code>） 到 <code>/mnt/CentOS7_ISO/</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/yum.repos.d/CentOS-Media.repo</span></span><br><span class="line"></span><br><span class="line">[local-media]</span><br><span class="line">  name=CentOS-<span class="variable">$releasever</span> - Media</span><br><span class="line">  baseurl=file:///mnt/CentOS7_ISO/</span><br><span class="line">  gpgcheck=0</span><br><span class="line">  enabled=1 <span class="comment">#启动本地</span></span><br><span class="line">  gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p><a href="http://giveme5.cc/2016/01/22/web%20server/nginx/nginx/">nginx</a></p>
<h2 id="keepalive"><a href="#keepalive" class="headerlink" title="keepalive"></a>keepalive</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y keepalived</span><br></pre></td></tr></table></figure>

<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p>假设主服务器IP:192.168.0.201,从服务器ip:192.168.0.202 虚拟ip:192.168.0.200</p>
<h4 id="master"><a href="#master" class="headerlink" title="master"></a>master</h4><p><code>vim /etc/keepalived/keepalived.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line"><span class="comment">#   notification_email &#123;</span></span><br><span class="line"><span class="comment">#     acassen@firewall.loc</span></span><br><span class="line"><span class="comment">#     failover@firewall.loc</span></span><br><span class="line"><span class="comment">#     sysadmin@firewall.loc</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line"><span class="comment">#   notification_email_from Alexandre.Cassen@firewall.loc</span></span><br><span class="line"><span class="comment">#   smtp_server 192.168.200.1</span></span><br><span class="line"><span class="comment">#   smtp_connect_timeout 30</span></span><br><span class="line">   router_id nginx_master      <span class="comment">#机器标识， 通常是hostname </span></span><br><span class="line"><span class="comment">#   vrrp_skip_check_adv_addr</span></span><br><span class="line"><span class="comment">#   vrrp_strict</span></span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123;  <span class="comment">#    script &quot;killall -0 nginx&quot;</span></span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_ng.sh&quot;</span>        <span class="comment">#检测nginx的脚本, 脚本名称千万不要使用 完整 nginx，容易出错</span></span><br><span class="line">    interval 2                                  <span class="comment">#每2秒检测一次</span></span><br><span class="line">    weight -5                                   <span class="comment">#如果某一个nginx宕机 则权重减5</span></span><br><span class="line">    fall 3  </span><br><span class="line">    rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER            <span class="comment">#状态 MASTER BACKUP</span></span><br><span class="line">    interface enp0s3        <span class="comment">#实例绑定的网卡，因为在配置虚拟IP的时候必须是在已有的网卡上添加的</span></span><br><span class="line">    virtual_router_id 51    <span class="comment">#虚拟路由的ID号,两个节点设置必须一样</span></span><br><span class="line">    priority 101            <span class="comment">#主备优先级</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置验证信息，两个节点必须一致</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS      <span class="comment">#认证方式</span></span><br><span class="line">        auth_pass 1111      <span class="comment">#明文密码</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.0.200</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="track-script"><a href="#track-script" class="headerlink" title="track_script"></a>track_script</h4><p>脚本名称千万不要使用 完整 <code>nginx</code>，容易出错<br><code>/etc/keepalived/check_ng.sh</code><br>记得加上执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /etc/keepalived/check_ng.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">A=`pgrep nginx|<span class="built_in">wc</span> -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$A</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#yum install</span></span><br><span class="line"> /bin/systemctl start nginx.service</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 源码安装 nginx</span></span><br><span class="line"> <span class="comment"># /usr/local/nginx/sbin/nginx</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> [ `pgrep nginx|<span class="built_in">wc</span> -l` -eq 0 ];<span class="keyword">then</span></span><br><span class="line">   /bin/systemctl stop keepalived.service</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>也可以根据自己的业务需求，总结出在什么情形下关闭keepalived。<br>如 curl 主页连续2个3s没有响应则切换：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">count=0</span><br><span class="line"><span class="keyword">for</span> (( k=<span class="number">0</span>; k&lt;<span class="number">2</span>; k++ ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    check_code=$( curl --connect-timeout 3 -sL -w <span class="string">&quot;%&#123;http_code&#125;\\n&quot;</span> http://localhost/ -o /dev/null )</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$check_code</span>&quot;</span> != <span class="string">&quot;200&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        count=$(<span class="built_in">expr</span> <span class="variable">$count</span> + 1)</span><br><span class="line">        <span class="built_in">sleep</span> 3</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        count=0</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$count</span>&quot;</span> != <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h4><p>在其它备机BACKUP上，只需要改变 state MASTER -&gt; state BACKUP，priority 101 -&gt; priority 100即可<br><code>vim /etc/keepalived/keepalived.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line"><span class="comment">#   notification_email &#123;</span></span><br><span class="line"><span class="comment">#     acassen@firewall.loc</span></span><br><span class="line"><span class="comment">#     failover@firewall.loc</span></span><br><span class="line"><span class="comment">#     sysadmin@firewall.loc</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line"><span class="comment">#   notification_email_from Alexandre.Cassen@firewall.loc</span></span><br><span class="line"><span class="comment">#   smtp_server 192.168.200.1</span></span><br><span class="line"><span class="comment">#   smtp_connect_timeout 30</span></span><br><span class="line">   router_id nginx_backup      <span class="comment">#机器标识， 通常是hostname </span></span><br><span class="line"><span class="comment">#   vrrp_skip_check_adv_addr</span></span><br><span class="line"><span class="comment">#   vrrp_strict</span></span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line"><span class="comment">#    script &quot;killall -0 nginx&quot;</span></span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_ng.sh&quot;</span>     <span class="comment">#检测nginx的脚本</span></span><br><span class="line">    interval 2                                  <span class="comment">#每2秒检测一次</span></span><br><span class="line">    weight -5                                   <span class="comment">#如果某一个nginx宕机 则权重减5</span></span><br><span class="line">    fall 3  </span><br><span class="line">    rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP            <span class="comment">#状态 MASTER BACKUP</span></span><br><span class="line">    interface enp0s3        <span class="comment">#实例绑定的网卡，因为在配置虚拟IP的时候必须是在已有的网卡上添加的</span></span><br><span class="line">    virtual_router_id 51    <span class="comment">#虚拟路由的ID号,两个节点设置必须一样</span></span><br><span class="line">    priority 100            <span class="comment">#主备优先级</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置验证信息，两个节点必须一致</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS      <span class="comment">#认证方式</span></span><br><span class="line">        auth_pass 1111      <span class="comment">#明文密码</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.0.200</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##附录</p>
<h3 id="keepalived-配置选项说明"><a href="#keepalived-配置选项说明" class="headerlink" title="keepalived 配置选项说明"></a>keepalived 配置选项说明</h3><ul>
<li><code>global_defs</code></li>
</ul>
<p><code>notification_email</code> ： keepalived在发生诸如切换操作时需要发送email通知地址，后面的 smtp_server 相比也都知道是邮件服务器地址。也可以通过其它方式报警，毕竟邮件不是实时通知的。<br><code>router_id</code> ： 机器标识，通常可设为hostname。故障发生时，邮件通知会用到</p>
<ul>
<li><code>vrrp_instance</code></li>
</ul>
<p>state ： 指定instance(Initial)的初始状态，就是说在配置好后，这台服务器的初始状态就是这里指定的，但这里指定的不算，还是得要通过竞选通过优先级来确定。如果这里设置为MASTER，但如若他的优先级不及另外一台，那么这台在发送通告时，会发送自己的优先级，另外一台发现优先级不如自己的高，那么他会就回抢占为MASTER<br>interface ： 实例绑定的网卡，因为在配置虚拟IP的时候必须是在已有的网卡上添加的<br>mcast_src_ip ： 发送多播数据包时的源IP地址，这里注意了，这里实际上就是在那个地址上发送VRRP通告，这个非常重要，一定要选择稳定的网卡端口来发送，这里相当于heartbeat的心跳端口，如果没有设置那么就用默认的绑定的网卡的IP，也就是interface指定的IP地址<br>virtual_router_id ： 这里设置VRID，这里非常重要，相同的VRID为一个组，他将决定多播的MAC地址<br>priority ： 设置本节点的优先级，优先级高的为master<br>advert_int ： 检查间隔，默认为1秒。这就是VRRP的定时器，MASTER每隔这样一个时间间隔，就会发送一个advertisement报文以通知组内其他路由器自己工作正常<br>authentication ： 定义认证方式和密码，主从必须一样<br>virtual_ipaddress ： 这里设置的就是VIP，也就是虚拟IP地址，他随着state的变化而增加删除，当state为master的时候就添加，当state为backup的时候删除，这里主要是有优先级来决定的，和state设置的值没有多大关系，这里可以设置多个IP地址<br>track_script ： 引用VRRP脚本，即在 vrrp_script 部分指定的名字。定期运行它们来改变优先级，并最终引发主备切换。</p>
<ul>
<li><code>vrrp_script</code></li>
</ul>
<p>告诉 keepalived 在什么情况下切换，所以尤为重要。可以有多个 vrrp_script</p>
<p>script ： 自己写的检测脚本。也可以是一行命令如killall -0 nginx<br>interval 2 ： 每2s检测一次<br>weight -5 ： 检测失败（脚本返回非0）则优先级 -5<br>fall 2 ： 检测连续 2 次失败才算确定是真失败。会用weight减少优先级（1-255之间）<br>rise 1 ： 检测 1 次成功就算成功。但不修改优先级<br>这里要提示一下script一般有2种写法：</p>
<p>通过脚本执行的返回结果，改变优先级，keepalived继续发送通告消息，backup比较优先级再决定<br>脚本里面检测到异常，直接关闭keepalived进程，backup机器接收不到advertisement会抢占IP<br>上文 vrrp_script 配置部分，killall -0 nginx属于第1种情况，&#x2F;etc&#x2F;keepalived&#x2F;check_ng.sh属于第2种情况（脚本中关闭keepalived）。个人更倾向于通过shell脚本判断，但有异常时exit 1，正常退出exit 0，然后keepalived根据动态调整的 vrrp_instance 优先级选举决定是否抢占VIP：</p>
<p>如果脚本执行结果为0，并且weight配置的值大于0，则优先级相应的增加<br>如果脚本执行结果非0，并且weight配置的值小于0，则优先级相应的减少<br>其他情况，原本配置的优先级不变，即配置文件中priority对应的值。</p>
<p>提示：</p>
<p>优先级不会不断的提高或者降低<br>可以编写多个检测脚本并为每个检测脚本设置不同的weight（在配置中列出就行）<br>不管提高优先级还是降低优先级，最终优先级的范围是在[1,254]，不会出现优先级小于等于0或者优先级大于等于255的情况<br>在MASTER节点的 vrrp_instance 中 配置 nopreempt ，当它异常恢复后，即使它 prio 更高也不会抢占，这样可以避免正常情况下做无谓的切换<br>以上可以做到利用脚本检测业务进程的状态，并动态调整优先级从而实现主备切换。</p>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>server</tag>
        <tag>keepalived</tag>
        <tag>高性能</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>1-29 Linux 正则表达式 sed awk cut</title>
    <url>/2016/01/06/linux/shell/shell9/</url>
    <content><![CDATA[<p>主要内容</p>
<ul>
<li>正则表达式 </li>
<li>sed </li>
<li>awk </li>
<li>cut</li>
</ul>
<span id="more"></span>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。<br>正则表达式是一种符号表示法，被用来识别文本模式。</p>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>grep : “global regular expression print”，所以我们能看出 grep 程序和正则表达式有关联。 本质上，grep 程序会在文本文件中查找一个指定的正则表达式，并把匹配行输出到标准输出。<br>参数：</p>
<pre><code>-i 忽略大小写
-v 反转
-n  显示行号
</code></pre>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><pre><code>^ $ . [ ] &#123; &#125; - ? * + ( ) | \
</code></pre>
<p>其他都被认为是原义字符； 元字符可以通过 <code>\</code> 来转义为原义字符。</p>
<h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点 ^ $"></a>锚点 ^ $</h3><ul>
<li><code>^</code> 行首</li>
<li><code>$</code> 行尾</li>
<li><code>\&lt;</code> 表示词首  </li>
<li><code>\&gt;</code> 表示词尾</li>
</ul>
<p>^word：待搜寻的字符串(word)在行首</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# grep &quot;^sync&quot; /etc/passwd</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br></pre></td></tr></table></figure>

<p>word$：待搜寻的字符串(word)在行尾</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# grep &quot;shutdown$&quot; passwd</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br></pre></td></tr></table></figure>

<p>显示空白行及行号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# grep &quot;^$&quot; passwd  -n</span><br><span class="line">50:</span><br></pre></td></tr></table></figure>

<p>精确匹配 ： <code>&#39;\&lt;匹配内容\&gt;&#39;</code> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ifconfig |grep &#x27;\&lt;inet\&gt;&#x27;</span><br><span class="line">        inet 192.168.1.68  netmask 255.255.255.0  broadcast 192.168.1.255</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br></pre></td></tr></table></figure>

<h3 id="转义"><a href="#转义" class="headerlink" title="转义 \"></a>转义 \</h3><p>搜寻包括单引号 ‘的行，并把行号也打印出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# grep \&#x27; passwd</span><br><span class="line">halt:x:7:0:&#x27;halt&#x27;:/sbin:/sbin/halt</span><br><span class="line">&#x27;mail&#x27;:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p>过滤文件的反斜杠‘’\“</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# grep &#x27;\\&#x27; passwd</span><br><span class="line">gopher:x\:13:30:gopher:/var/gopher:/sbin/nologin</span><br><span class="line">[root@localhost ~]# grep -F &#x27;\&#x27;  passwd</span><br><span class="line">gopher:x\:13:30:gopher:/var/gopher:/sbin/nologin</span><br><span class="line">[root@localhost ~]# fgrep &#x27;\&#x27; passwd</span><br><span class="line">gopher:x\:13:30:gopher:/var/gopher:/sbin/nologin</span><br></pre></td></tr></table></figure>

<h3 id="字符集合"><a href="#字符集合" class="headerlink" title="字符集合 [ ]"></a>字符集合 [ ]</h3><ul>
<li><code>[list]</code> ：字符集合，里面列出想要选择的字符</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# grep g[ao] passwd</span><br><span class="line">games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">gopher:x\:13:30:gopher:/var/gopher:/sbin/nologin</span><br></pre></td></tr></table></figure>

<ul>
<li>[n1-n2]：字符集合的，里面列出想要包括的字符范围！</li>
</ul>
<p>搜寻含有数字的3到5的行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# grep [3-5] passwd</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br></pre></td></tr></table></figure>

<p>开始为大写字母的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# grep ^[A-Z]  passwd</span><br><span class="line">Rm2:x:502:500::/home/rm:/bin/bash</span><br><span class="line">Rm3:x:503:500::/home/rm:/bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="否定"><a href="#否定" class="headerlink" title="否定 [^ ]"></a>否定 [^ ]</h3><p><code>[^list]</code> : 否定字符集合，里面列出想要排除的字符, <code>^</code> 必须是 <code>[]</code> 内的第一个符合才能启动否定。</p>
<p>不想要开头是英文字母：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# grep ^[^a-zA-Z] passwd</span><br><span class="line">&#x27;mail&#x27;:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">&quot;uucp&quot;:x:10:14:uucp:/var/spool/uucp:/sbin/nologin</span><br><span class="line">#rmt:x:500:500::/home/rm:/bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="POSIX-字符集"><a href="#POSIX-字符集" class="headerlink" title="POSIX 字符集"></a>POSIX 字符集</h3><table>
<thead>
<tr>
<th>字符集</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>[:alnum:]</td>
<td>字母数字字符。在 ASCII 中，等价于：[A-Za-z0-9]</td>
</tr>
<tr>
<td>[:word:]</td>
<td>与[:alnum:]相同, 但增加了下划线字符。</td>
</tr>
<tr>
<td>[:alpha:]</td>
<td>字母字符。在 ASCII 中，等价于：[A-Za-z]</td>
</tr>
<tr>
<td>[:blank:]</td>
<td>包含空格和 tab 字符。</td>
</tr>
<tr>
<td>[:cntrl:]</td>
<td>ASCII 的控制码。包含了0到31，和127的 ASCII 字符。</td>
</tr>
<tr>
<td>[:digit:]</td>
<td>数字0到9</td>
</tr>
<tr>
<td>[:graph:]</td>
<td>可视字符。在 ASCII 中，它包含33到126的字符。</td>
</tr>
<tr>
<td>[:lower:]</td>
<td>小写字母。</td>
</tr>
<tr>
<td>[:punct:]</td>
<td>标点符号字符。在 ASCII 中，等价于：</td>
</tr>
<tr>
<td>[:print:]</td>
<td>可打印的字符。在[:graph:]中的所有字符，再加上空格字符。</td>
</tr>
<tr>
<td>[:space:]</td>
<td>空白字符，包括空格，tab，回车，换行，vertical tab, 和 form feed.在 ASCII 中， 等价于：[ \t\r\n\v\f]</td>
</tr>
<tr>
<td>[:upper:]</td>
<td>大写字母。</td>
</tr>
<tr>
<td>[:xdigit:]</td>
<td>用来表示十六进制数字的字符。在 ASCII 中，等价于：[0-9A-Fa-f]</td>
</tr>
</tbody></table>
<h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p><code>.</code>  代表绝对有一个任意字符的意思；<br><code>*</code>  代表重复前一个字符到无穷次的意思;<br><code>.*</code> 任长度的字符。</p>
<p>寻找包括有r开头和t结束且长度为四个字符行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# grep r..t passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:&quot;operator&quot;:/root:/sbin/nologin</span><br><span class="line">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p>寻找oo, ooo, oooo 等等的数据,也就是说,至少要有两个o 以上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# grep ooo* passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p>寻找包括g开头和g结束的字符串,中间可有可无</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# grep ^g.*g  passwd</span><br></pre></td></tr></table></figure>

<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p><code>\?</code> 用于修饰前导字符，表示前导字符出现0或1次, 例： grep “test?“<br><code>\+</code> 用于修饰前导字符，表示前导字符出现1或多次   例：a+ 匹配1或多个a<br><code>\&#123;n,m\&#125;</code>  用于修饰前导字符，表示前导字符出现n至m次 （n和m都是整数，且n&lt;m）<br>例：a{3,5} 匹配3至5个连续的a</p>
<h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><ul>
<li><p>概念<br><code>sed</code> : strem editor  流编辑器<br>sed编辑器是一行一行的处理文件内容的。正在处理的内容存放在模式空间(缓冲区)内，处理完成后按照选项的规定进行输出或文件的修改。它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；</p>
</li>
<li><p>用法</p>
<pre><code>sed  [options]  ‘[command]’  [filename]
</code></pre>
</li>
</ul>
<p>options:<br><code>-n</code>	抑制自动(默认的) 输出   读取下一个输入行  <em><strong>常用</strong></em><br>-e	执行多个sed指令<br>-f	运行脚本<br><code>-i</code>	编辑文件内容 <em><strong>常用</strong></em><br>-i.bak	编辑的同时创造.bak的备份<br>-r	使用扩展的正则表达式 </p>
<p>  command:<br>  <code>a</code>	在匹配后追加  <em><strong>常用</strong></em><br>  <code>i</code>	在匹配前插入  <em><strong>常用</strong></em><br>  <code>p</code>	打印  <em><strong>常用</strong></em><br>  <code>d</code>	删除  <em><strong>常用</strong></em><br>  r&#x2F;R	读取文件&#x2F;一行<br>  w	另存<br>  s	查找<br>  c	替换<br>  y	替换<br>  <code>h/H</code>	复制拷贝&#x2F;追加模式空间(缓冲区)到存放空间  <em><strong>常用</strong></em><br>  <code>g/G</code>	粘贴 从存放空间取回&#x2F;追加到模式空间       <em><strong>常用</strong></em><br>  x	两个空间内容的交换<br>  n&#x2F;N	拷贝&#x2F;追加下一行内容到当前<br>  D	删除\n之前的内容<br>  P	打印\n之前的内容<br>  b	无条件跳转<br>  t	满足匹配后的跳转<br>  T	不满足匹配时跳转</p>
<h3 id="s-替换"><a href="#s-替换" class="headerlink" title="s 替换"></a>s 替换</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed &#x27;s/root/ROOT/&#x27; /etc/passwd &gt; newfilename</span><br></pre></td></tr></table></figure>
<ul>
<li><p>s&#x2F;regexp&#x2F;replacement&#x2F;</p>
</li>
<li><p>&#x2F;..&#x2F;..&#x2F;	分隔符<br>分割符 “&#x2F;“ 可以用别的符号代替 , 比如 “,”   “|”   “_“等</p>
</li>
<li><p>用 &amp; 表示匹配的字符串<br>对文件中的root内容两边加上（）</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed &#x27;s/root/(&amp;)/&#x27;  passwd</span><br></pre></td></tr></table></figure>

<p>对文件中的所有以小写字母开头的行进行注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed &#x27;s/^[a-z]/#&amp;/&#x27; passwd</span><br></pre></td></tr></table></figure>

<p>sed 默认只替换搜索字符串的第一次出现 , 利用 &#x2F;g 可以替换搜索字符串所有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed -e &#x27;3,5s/nologin/bash/&#x27; -e &#x27;9,11s/sbin/bin/&#x27; passwd</span><br></pre></td></tr></table></figure>

<h3 id="p-打印"><a href="#p-打印" class="headerlink" title="p 打印"></a>p 打印</h3><ul>
<li>显示文件第三行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed -n &#x27;3p&#x27; passwd</span><br><span class="line">roott</span><br></pre></td></tr></table></figure>

<ul>
<li><p>显示文件前三行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed -n &#x27;1,3p&#x27; passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">roott</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示文件除前三行之外的全部内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed -n &#x27;1,3!p&#x27; passwd</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示文件第三行和之后的三行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed -n &#x27;3,+3p&#x27; passwd</span><br><span class="line">roott</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="i-匹配前插入"><a href="#i-匹配前插入" class="headerlink" title="i 匹配前插入"></a>i 匹配前插入</h3><ul>
<li>在文件头插入“###”<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed &#x27;1i###&#x27; passwd  &gt; a.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="a-在匹配后追加"><a href="#a-在匹配后追加" class="headerlink" title="a 在匹配后追加"></a>a 在匹配后追加</h3><ul>
<li><p>在文件尾插入”@@@”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed &#x27;$a@@@&#x27; passwd</span><br></pre></td></tr></table></figure>
</li>
<li><p>在文件的第二行后插入两行内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed &#x27;2a hello \</span><br><span class="line">how are you?  \</span><br><span class="line">what is your name?&#x27; passwd</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="c-替换"><a href="#c-替换" class="headerlink" title="c 替换"></a>c 替换</h3><ul>
<li>把文件第三行替换成“$$$”<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed &#x27;3c$$$&#x27; passwd</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h3><p><code>h/H</code>	复制拷贝&#x2F;追加模式空间(缓冲区)到存放空间<br><code>g/G</code>	粘贴 从存放空间取回&#x2F;追加到模式空间</p>
<ul>
<li>把文件的第二行到第四行复制到文件的末尾<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed &#x27;2,4H;$G&#x27; passwd  &gt; b.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="d-删除"><a href="#d-删除" class="headerlink" title="d 删除"></a>d 删除</h3><ul>
<li>删除空行<br>[root@localhost ~]# sed ‘&#x2F;^$&#x2F;d’ passwd<br>把fstab中包含xfs的记录（行）写入新的文件中<br>[root@localhost ~]# sed ‘&#x2F;xfs&#x2F;w newfstab2’ &#x2F;etc&#x2F;fstab</li>
</ul>
<h3 id="直接修改文件"><a href="#直接修改文件" class="headerlink" title="直接修改文件"></a>直接修改文件</h3><p>sed 的-i选项可以直接修改文件中的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed -i &#x27;s/root/rm/&#x27; passwd</span><br></pre></td></tr></table></figure>


<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://coolshell.cn/articles/9104.html">sed 简明教程</a></p>
<h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p><code>AWK</code> 是一种优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一。这种编程及数据操作语言的最大功能取决于一个人所拥有的知识。awk命名:Alfred Aho Peter Weinberger和brian kernighan三个人的姓的缩写。<br>最简单地说， AWK 是一种用于处理文本的编程语言工具。<br>任何awk语句都是由模式和动作组成，一个awk脚本可以有多个语句。模式决定动作语句的触发条件和触发时间。</p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre><code>  netstat | awk &#39;&#123;print $1, $7&#125;&#39;
</code></pre>
<h4 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h4><p>单引号中的被大括号括着的就是awk的语句，注意，其只能被单引号包含。<br>其中的$1..$n表示第几例。注：$0表示整个行。</p>
<h4 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h4><p><code>BEGIN</code> ：在任何动作之前进行。<br><code>END</code> ： 在完成动作之后执行。</p>
<h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><p>print</p>
<h4 id="过滤记录"><a href="#过滤记录" class="headerlink" title="过滤记录"></a>过滤记录</h4><ul>
<li><p>比较运算符<br>&#x3D;&#x3D;，!&#x3D;, &gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;</p>
</li>
<li><p>逻辑运算符<br>&amp;&amp; ， ||</p>
</li>
</ul>
<h4 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h4><table>
<thead>
<tr>
<th>$0</th>
<th>当前记录（这个变量中存放着整个行的内容）</th>
</tr>
</thead>
<tbody><tr>
<td>$1~$n</td>
<td>当前记录的第n个字段，字段间由FS分隔</td>
</tr>
<tr>
<td>FS</td>
<td>输入字段分隔符 默认是空格或Tab</td>
</tr>
<tr>
<td>NF</td>
<td>当前记录中的字段个数，就是有多少列</td>
</tr>
<tr>
<td>NR</td>
<td>已经读出的记录数，就是行号，从1开始，如果有多个文件话，这个值也是不断累加中。</td>
</tr>
<tr>
<td>FNR</td>
<td>当前记录数，与NR不同的是，这个值会是各个文件自己的行号</td>
</tr>
<tr>
<td>RS</td>
<td>输入的记录分隔符， 默认为换行符</td>
</tr>
<tr>
<td>OFS</td>
<td>输出字段分隔符， 默认也是空格</td>
</tr>
<tr>
<td>ORS</td>
<td>输出的记录分隔符，默认为换行符</td>
</tr>
<tr>
<td>FILENAME</td>
<td>当前输入文件的名字</td>
</tr>
</tbody></table>
<h4 id="指定分隔符"><a href="#指定分隔符" class="headerlink" title="指定分隔符"></a>指定分隔符</h4><p>默认分隔符是空格或Tab</p>
<p>指定冒号分割</p>
<pre><code>  awk  -F: &#39;&#123;print $1,$3,$6&#125;&#39; /etc/passwd
  或
  awk  &#39;BEGIN&#123;FS=&quot;:&quot;&#125; &#123;print $1,$3,$6&#125;&#39; /etc/passwd
</code></pre>
<p>指定多个分隔符</p>
<pre><code>  awk -F &#39;[;:]&#39;
</code></pre>
<h4 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h4><p>匹配FIN状态，其实 ~ 表示模式开始。&#x2F; &#x2F;中是模式。这就是一个正则表达式的匹配。 <code>|| NR==1</code> 其实是不处理第一行。</p>
<pre><code>  awk &#39;$6 ~ /FIN/ || NR==1 &#123;print NR,$4,$5,$6&#125;&#39; OFS=&quot;\t&quot; netstat.txt
</code></pre>
<p>模式取反</p>
<pre><code>  awk &#39;$6 !~ /WAIT/ || NR==1 &#123;print NR,$4,$5,$6&#125;&#39; OFS=&quot;\t&quot; netstat.txt
  或
  awk &#39;!/WAIT/&#39; netstat.txt
</code></pre>
<h4 id="折分文件"><a href="#折分文件" class="headerlink" title="折分文件"></a>折分文件</h4><p>awk拆分文件很简单，就使用重定向。如按第6例分隔文件，相当的简单（其中的NR!&#x3D;1表示不处理表头）。</p>
<pre><code>awk &#39;NR!=1&#123;print &gt; $6&#125;&#39; netstat.txt
</code></pre>
<p>你也可以把指定的列输出到文件</p>
<pre><code>awk &#39;NR!=1&#123;print $4,$5 &gt; $6&#125;&#39; netstat.txt
</code></pre>
<h4 id="awk脚本"><a href="#awk脚本" class="headerlink" title="awk脚本"></a>awk脚本</h4><p>语法如下：</p>
<pre><code>BEGIN&#123; 这里面放的是执行前的语句 &#125;
END &#123;这里面放的是处理完所有的行后要执行的语句 &#125;
&#123;这里面放的是处理每一行时要执行的语句&#125;
</code></pre>
<p>有这么一个文件（学生成绩表）： score.txt</p>
<pre><code>Marry   2143 78 84 77
Jack    2321 66 78 45
Tom     2122 48 77 71
Mike    2537 87 97 95
Bob     2415 40 57 62
</code></pre>
<p>awk脚本如下</p>
<pre><code>#!/bin/awk -f
#运行前
BEGIN &#123;
math = 0
english = 0
computer = 0

printf &quot;NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n&quot;
printf &quot;---------------------------------------------\n&quot;
&#125;
#运行中
&#123;
math+=$3
english+=$4
computer+=$5
printf &quot;%-6s %-6s %4d %8d %8d %8d\n&quot;, $1, $2, $3,$4,$5, $3+$4+$5
&#125;
#运行后
END &#123;
printf &quot;---------------------------------------------\n&quot;
printf &quot;  TOTAL:%10d %8d %8d \n&quot;, math, english, computer
printf &quot;AVERAGE:%10.2f %8.2f %8.2f\n&quot;, math/NR, english/NR, computer/NR
&#125;
</code></pre>
<p>执行</p>
<pre><code>awk -f cal.awk score.txt
或
./cal.awk score.txt
</code></pre>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li><p>获取当前主机网卡的ip地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipaddress=$(ifconfig | grep broadcast | awk &#x27;&#123;print $2&#125;&#x27;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>打印出passwd中用户UID大于1000的用户名和登录shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/passwd | awk -F: &#x27;$3&gt;1000 &#123;print $1 &quot;\t&quot; $7&#125;&#x27;</span><br><span class="line">nfsnobody       /sbin/nologin</span><br><span class="line">rm1     /bin/bash</span><br><span class="line">rm2     /bin/bash</span><br><span class="line">rm3     /bin/bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>多条件进行过滤<br>能登录的普通用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/passwd | awk -F: &#x27;BEGIN &#123;print &quot;name \t shell&quot;&#125; $3&gt;1000 &amp;&amp; $7==&quot;/bin/bash&quot; &#123;print $1 &quot;\t&quot; $7&#125; END &#123;print &quot;Thank you!!!&quot;&#125;&#x27;</span><br><span class="line">name     shell</span><br><span class="line">rm1     /bin/bash</span><br><span class="line">rm2     /bin/bash</span><br><span class="line">rm3     /bin/bash</span><br><span class="line">Thank you!!!</span><br></pre></td></tr></table></figure>
</li>
<li><p>awk在脚本中的使用<br>找到系统中所有的能登录的普通用户，并进行删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">user=$(cat /etc/passwd | awk -F: &#x27;$3&gt;=1000 &amp;&amp; $7==&quot;/bin/bash&quot; &#123;print $1&#125;&#x27;)</span><br><span class="line">for i in $user</span><br><span class="line">do</span><br><span class="line"> userdel -r $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
</li>
<li><p>RHEL7中查看系统当前内存使用百分比</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;此脚本可以用来查看当前内存使用百分比&quot;</span><br><span class="line">use=$(free -m | grep &quot;Mem:&quot; | awk &#x27;&#123;print $3&#125;&#x27;)</span><br><span class="line">total=$(free -m | grep &quot;Mem:&quot; | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">useper=$(expr $use \* 100 / $total)</span><br><span class="line">echo &quot;系统当前内存使用百分比为:&quot;</span><br><span class="line">echo $&#123;useper&#125;%</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><p>cut是一个选取命令，就是将一段数据经过分析，取出我们想要的。一般来说，选取信息通常是针对“行”来进行分析的，并不是整篇信息分析的。<br>主要参数<br>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。<br>-c ：以字符为单位进行分割。<br>-d ：自定义分隔符，默认为制表符。<br>-f ：与-d一起使用，指定显示哪个区域。</p>
<ul>
<li><p>以字节进行分割</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tail -3 /etc/passwd | cut -b 1-4,11,12</span><br><span class="line">post89</span><br><span class="line">sshd74</span><br><span class="line">tcpd72</span><br></pre></td></tr></table></figure></li>
<li><p>以字符进行分割</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat newyear.txt | cut -c 1-4</span><br></pre></td></tr></table></figure>
</li>
<li><p>以空格作为分隔符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed -n l c.txt</span><br><span class="line">aaaa\tbbbb    cccc$</span><br><span class="line">aaaa    bbbb\tcccc$</span><br><span class="line">[root@localhost ~]# cat c.txt  | cut -d &#x27; &#x27; -f 1</span><br><span class="line">aaaa    bbbb</span><br><span class="line">aaaa</span><br></pre></td></tr></table></figure></li>
</ul>
<p>总结：<br>cut有哪些缺陷和不足？<br>如果文件里面的某些域是由若干个空格来间隔的，那么用cut就有点麻烦了，因为cut只擅长处理“以一个字符间隔”的文本内容</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GOD linux</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat  日志分割</title>
    <url>/2017/02/21/web%20server/tomcat/tomcatLog/</url>
    <content><![CDATA[<p>主要内容<br>tomcat的catalina.out会不断增长，很麻烦，看了多张解决方案，包括官方的，决定采用cronolog的方案。</p>
<span id="more"></span>

<h2 id="cronolog"><a href="#cronolog" class="headerlink" title="cronolog"></a>cronolog</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS release 5.4 (Final)</span><br></pre></td></tr></table></figure>

<h3 id="安装yum源"><a href="#安装yum源" class="headerlink" title="安装yum源"></a>安装yum源</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup </span></span><br><span class="line"><span class="comment"># wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span></span><br></pre></td></tr></table></figure>

<h3 id="安装cronolog"><a href="#安装cronolog" class="headerlink" title="安装cronolog"></a>安装cronolog</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install -y cronolog</span></span><br></pre></td></tr></table></figure>


<p>查看cronolog安装后所在目录（验证安装是否成功）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># which cronolog</span></span><br><span class="line">正常情况下显示：</span><br><span class="line">/usr/sbin/cronolog</span><br></pre></td></tr></table></figure>

<h2 id="Tomcat7以后的版本配置"><a href="#Tomcat7以后的版本配置" class="headerlink" title="Tomcat7以后的版本配置"></a>Tomcat7以后的版本配置</h2><p><code>bin/catalina.sh</code></p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>大概213行<br>将</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$CATALINA_OUT</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">CATALINA_OUT=<span class="string">&quot;<span class="variable">$CATALINA_BASE</span>&quot;</span>/logs/catalina.out</span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>修改为</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$CATALINA_OUT</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">CATALINA_OUT=<span class="string">&quot;<span class="variable">$CATALINA_BASE</span>&quot;</span>/logs/catalina.%Y-%m-%d.out</span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>大概414行左右<br>将</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> <span class="string">&quot;<span class="variable">$CATALINA_OUT</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#touch &quot;$CATALINA_OUT&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>大概 436～437<br>将</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">org.apache.catalina.startup.Bootstrap <span class="string">&quot;<span class="variable">$@</span>&quot;</span> start \</span><br><span class="line">&gt;&gt; <span class="string">&quot;<span class="variable">$CATALINA_OUT</span>&quot;</span>  2&gt;&amp;1 <span class="string">&quot;&amp;&quot;</span></span><br></pre></td></tr></table></figure>

<p>修改为</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">org.apache.catalina.startup.Bootstrap <span class="string">&quot;<span class="variable">$@</span>&quot;</span> start 2&gt;&amp;1 \</span><br><span class="line">| /usr/sbin/cronolog <span class="string">&quot;<span class="variable">$CATALINA_OUT</span>&quot;</span> &gt;&gt; /dev/null &amp;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>server</tag>
        <tag>cronolog</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2016/01/22/web%20server/nginx/nginx/</url>
    <content><![CDATA[<p>主要内容</p>
<p>nginx</p>
<p><em>更新历史</em><br>2019-12-30 增加源码安装的自动日志归档<br>2020-04-20 add timeout config</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h3><h4 id="yum源"><a href="#yum源" class="headerlink" title="yum源"></a>yum源</h4><p>如果系统自带yum源中没有nginx，按如下增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># vim /etc/yum.repos.d/nginx.repo</span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br></pre></td></tr></table></figure>

<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><pre><code>    # install
    yum -y install nginx
    
    # check
    nginx -v
</code></pre>
<h3 id="源码-安装"><a href="#源码-安装" class="headerlink" title="源码 安装"></a>源码 安装</h3><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><ul>
<li><p>确保 <code>Development Tools</code> 已经安装</p>
</li>
<li><p>增加nginx 用户</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">useradd nginx -s /sbin/nologin -M</span><br></pre></td></tr></table></figure>

<h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-&#123;版本&#125;.tar.gz</span><br><span class="line">tar -xzvf nginx-&#123;版本&#125;.tar.gz -C /usr/src</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum install -y zlib-devel.x86_64 pcre-devel.x86_64 openssl-devel</span><br><span class="line">yum install -y gd-devel libxml2 libxml2-dev libxslt-devel perl-devel perl-ExtUtils-Embed GeoIP GeoIP-devel GeoIP-data</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/src/nginx-&#123;版本&#125;</span><br><span class="line"><span class="comment"># 以下是一行。。用于生成makefile。如果需要添加第三方模块，使用--add-module=/path/module1的方法编译</span></span><br><span class="line">./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid --lock-path=/run/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module --with-http_perl_module=dynamic --with-http_auth_request_module --with-mail=dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-debug </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># make是生成在objs目录中，make install则安装到prefix所示的目录中</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 没有错误出现的话，就可以进入nginx安装目录(/etc/nginx)配置。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="nginx-服务"><a href="#nginx-服务" class="headerlink" title="nginx 服务"></a>nginx 服务</h4><p>在 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;目录下面新建一个nginx.service文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>

<p>内容如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/run/nginx.pid</span><br><span class="line"><span class="comment"># Nginx will fail to start if /run/nginx.pid already exists but has the wrong</span></span><br><span class="line"><span class="comment"># SELinux context. This might happen when running `nginx -t` from the cmdline.</span></span><br><span class="line"><span class="comment"># https://bugzilla.redhat.com/show_bug.cgi?id=1268621</span></span><br><span class="line">ExecStartPre=/usr/bin/rm -f /run/nginx.pid</span><br><span class="line">ExecStartPre=/usr/sbin/nginx -t</span><br><span class="line">ExecStart=/usr/sbin/nginx</span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">KillSignal=SIGQUIT</span><br><span class="line">TimeoutStopSec=5</span><br><span class="line">KillMode=mixed</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"><span class="comment"># system limit open file and processes</span></span><br><span class="line">LimitCORE=infinity</span><br><span class="line">LimitNOFILE=100000</span><br><span class="line">LimitNPROC=100000</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考 <a href="https://www.cnblogs.com/weifeng1463/p/8422119.html">CENTOS&#x2F;RHEL 7 系统中设置SYSTEMD SERVICE的ULIMIT资源限制</a></p>
<p>启动服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /var/lib/nginx/tmp</span><br><span class="line"><span class="built_in">chown</span> -R nginx:nginx /var/lib/nginx/</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x /usr/lib/systemd/system/nginx.service</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure>
<h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p><code>注意</code> 源码安装默认不自动归档日志, 可用<code>logrotate</code>工具实现日志切割归档.</p>
<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">╰─<span class="comment"># rpm -ql logrotate</span></span><br><span class="line">/etc/cron.daily/logrotate</span><br><span class="line">/etc/logrotate.conf</span><br><span class="line">/etc/logrotate.d</span><br><span class="line">/etc/rwtab.d/logrotate</span><br><span class="line">/usr/sbin/logrotate</span><br><span class="line">/usr/share/doc/logrotate-3.8.6</span><br><span class="line">/usr/share/doc/logrotate-3.8.6/CHANGES</span><br><span class="line">/usr/share/doc/logrotate-3.8.6/COPYING</span><br><span class="line">/usr/share/man/man5/logrotate.conf.5.gz</span><br><span class="line">/usr/share/man/man8/logrotate.8.gz</span><br><span class="line">/var/lib/logrotate</span><br><span class="line">/var/lib/logrotate/logrotate.status</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其中, &#x2F;etc&#x2F;logrotate.d&#x2F; 是用于存储各种自定义应用的配置文件的目录。该目录里的所有文件都会被主动的读入到 &#x2F;etc&#x2F;logrotate.conf中执行。该目录下的应用配置文件继承所有&#x2F;etc&#x2F;logrotate.conf 的默认参数。<br>因此我们可以新建一个针对nginx日志文件的轮循配置的文件，然后将这个文件放在 &#x2F;etc&#x2F;logrotate.d&#x2F; 目录下, 它就会主动的读入到&#x2F;etc&#x2F;logrotate.conf中执行, 以达到按指定频率定时执行的需求。</p>
<p>新建nginx文件, 存放在&#x2F;etc&#x2F;logrotate.d&#x2F; 文件夹下 <code>/etc/logrotate.d/nginx</code>,  内容如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/var/log/nginx/*<span class="built_in">log</span> &#123;</span><br><span class="line">    create 640 nginx root</span><br><span class="line">    daily</span><br><span class="line">    rotate 61</span><br><span class="line">    missingok</span><br><span class="line">    notifempty</span><br><span class="line">    compress</span><br><span class="line">    delaycompress</span><br><span class="line">    sharedscripts</span><br><span class="line">    postrotate</span><br><span class="line">        /bin/kill -USR1 `<span class="built_in">cat</span> /run/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || <span class="literal">true</span></span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs 需要轮询日志路径</li>
<li>daily: 日志文件分割频度。可选值为 daily，monthly，weekly，yearly</li>
<li>rotate 61: 一次将存储61个归档日志。对于第62个归档，时间最久的归档将被删除。</li>
<li>missingok: 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。</li>
<li>dateext 使用日期作为命名格式</li>
<li>compress: 在轮循任务完成后，已轮循的归档将使用gzip进行压缩。</li>
<li>nocompress: 如果你不希望对日志文件进行压缩，设置这个参数即可</li>
<li>delaycompress: 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。</li>
<li>notifempty: 如果日志文件为空，轮循不会进行。</li>
<li>sharedscripts 表示postrotate脚本在压缩了日志之后只执行一次</li>
<li>create 640 www root: 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件。</li>
<li>postrotate&#x2F;endscript: 最通常的作用是让应用重启，以便切换到新的日志文件, 在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。</li>
</ul>
<h5 id="logrotate-命令"><a href="#logrotate-命令" class="headerlink" title="logrotate 命令"></a>logrotate 命令</h5><p>运行<br><code>logrotate /etc/logrotate.d/nginx</code></p>
<p>测试<br><code>logrotate -d /etc/logrotate.d/nginx</code></p>
<p>强制执行<br><code>logrotate -vf /etc/logrotate.d/nginx</code></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h3><p>主配置文件<code>/etc/nginx/nginx.conf</code>, 增加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes  auto;</span><br><span class="line">user nginx nginx;           # 指定Nginx服务的用户和用户组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># worker_rlimit_nofile 4096; # set open fd limit, 根据服务器具体情况 -- nginx.service 中全局制定</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    #隐藏nginx版本号</span><br><span class="line">    server_tokens  off;</span><br><span class="line"> </span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    # 413 Request Entity Too Large</span><br><span class="line">    client_max_body_size 8m; </span><br><span class="line">    </span><br><span class="line">    #nginx服务器与被代理服务连接超时时间，代理超时</span><br><span class="line">    proxy_connect_timeout 360;</span><br><span class="line">    proxy_read_timeout 360;</span><br><span class="line">    proxy_send_timeout 360;    </span><br><span class="line">    </span><br><span class="line">    # header</span><br><span class="line">    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">    add_header X-XSS-Protection &quot;1; mode=block&quot;;</span><br><span class="line">    add_header X-Content-Type-Options &quot;nosniff&quot;;</span><br><span class="line">    </span><br><span class="line">    include /etc/nginx/conf.d/*/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>自定义conf 文件都可放入 <code>/etc/nginx/conf.d</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /etc/nginx/conf.d</span><br></pre></td></tr></table></figure>

<h3 id="子配置"><a href="#子配置" class="headerlink" title="子配置"></a>子配置</h3><p>子配置文件目录<code>/etc/nginx/conf.d</code>, 文件名<code>*.conf</code>, <code>api.xxxx.conf</code> 为例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name api.xxxx;  <span class="comment">#和tomcat的host name 或 alias name 一致。</span></span><br><span class="line"></span><br><span class="line">        index index.html;</span><br><span class="line"><span class="comment">#       root  ;</span></span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        location /</span><br><span class="line">        &#123;</span><br><span class="line">                proxy_pass http://localhost:8080; <span class="comment"># tomcat 端口</span></span><br><span class="line">                proxy_redirect off;</span><br><span class="line">                proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /status</span><br><span class="line">        &#123;</span><br><span class="line">                stub_status on;</span><br><span class="line">                access_log   off;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SSL HTTPS 转发</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        server_name  api.xxxx.com ;</span><br><span class="line">        <span class="comment">#if ($host = &#x27;*.xxxx.com&#x27;) &#123;</span></span><br><span class="line">        <span class="comment">#        rewrite ^/(.*)$ http://api.xxxx.com/$1 permanent;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment"># if ($http_referer ~* &quot;bb01.win&quot;) &#123;</span></span><br><span class="line">       <span class="comment">#         rewrite ^/(.*)$ http://api.xxxx.com/$1 permanent;</span></span><br><span class="line">       <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">        charset utf-8;</span><br><span class="line">        location /</span><br><span class="line">        &#123;</span><br><span class="line">                </span><br><span class="line">                proxy_pass http://127.0.0.1:8080;</span><br><span class="line">                </span><br><span class="line">                proxy_redirect http:// https://;</span><br><span class="line">                proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       client_max_body_size 50M;</span><br><span class="line"></span><br><span class="line">        error_page  404              /404.html;</span><br><span class="line">        location = /404.html &#123;</span><br><span class="line">          root /usr/share/nginx/html;</span><br><span class="line">          internal;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    listen 443 ssl; </span><br><span class="line">    ssl_certificate certificate.pem; </span><br><span class="line">    ssl_certificate_key privkey.pem; </span><br><span class="line">    include /etc/letsencrypt/options-ssl-nginx.conf; </span><br><span class="line">    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="超时配置"><a href="#超时配置" class="headerlink" title="超时配置"></a>超时配置</h3><p>以下都是默认值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="comment">#读取http头部的超时时间，单位秒，连接建立后，服务端接收http头部，规定时间内没收到，则超时，返回给客服端408（request time out）</span></span><br><span class="line">    client_header_timeout 60;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#读取http body的超时时间，单位秒，连接建立后，服务端接收body，规定时间内没收到，则超时，返回给客服端408（request time out）</span></span><br><span class="line">    client_body_timeout 60;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#发送响应超时时间，单位秒，服务端向客户端发送数据包，规定时间内客户端没收到，则超时</span></span><br><span class="line">    send_timeout 60;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#保持闲置连接的超时时间，单位秒，超过后服务器和浏览器都会关闭连接</span></span><br><span class="line">    keepalive_timeout 75;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#域名解析超时时间，单位秒</span></span><br><span class="line">    resolve_timeout 30;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#nginx服务器与被代理服务连接超时时间，代理超时</span></span><br><span class="line">    proxy_connect_timeout 60;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#nginx服务器发送数据给被代理服务器超时时间，单位秒，规定时间内nginx服务器没发送数据，则超时</span></span><br><span class="line">    proxy_send_timeout 60;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#nginx服务器接收被代理服务器数据超时时间，单位秒，规定时间内nginx服务器没收到数据，则超时</span></span><br><span class="line">    proxy_read_timeout 60;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="隐藏nginx-版本和服务器信息"><a href="#隐藏nginx-版本和服务器信息" class="headerlink" title="隐藏nginx 版本和服务器信息"></a>隐藏nginx 版本和服务器信息</h3><p>语法: <code>proxy_hide_header field;</code><br>默认值: —<br>上下文: http, server, location<br>nginx默认不会将“Date”、“Server”、“X-Pad”，和“X-Accel-…”响应头发送给客户端。proxy_hide_header指令则可以设置额外的响应头，这些响应头也不会发送给客户端。</p>
<p><code>proxy_pass_header</code>:   和proxy_hide_header相反，如果希望允许传递某些响应头给客户端，可以使用proxy_pass_header指令。<br>为隐藏 nginx ， 可以使用， 并在后端服务器处理不返回 服务器类型</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass_header Server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常页面配置"><a href="#异常页面配置" class="headerlink" title="异常页面配置"></a>异常页面配置</h2><ul>
<li><p>异常页面存放<br>默认存放在 <code>/usr/share/nginx/html</code> 目录下。</p>
</li>
<li><p>nginx配置文件</p>
</li>
</ul>
<p>配置完类似下面的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server ipv6only=on;</span><br><span class="line"></span><br><span class="line">        . . .</span><br><span class="line"></span><br><span class="line">        error_page 404 /40x.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">                root /usr/share/nginx/html;</span><br><span class="line">                internal;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>注意</code> ： 如果配置多个 server， 需要在对应的server中配置 error_page 。</p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>在子配置文件中 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream xxxxServer &#123;</span><br><span class="line">    <span class="comment"># 策略, 默认轮循</span></span><br><span class="line">    <span class="comment"># ip_hash;</span></span><br><span class="line">    <span class="comment"># least_conn;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    server 127.0.0.1:8080 ;</span><br><span class="line">    <span class="comment"># server 127.0.0.1:8000 weight=3;;</span></span><br><span class="line">    <span class="comment"># server 127.0.0.1:8080 down;</span></span><br><span class="line"></span><br><span class="line">    server 127.0.0.2:8080 fail_timeout=600s  ;</span><br><span class="line">    <span class="comment"># server 127.0.0.2:8080 fail_timeout=600s  down;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  center.xxx.com ;</span><br><span class="line">    <span class="comment">#if ($host = &#x27;*.xxxx.com&#x27;) &#123;</span></span><br><span class="line">    <span class="comment">#        rewrite ^/(.*)$ http://m.xxxx.com/$1 permanent;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># if ($http_referer ~* &quot;bb01.win&quot;) &#123;</span></span><br><span class="line">    <span class="comment">#         rewrite ^/(.*)$ http://m.xxxx.com/$1 permanent;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    location /</span><br><span class="line">    &#123;</span><br><span class="line">            proxy_pass http://xxxxServer;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># nginx 监控</span></span><br><span class="line">    location /status</span><br><span class="line">    &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log   off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    client_max_body_size 50M;</span><br><span class="line"></span><br><span class="line">    error_page  404              /404.html;</span><br><span class="line">    location = /404.html &#123;</span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">        internal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location ~ .mp4 &#123;</span><br><span class="line">                mp4;</span><br><span class="line">            root /data/xxxx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location ~ .apk &#123;</span><br><span class="line">            root /data/xxxx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>nginx 的 upstream目前支持 4 种方式的分配 </p>
<ul>
<li>轮询（默认）<br>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。 </li>
<li>weight<br>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 </li>
<li>ip_hash<br>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。  </li>
<li>least_conn<br>最少连接。当某些请求需要更长时间来完成时，最少连接可以更公平的控制应用实例上的负载。</li>
</ul>
<p>upstream 每个设备的状态:</p>
<ul>
<li>down 表示单前的server暂时不参与负载 </li>
<li>weight  默认为1.weight越大，负载的权重就越大。 </li>
<li>max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误 </li>
<li>fail_timeout:max_fails 次失败后，暂停的时间。 </li>
<li>backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</li>
</ul>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><ul>
<li>非80&#x2F;443端口</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        server_name  test.domain.com   ;</span><br><span class="line"></span><br><span class="line">        listen       8888  ssl;</span><br><span class="line">        ssl_certificate domain.pem;</span><br><span class="line">        ssl_certificate_key domain.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        error_page 497 301 https://$http_host<span class="variable">$request_uri</span>;</span><br><span class="line"></span><br><span class="line">        proxy_intercept_errors on;</span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        location /</span><br><span class="line">        &#123;</span><br><span class="line">                proxy_pass http://xxxxxxxServer;</span><br><span class="line">                proxy_redirect off;</span><br><span class="line">                proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重点是 <code>error_page 497 301 https://$http_host$request_uri;</code>, 可以解决 <code>The plain HTTP request was sent to HTTPS port</code> 问题</p>
<p>497 HTTP Request Sent to HTTPS Port<br>An expansion of the 400 Bad Request response code, used when the client has made a HTTP request to a port listening for HTTPS requests.</p>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper</title>
    <url>/2021/11/15/web%20server/zookeeper/zookeeper/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>zookeeper 安装</p>
<p><em>更新历史</em><br>无</p>
<span id="more"></span>

<h2 id="单机安装"><a href="#单机安装" class="headerlink" title="单机安装"></a>单机安装</h2><p>计划zookeeper安装路径为 <code>/data/zookeeper</code> , 以 <code>apache-zookeeper-3.6.3</code> 为例。</p>
<h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar xvf apache-zookeeper-3.6.3-bin.tar.gz -C /data</span><br><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line"><span class="built_in">mv</span> apache-zookeeper-3.6.3-bin zookeeper</span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/zookeeper/conf</span><br><span class="line"><span class="built_in">cp</span> zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>


<p><code>zoo.cfg</code> 内容如下，<code>admin.serverPort</code> 根据实际情况修改， 默认会 占用<code>8081</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line">dataDir=/data/zookeeper/data</span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line">clientPort=12181</span><br><span class="line">admin.serverPort=12180</span><br><span class="line"></span><br><span class="line"><span class="comment"># the maximum number of client connections.</span></span><br><span class="line"><span class="comment"># increase this if you need to handle more clients</span></span><br><span class="line"><span class="comment">#maxClientCnxns=60</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Be sure to read the maintenance section of the </span></span><br><span class="line"><span class="comment"># administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></span><br><span class="line"><span class="comment">#autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="comment"># Purge task interval in hours</span></span><br><span class="line"><span class="comment"># Set to &quot;0&quot; to disable auto purge feature</span></span><br><span class="line"><span class="comment">#autopurge.purgeInterval=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Metrics Providers</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># https://prometheus.io Metrics Exporter</span></span><br><span class="line"><span class="comment">#metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider</span></span><br><span class="line"><span class="comment">#metricsProvider.httpPort=7000</span></span><br><span class="line"><span class="comment">#metricsProvider.exportJvmInfo=true</span></span><br></pre></td></tr></table></figure>

<h3 id="systemctl-服务"><a href="#systemctl-服务" class="headerlink" title="systemctl 服务"></a>systemctl 服务</h3><ul>
<li><p>脚本<br><code>vim /usr/lib/systemd/system/zookeeper.service</code><br>zookeeper.service 内容如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Zookeeper Service unit Configuration</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/data/zookeeper/bin/zkServer.sh start </span><br><span class="line">ExecStop=/data/zookeeper/bin/zkServer.sh stop</span><br><span class="line">PIDFile=/data/zookeeper/data/zookeeper_server.pid</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行以下命令重载unit配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></li>
<li><p>开机启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> zookeeper</span><br><span class="line">systemctl start zookeeper</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>server</tag>
        <tag>zookeeper</tag>
      </tags>
  </entry>
</search>
